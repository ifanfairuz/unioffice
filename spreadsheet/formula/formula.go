//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_c "bytes";_a "errors";_gf "fmt";_af "github.com/ifanfairuz/unioffice/common/logger";_ce "github.com/ifanfairuz/unioffice/internal/mergesort";_eg "github.com/ifanfairuz/unioffice/internal/wildcard";_ef "github.com/ifanfairuz/unioffice/spreadsheet/format";
_bce "github.com/ifanfairuz/unioffice/spreadsheet/reference";_db "github.com/ifanfairuz/unioffice/spreadsheet/update";_b "io";_d "math";_bc "math/big";_gd "math/rand";_bg "regexp";_bf "sort";_fd "strconv";_e "strings";_ad "sync";_bcd "time";_f "unicode";);

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_fdgf EmptyExpr )Update (q *_db .UpdateQuery )Expression {return _fdgf };func _daaa (_fbec string ,_bgdbb func (_abbga float64 )float64 )Function {return func (_bded []Result )Result {if len (_bded )!=1{return MakeErrorResult (_fbec +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_aeca :=_bded [0].AsNumber ();switch _aeca .Type {case ResultTypeNumber :_cbdd :=_bgdbb (_aeca .ValueNumber );if _d .IsNaN (_cbdd ){return MakeErrorResult (_fbec +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _d .IsInf (_cbdd ,0){return MakeErrorResult (_fbec +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};return MakeNumberResult (_cbdd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fbec +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _aeca ;default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbec ,_aeca .Type ));
};};};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _aeeef (args ,false )};func (_egbg *yyParserImpl )Lookahead ()int {return _egbg ._ccege };var _fccgd =[...]int {-1,1,1,-1,-2,0};type yyParserImpl struct{_bdedf yySymType ;_efcba [_aeed ]yySymType ;_ccege int ;};const _dd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";
const _daga ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";
type ivr struct{};var _fbae =[...]string {};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gbg :=args [1].ValueNumber ;
_cdda :=args [0];var _fbf float64 ;switch _cdda .Type {case ResultTypeEmpty :_fbf =0;case ResultTypeNumber :_fbf =_cdda .ValueNumber ;case ResultTypeString :_acc :=DateValue ([]Result {args [0]});if _acc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_fbf =_acc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cbcb :=_ded (_fbf );
_edbb :=_cbcb .AddDate (0,int (_gbg +1),0);_cdb ,_bfge ,_ :=_edbb .Date ();_ecbf :=_efdc (_cdb ,int (_bfge ),0);if _ecbf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _cdb ==1900&&_bfge ==3{_ecbf --;};return MakeNumberResult (_ecbf );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbff :=args [0].Type ;for _ ,_bceg :=range args {if _bceg .Type !=_gbff {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _gbff {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_dbaff :=len (args [0].ListValues ());_dgee :=make ([]float64 ,_dbaff );for _bfgfba :=range _dgee {_dgee [_bfgfba ]=1.0;};for _ ,_fegc :=range args {if len (_fegc .ListValues ())!=_dbaff {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _cdafd ,_bgeca :=range _fegc .ListValues (){_bgeca =_bgeca .AsNumber ();if _bgeca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_dgee [_cdafd ]=_dgee [_cdafd ]*_bgeca .ValueNumber ;};};_gadd :=0.0;for _ ,_edfd :=range _dgee {_gadd +=_edfd ;};return MakeNumberResult (_gadd );};return MakeNumberResult (1.0);};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_adea :=len (args );if _adea !=2&&_adea !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gcbd ,_edbae :=_beea (args [0],args [1],"\u0058\u0049\u0052\u0052");if _edbae .Type ==ResultTypeError {return _edbae ;};_fegfb :=_gcbd ._dfcfc ;_dbfe :=_gcbd ._fegbf ;_bddd :=0.1;if _adea ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bddd =args [2].ValueNumber ;if _bddd <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _bbgd (_fegfb ,_dbfe ,_bddd );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bfeac .Lock ();defer _bfeac .Unlock ();if _efagg ,_eefd :=_ccgcg [name ];_eefd {return _efagg ;};return nil ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cbcd (args ,false )};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cdfd :=args [0].AsNumber ();if _cdfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfgde :=int (_cdfd .ValueNumber );if _gfgde < 0||_gfgde > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_gf .Sprintf ("\u0025\u0063",_gfgde ));};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fbcde Expression ;_deafa ,_edfgc int ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_fed [][]Expression };const _dbdbb =57372;func _cgaf (_gdce string )bool {for _ ,_bbg :=range _add {_dda :=_bbg .FindStringSubmatch (_gdce );if len (_dda )> 1{return true ;};};return false ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_ggga :=len (args );if _ggga < 3||_ggga > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cdafc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fcdf :=args [1].ValueNumber ;if _fcdf !=float64 (int (_fcdf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbbe :=args [2].ValueNumber ;_ebcd :=0.0;if _ggga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebcd =args [3].ValueNumber ;};_cedc :=0.0;if _ggga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cedc =args [4].ValueNumber ;if _cedc !=0{_cedc =1;};};if _cdafc ==0{return MakeNumberResult (-_gbbe *_fcdf -_ebcd );}else {return MakeNumberResult ((((1-_d .Pow (1+_cdafc ,_fcdf ))/_cdafc )*_gbbe *(1+_cdafc *_cedc )-_ebcd )/_d .Pow (1+_cdafc ,_fcdf ));
};};const (_ byte =iota ;_becec ;_gfgd ;_efaf ;_fcbfe ;_gagd ;);func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cccd :=args [0].AsString ();if _cccd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_cccd .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_cccd .ValueString [0]));};func _ccgg (_deafb ,_gdgf _bcd .Time ,_gda ,_babgf int )_bcd .Time {_bafc :=_gdgf ;_dgbg :=_deafb .Year ()-_gdgf .Year ();_bafc =_bafc .AddDate (_dgbg ,0,0);if _deafb .After (_bafc ){_bafc =_bafc .AddDate (1,0,0);
};_cbf :=-12/_gda ;for _bafc .After (_deafb ){_bafc =_bafc .AddDate (0,_cbf ,0);};return _bafc ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aeff :=args [0].AsNumber ();_bgff :=args [1].AsNumber ();if _aeff .Type !=ResultTypeNumber ||_bgff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bgff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_d .Trunc (_aeff .ValueNumber /_bgff .ValueNumber ));
};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_afee ,_ebdc :=_eacd ("\u0046\u0049\u004e\u0044",args );if _ebdc .Type !=ResultTypeEmpty {return _ebdc ;};_gecc :=_e .ToLower (_afee ._eefe );if _gecc ==""{return MakeNumberResult (1.0);};_ffbf :=_e .ToLower (_afee ._gdgff );
_beeeg :=_afee ._dbdf ;_eaeef :=1;for _fbdab :=range _ffbf {if _eaeef < _beeeg {_eaeef ++;continue ;};_cbgcb :=_eg .Index (_gecc ,_ffbf [_fbdab :]);if _cbgcb ==0{return MakeNumberResult (float64 (_eaeef ));};_eaeef ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};func _bfgeb (_eaabg []Result )(float64 ,float64 ,Result ){_egbbg :=0.0;_defg :=1.0;for _ ,_cecdf :=range _eaabg {switch _cecdf .Type {case ResultTypeNumber :_egbbg +=_cecdf .ValueNumber ;_defg *=_feed (_cecdf .ValueNumber );case ResultTypeList ,ResultTypeArray :_cfbgc ,_cddb ,_gdgg :=_bfgeb (_cecdf .ListValues ());
_egbbg +=_cfbgc ;_defg *=_feed (_cddb );if _gdgg .Type ==ResultTypeError {return 0,0,_gdgg ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_cecdf ;};};return _egbbg ,_defg ,_fcea ;};type criteriaRegex struct{_ebed byte ;_bagg string ;};const _fbafc =57354;func _dccb (_egee ,_cgd float64 ,_agga ,_fcec int )float64 {_edgc :=_ded (_egee );_egag :=_ded (_cgd );
_dafd :=_ccgg (_edgc ,_egag ,_agga ,_fcec );return _eebg (_dafd ,_edgc ,_fcec );};type parsedSearchObject struct{_eefe string ;_gdgff string ;_dbdf int ;};var _bcgcc =map[string ]Function {};var _feb =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func _fgbaf (_cbdc ,_ggdf Result ,_eeabd ,_bbcfd bool )cmpResult {_cbdc =_cbdc .AsNumber ();
_ggdf =_ggdf .AsNumber ();if _cbdc .Type !=_ggdf .Type {return _fdegf ;};if _cbdc .Type ==ResultTypeNumber {if _cbdc .ValueNumber ==_ggdf .ValueNumber {return _beaf ;};if _cbdc .ValueNumber < _ggdf .ValueNumber {return _cggc ;};return _beab ;};if _cbdc .Type ==ResultTypeString {_gbfb :=_cbdc .ValueString ;
_affe :=_ggdf .ValueString ;if !_eeabd {_gbfb =_e .ToLower (_gbfb );_affe =_e .ToLower (_affe );};if _bbcfd {_cgee :=_eg .Match (_affe ,_gbfb );if _cgee {return _beaf ;}else {return _beab ;};};return cmpResult (_e .Compare (_gbfb ,_affe ));};if _cbdc .Type ==ResultTypeEmpty {return _beaf ;
};if _cbdc .Type ==ResultTypeList {if len (_cbdc .ValueList )< len (_ggdf .ValueList ){return _cggc ;};if len (_cbdc .ValueList )> len (_ggdf .ValueList ){return _beab ;};for _acgb :=range _cbdc .ValueList {_bfgee :=_fgbaf (_cbdc .ValueList [_acgb ],_ggdf .ValueList [_acgb ],_eeabd ,_bbcfd );
if _bfgee !=_beaf {return _bfgee ;};};return _beaf ;};if _cbdc .Type ==ResultTypeList {if len (_cbdc .ValueArray )< len (_ggdf .ValueArray ){return _cggc ;};if len (_cbdc .ValueArray )> len (_ggdf .ValueArray ){return _beab ;};for _afad :=range _cbdc .ValueArray {_fdda :=_cbdc .ValueArray [_afad ];
_cdag :=_cbdc .ValueArray [_afad ];if len (_fdda )< len (_cdag ){return _cggc ;};if len (_fdda )> len (_cdag ){return _beab ;};for _gfabg :=range _fdda {_bba :=_fgbaf (_fdda [_gfabg ],_cdag [_gfabg ],_eeabd ,_bbcfd );if _bba !=_beaf {return _bba ;};};};
return _beaf ;};return _fdegf ;};func _cbgb (_gccf Result )[][]Result {switch _gccf .Type {case ResultTypeArray :return _gccf .ValueArray ;case ResultTypeList :return [][]Result {_gccf .ValueList };default:return [][]Result {};};};

// Bool is a boolean expression.
type Bool struct{_ec bool };func _gg (_cc BinOpType ,_ca ,_eb []Result )Result {_gdc :=[]Result {};for _efbc :=range _ca {_dbb :=_ca [_efbc ].AsNumber ();_cec :=_eb [_efbc ].AsNumber ();if _dbb .Type !=ResultTypeNumber ||_cec .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cc {case BinOpTypePlus :_gdc =append (_gdc ,MakeNumberResult (_dbb .ValueNumber +_cec .ValueNumber ));case BinOpTypeMinus :_gdc =append (_gdc ,MakeNumberResult (_dbb .ValueNumber -_cec .ValueNumber ));case BinOpTypeMult :_gdc =append (_gdc ,MakeNumberResult (_dbb .ValueNumber *_cec .ValueNumber ));
case BinOpTypeDiv :if _cec .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gdc =append (_gdc ,MakeNumberResult (_dbb .ValueNumber /_cec .ValueNumber ));case BinOpTypeExp :_gdc =append (_gdc ,MakeNumberResult (_d .Pow (_dbb .ValueNumber ,_cec .ValueNumber )));
case BinOpTypeLT :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber < _cec .ValueNumber ));case BinOpTypeGT :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber > _cec .ValueNumber ));case BinOpTypeEQ :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber ==_cec .ValueNumber ));
case BinOpTypeLEQ :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber <=_cec .ValueNumber ));case BinOpTypeGEQ :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber >=_cec .ValueNumber ));case BinOpTypeNE :_gdc =append (_gdc ,MakeBoolResult (_dbb .ValueNumber !=_cec .ValueNumber ));
default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cc ));};};return MakeListResult (_gdc );};func (_adceb PrefixHorizontalRange )horizontalRangeReference (_facad string )string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_facad ,_adceb ._deafa ,_adceb ._edfgc );
};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_ccee :=len (args );if _ccee < 2||_ccee > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_afcb :=args [0];if _afcb .Type !=ResultTypeArray &&_afcb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_daee :=args [1].AsNumber ();if _daee .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gdad :=int (_daee .ValueNumber )-1;_gfdb :=-1;if _ccee ==3&&args [2].Type !=ResultTypeEmpty {_feea :=args [2].AsNumber ();if _feea .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gfdb =int (_feea .ValueNumber )-1;};if _gdad ==-1&&_gfdb ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _dgae []Result ;if _afcb .Type ==ResultTypeArray {_dgdge :=_afcb .ValueArray ;if _gdad < -1||_gdad >=len (_dgdge ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _gdad ==-1{if _gfdb >=len (_dgdge [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bbfed :=[][]Result {};for _ ,_bdba :=range _dgdge {_edgb :=_bdba [_gfdb ];
if _edgb .Type ==ResultTypeEmpty {_edgb =MakeNumberResult (0);};_bbfed =append (_bbfed ,[]Result {_edgb });};return MakeArrayResult (_bbfed );};_dgae =_dgdge [_gdad ];}else {_abcfb :=_afcb .ValueList ;if _gdad < -1||_gdad >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _gdad ==-1{if _gfdb >=len (_abcfb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eeaa :=_abcfb [_gfdb ];if _eeaa .Type ==ResultTypeEmpty {_eeaa =MakeNumberResult (0);
};return _eeaa ;};_dgae =_abcfb ;};if _gfdb < -1||_gfdb > len (_dgae ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _gfdb ==-1{_gfff :=[]Result {};
for _ ,_ddac :=range _dgae {if _ddac .Type ==ResultTypeEmpty {_gfff =append (_gfff ,MakeNumberResult (0));}else {_gfff =append (_gfff ,_ddac );};};return MakeArrayResult ([][]Result {_gfff });};_gedg :=_dgae [_gfdb ];if _gedg .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _gedg ;};

// Eval evaluates and returns the result of a formula.
func (_dfeg *defEval )Eval (ctx Context ,formula string )Result {_beg :=ParseString (formula );_ddd :=make (chan Result );go func (){if _beg ==nil {_ddd <-MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_dfeg .checkLastEvalIsRef (ctx ,_beg );_ddd <-_beg .Eval (ctx ,_dfeg );};}();select{case _fa :=<-_ddd :return _fa ;case <-_bcd .After (_ae ):_af .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_gacf :=len (args );if _gacf < 4||_gacf > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_caff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agab :=args [1].ValueNumber ;if _agab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dacb :=args [2].ValueNumber ;if _dacb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gbad :=args [3].ValueNumber ;_fgd :=0.0;if _gacf > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fgd =args [4].ValueNumber ;};_eafa :=0;if _gacf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eafa =int (args [5].ValueNumber );if _eafa !=0{_eafa =1;};};return MakeNumberResult (_gfag (_caff ,_agab ,_dacb ,_gbad ,_fgd ,_eafa ));};func _fcbd (_ddf string )(int ,int ,int ,bool ,Result ){_dcd :="";_adbf :=[]string {};for _ceda ,_fab :=range _aae {_adbf =_fab .FindStringSubmatch (_ddf );
if len (_adbf )> 1{_dcd =_ceda ;break ;};};if _dcd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_fbg :=false ;var _agd ,_ffcd ,_cgeb int ;var _bgg error ;switch _dcd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_ffcd ,_bgg =_fd .Atoi (_adbf [1]);
if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_cgeb ,_bgg =_fd .Atoi (_adbf [3]);if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_agd ,_bgg =_fd .Atoi (_adbf [5]);if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );
};if _agd < 0||_agd > 9999||(_agd > 99&&_agd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_agd =_adec (_agd );_fbg =_adbf [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_ffcd =_fec [_adbf [1]];_cgeb ,_bgg =_fd .Atoi (_adbf [14]);
if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_agd ,_bgg =_fd .Atoi (_adbf [16]);if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};if _agd < 0||_agd > 9999||(_agd > 99&&_agd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );
};_agd =_adec (_agd );_fbg =_adbf [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_bgde ,_cecb :=_fd .Atoi (_adbf [1]);if _cecb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_fdbb ,_cecb :=_fd .Atoi (_adbf [3]);
if _cecb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_ddb ,_cecb :=_fd .Atoi (_adbf [5]);if _cecb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};if _bgde >=1900&&_bgde < 10000{_agd =_bgde ;_ffcd =_fdbb ;
_cgeb =_ddb ;}else if _bgde > 0&&_bgde < 13{_ffcd =_bgde ;_cgeb =_fdbb ;_agd =_ddb ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_fbg =_adbf [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_agd ,_bgg =_fd .Atoi (_adbf [16]);
if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_ffcd =_fec [_adbf [3]];_cgeb ,_bgg =_fd .Atoi (_adbf [1]);if _bgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );};_fbg =_adbf [19]=="";};if !_babg (_agd ,_ffcd ,_cgeb ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dce );
};return _agd ,_ffcd ,_cgeb ,_fbg ,_fcea ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cac :=args [0];switch _cac .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_bed :=_ded (_cac .ValueNumber );return MakeNumberResult (float64 (_bed .Minute ()));case ResultTypeString :_acb :=_e .ToLower (_cac .ValueString );if !_fbd (_acb ){_ ,_ ,_ ,_dcc ,_cddc :=_fcbd (_acb );if _cddc .Type ==ResultTypeError {_cddc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _cddc ;};if _dcc {return MakeNumberResult (0);};};_ ,_bdcb ,_ ,_ ,_ ,_cegb :=_edbe (_acb );if _cegb .Type ==ResultTypeError {return _cegb ;};return MakeNumberResult (float64 (_bdcb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_fgbb :=args [0];
if _fgbb .Type !=ResultTypeArray &&_fgbb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gccc :=_fgbb .ValueArray ;if len (_gccc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_gccc [0])));};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_aeef string };

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fgff :=len (args );if _fgff !=6&&_fgff !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fgdf ,_efef ,_cgga :=_abcb (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _cgga .Type ==ResultTypeError {return _cgga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_afed :=args [2].ValueNumber ;if _afed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_ebcg :=args [3].ValueNumber ;if _ebcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afgg :=args [4].ValueNumber ;if _afgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egbb :=args [5];if _egbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bdcbb :=_egbb .ValueNumber ;if !_fegd (_bdcbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bfbb :=0;if _fgff ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfbb =int (args [6].ValueNumber );if !_ccfg (_bfbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_bggb ,_cgga :=_ecaa (_fgdf ,_efef ,_afed ,_ebcg ,_afgg ,_bdcbb ,_bfbb );if _cgga .Type ==ResultTypeError {return _cgga ;};return MakeNumberResult (_bggb );};

// IsBool returns false for the invalid reference context.
func (_eccd *ivr )IsBool (cellRef string )bool {return false };

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_ceba :v }};const _feaf =57368;func _ebd (_cbfg ,_fbfe float64 ,_begd ,_bca int )(float64 ,Result ){_efdd ,_bfdg :=_ded (_cbfg ),_ded (_fbfe );if _bfdg .After (_efdd ){_bfade :=_ccgg (_efdd ,_bfdg ,_begd ,_bca );
_ageg :=(_bfdg .Year ()-_bfade .Year ())*12+int (_bfdg .Month ())-int (_bfade .Month ());return float64 (_ageg *_begd )/12.0,_fcea ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};const _dgd ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// GetWidth returns 0 for the invalid reference context.
func (_bdbb *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Eval evaluates the binary expression using the context given.
func (_dec BinaryExpr )String ()string {_gff :="";switch _dec ._fdb {case BinOpTypePlus :_gff ="\u002b";case BinOpTypeMinus :_gff ="\u002d";case BinOpTypeMult :_gff ="\u002a";case BinOpTypeDiv :_gff ="\u002f";case BinOpTypeExp :_gff ="\u005e";case BinOpTypeLT :_gff ="\u003c";
case BinOpTypeGT :_gff ="\u003e";case BinOpTypeEQ :_gff ="\u003d";case BinOpTypeLEQ :_gff ="\u003c\u003d";case BinOpTypeGEQ :_gff ="\u003e\u003d";case BinOpTypeNE :_gff ="\u003c\u003e";case BinOpTypeConcat :_gff ="\u0026";};return _dec ._ba .String ()+_gff +_dec ._efb .String ();
};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _cgbc (args ,true )};

// Update updates the horizontal range references after removing a row/column.
func (_dgdb HorizontalRange )Update (q *_db .UpdateQuery )Expression {return _dgdb };

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_cbcde ,_aced ,_bceb :=_bfgeb (args );if _bceb .Type ==ResultTypeError {return _bceb ;};return MakeNumberResult (_feed (_cbcde )/_aced );};func _gdecg (_cgaag Result ,_ebca int )[]Result {_fddbg :=[]Result {};switch _cgaag .Type {case ResultTypeList :_dbcc :=_cgaag .ValueList ;
_fbce :=len (_dbcc );for _ggdc :=0;_ggdc < _ebca ;_ggdc ++{if _ggdc < _fbce {_fddbg =append (_fddbg ,_dbcc [_ggdc ]);}else {_fddbg =append (_fddbg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bgda :=0;
_bgda < _ebca ;_bgda ++{_fddbg =append (_fddbg ,_cgaag );};};return _fddbg ;};type rmode byte ;func _ffb (){_aae ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_bg .MustCompile ("\u005e"+_cfed +_beb );_aae ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_bg .MustCompile ("\u005e"+_cfg +_beb );
_aae ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_bg .MustCompile ("\u005e"+_gea +_beb );_aae ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_bg .MustCompile ("\u005e"+_bcb +_beb );_adge ["\u0068\u0068"]=_bg .MustCompile (_gfe +_dbg +"\u0024");
_adge ["\u0068\u0068\u003am\u006d"]=_bg .MustCompile (_gfe +_cfgg +"\u0024");_adge ["\u006d\u006d\u003as\u0073"]=_bg .MustCompile (_gfe +_ebee +"\u0024");_adge ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_bg .MustCompile (_gfe +_bfae +"\u0024");
_add =[]*_bg .Regexp {_bg .MustCompile ("\u005e"+_cfed +"\u0024"),_bg .MustCompile ("\u005e"+_cfg +"\u0024"),_bg .MustCompile ("\u005e"+_gea +"\u0024"),_bg .MustCompile ("\u005e"+_bcb +"\u0024")};_efd =[]*_bg .Regexp {_bg .MustCompile ("\u005e"+_dbg +"\u0024"),_bg .MustCompile ("\u005e"+_cfgg +"\u0024"),_bg .MustCompile ("\u005e"+_ebee +"\u0024"),_bg .MustCompile ("\u005e"+_bfae +"\u0024")};
};func (_badc tokenType )String ()string {return _eafge (int (_badc ))};const _effdd ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
const _dggb =2;func init (){_ffb ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );
RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};const _dce ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";
func _ccffc (_agdba yyLexer ,_gaebe *yySymType )(_gbagg ,_cbcc int ){_cbcc =0;_gbagg =_agdba .Lex (_gaebe );if _gbagg <=0{_cbcc =_ecdfb [0];goto _cacf ;};if _gbagg < len (_ecdfb ){_cbcc =_ecdfb [_gbagg ];goto _cacf ;};if _gbagg >=_egac {if _gbagg < _egac +len (_beabb ){_cbcc =_beabb [_gbagg -_egac ];
goto _cacf ;};};for _gbba :=0;_gbba < len (_dbcd );_gbba +=2{_cbcc =_dbcd [_gbba +0];if _cbcc ==_gbagg {_cbcc =_dbcd [_gbba +1];goto _cacf ;};};_cacf :if _cbcc ==0{_cbcc =_beabb [1];};if _cfbf >=3{_gf .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_eafge (_cbcc ),uint (_gbagg ));
};return _gbagg ,_cbcc ;};

// GetLocked returns FALSE for the invalid reference context.
func (_fgdgg *ivr )GetLocked (cellRef string )bool {return false };

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_caag ,_fegba int };

// IsDBCS returns false for the invalid reference context.
func (_gaae *ivr )IsDBCS ()bool {return false };

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_cdg ,_daf :=_daegg (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _daf .Type ==ResultTypeError {return _daf ;};return MakeNumberResult (_dccb (_cdg ._agg ,_cdg ._cgef ,_cdg ._fbdc ,_cdg ._bcgf ));};func _eegaa (_cbgfe ,_gccae []string )[]string {for _ ,_ebefgd :=range _gccae {_cbgfe =append (_cbgfe ,_ebefgd );
};return _cbgfe ;};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bfeac .Lock ();defer _bfeac .Unlock ();if _ ,_aacb :=_ccgcg [name ];_aacb {_af .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_ccgcg [name ]=fn ;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cdc ConstArrayExpr )Update (q *_db .UpdateQuery )Expression {return _cdc };

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ebcc :=args [0].AsNumber ();if _ebcc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aeee :=float64 (1);if _ebcc .ValueNumber < 0{_aeee =-1;};if len (args )> 1{_deea :=args [1].AsNumber ();if _deea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_aeee =_deea .ValueNumber ;};_gcade :=float64 (1);if len (args )> 2{_aeaa :=args [2].AsNumber ();if _aeaa .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcade =_aeaa .ValueNumber ;};if len (args )==1{return MakeNumberResult (_d .Floor (_ebcc .ValueNumber ));};_adgd :=_ebcc .ValueNumber ;_adgd ,_gaaf :=_d .Modf (_adgd /_aeee );if _gaaf !=0&&_ebcc .ValueNumber < 0&&_gcade > 0{_adgd ++;};return MakeNumberResult (_adgd *_aeee );
};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgg :=args [0].ValueNumber ;if _fgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbba :=args [1].ValueNumber ;if _bbba <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_baag :=args [2].ValueNumber ;if _baag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_d .Log10 (_baag )-_d .Log10 (_bbba ))/_d .Log10 (1+_fgg ));};

// Eval evaluates and returns the result of an empty expression.
func (_aagf EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bgaac :=args [0].AsString ();if _bgaac .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_bddf :="\u0041\u0031";if len (args )==2{_egdef :=args [1].Ref ;if _egdef .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_bddf =_egdef .Value ;};switch _bgaac .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_dgec ,_egec :=_bce .ParseCellReference (_bddf );if _egec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bddf );
};_gefc :="\u0024"+_dgec .Column +"\u0024"+_fd .Itoa (int (_dgec .RowIdx ));if _dgec .SheetName !=""{_gefc =_dgec .SheetName +"\u0021"+_gefc ;};return MakeStringResult (_gefc );case "\u0063\u006f\u006c":_fgdg ,_dadg :=_bce .ParseCellReference (_bddf );
if _dadg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bddf );};return MakeNumberResult (float64 (_fgdg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_efdab :=_e .Contains (ctx .GetFormat (_bddf ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_efdab );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bddae :="\u0047";
_gede :=ctx .GetFormat (_bddf );if _gede =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_gcac .MatchString (_gede ){_bddae ="\u0046\u0030";}else if _gede =="\u0030\u0025"{_bddae ="\u0050\u0030";}else if _gede =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bddae ="\u0044\u0032";
}else if _gede =="\u004d\u004d\u002fY\u0059"{_bddae ="\u0044\u0033";}else if _gede =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_gede =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bddae ="\u0044\u0034";
}else if _gede =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bddae ="\u0044\u0035";}else if _gede =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bddae ="\u0044\u0036";}else if _gede =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bddae ="\u0044\u0037";
}else if _gede =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bddae ="\u0044\u0038";}else if _gede =="\u0048\u0048\u003aM\u004d"{_bddae ="\u0044\u0039";}else if _cbggc .MatchString (_gede ){_bddae ="\u002e\u0030";}else if _egaf .MatchString (_gede ){_bddae ="\u002e\u0030\u0028\u0029";
}else if _ecfb .MatchString (_gede ){_bddae ="\u0043\u0030";}else if _ggcb .MatchString (_gede )||_adce .MatchString (_gede ){_bddae ="\u0044\u0031";}else if _ffcea :=_dfag .FindStringSubmatch (_gede );len (_ffcea )> 1{_bddae ="\u0046"+_fd .Itoa (len (_ffcea [1]));
}else if _gdbb :=_gdaf .FindStringSubmatch (_gede );len (_gdbb )> 1{_bddae ="\u002e"+_fd .Itoa (len (_gdbb [2]));}else if _geba :=_gdcf .FindStringSubmatch (_gede );len (_geba )> 1{_bddae ="\u0050"+_fd .Itoa (len (_geba [2]));}else if _gedf :=_bbad .FindStringSubmatch (_gede );
len (_gedf )> 1{_bddae ="\u0043"+_ccbgc (_gedf ,1);}else if _eddf :=_gdfc .FindStringSubmatch (_gede );len (_eddf )> 1{_bddae ="\u0043"+_ccbgc (_eddf ,1);}else if _efcgc :=_agde .FindStringSubmatch (_gede );len (_efcgc )> 1{_bddae ="\u002e"+_ccbgc (_efcgc ,1)+"\u0028\u0029";
}else if _degc :=_begg .FindStringSubmatch (_gede );len (_degc )> 1{_bddae ="\u002e"+_ccbgc (_degc ,1);}else if _ecaf :=_gbcf .FindStringSubmatch (_gede );len (_ecaf )> 1{_bddae ="\u0053"+_ccbgc (_ecaf ,3);};if _bddae !="\u0047"&&_e .Contains (_gede ,"\u005b\u0052\u0045D\u005d"){_bddae +="\u002d";
};return MakeStringResult (_bddae );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_befa :=ctx .GetFormat (_bddf );if _cbab .MatchString (_befa ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bddf ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gcccd :=0.0;if ctx .GetLocked (_bddf ){_gcccd =1.0;};return MakeNumberResult (_gcccd );case "\u0072\u006f\u0077":_gdfbe ,_gabgd :=_bce .ParseCellReference (_bddf );if _gabgd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bddf );
};return MakeNumberResult (float64 (_gdfbe .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_aaab ,_ggbff :=_bce .ParseCellReference (_bddf );if _ggbff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bddf );};if _aaab .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_aaab .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_aaab .SheetName ).GetWidth (int (_aaab .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_bgaac .ValueString );
};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aecba :=args [0].AsNumber ();if _aecba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_agaf :=float64 (1);if _aecba .ValueNumber < 0{_agaf =-1;};if len (args )> 1{_fgcf :=args [1].AsNumber ();if _fgcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agaf =_fgcf .ValueNumber ;};if _agaf < 0&&_aecba .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_d .Ceil (_aecba .ValueNumber ));};_dcdf :=_aecba .ValueNumber ;_dcdf ,_efgf :=_d .Modf (_dcdf /_agaf );if _efgf > 0{_dcdf ++;};return MakeNumberResult (_dcdf *_agaf );};const _aaada =57370;func _gbcc (){_ggdgg =_bg .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");
_cbaf =_bg .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_ebbg =_bg .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_fdee =_bg .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_bffbe =_bg .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");
_agba =_bg .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_ebgc :=args [0].AsNumber ();if _ebgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgbf :=float64 (1);if _ebgc .ValueNumber < 0{_bgbf =-1;};if len (args )> 1{_gcfd :=args [1].AsNumber ();if _gcfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_bgbf =_d .Abs (_gcfd .ValueNumber );};if len (args )==1{return MakeNumberResult (_d .Floor (_ebgc .ValueNumber ));};_dfee :=_ebgc .ValueNumber ;_dfee ,_eebe :=_d .Modf (_dfee /_bgbf );if _eebe !=0{if _ebgc .ValueNumber < 0{_dfee --;};};return MakeNumberResult (_dfee *_bgbf );
};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fefaa :pfx ,_fbdf :exp }};var _gfg int64 =_fba (1900,_bcd .January ,1);func _cbcd (_deg []Result ,_fcdaa bool )Result {var _bfgfb string ;if _fcdaa {_bfgfb ="\u004c\u0041\u0052G\u0045";
}else {_bfgfb ="\u0053\u004d\u0041L\u004c";};if len (_deg )!=2{return MakeErrorResult (_bfgfb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eecda :=_deg [0];var _daggd [][]Result ;
switch _eecda .Type {case ResultTypeArray :_daggd =_eecda .ValueArray ;case ResultTypeList :_daggd =[][]Result {_eecda .ValueList };default:return MakeErrorResult (_bfgfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_daggd )==0{return MakeErrorResult (_bfgfb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _deg [1].Type !=ResultTypeNumber {return MakeErrorResult (_bfgfb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_fbge :=_deg [1].ValueNumber ;if _fbge < 1{return MakeErrorResultType (ErrorTypeNum ,_bfgfb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gaba :=int (_fbge );if float64 (_gaba )!=_fbge {return MakeErrorResultType (ErrorTypeNum ,_bfgfb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_dcce :=[]float64 {};for _ ,_bcbd :=range _daggd {for _ ,_cbdf :=range _bcbd {if _cbdf .Type ==ResultTypeNumber {_dcce =append (_dcce ,_cbdf .ValueNumber );};};};if _gaba > len (_dcce ){return MakeErrorResultType (ErrorTypeNum ,_bfgfb +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_abed :=_ce .MergeSort (_dcce );if _fcdaa {return MakeNumberResult (_abed [len (_abed )-_gaba ]);}else {return MakeNumberResult (_abed [_gaba -1]);};};

// Eval evaluates and returns a number.
func (_fdada Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_fdada ._dgga )};func _fegd (_dddb float64 )bool {return _dddb ==1||_dddb ==2||_dddb ==4};func _acadc (_afag ,_edgfa []float64 ,_aec float64 )float64 {_ecgf :=_aec +1;
_cdab :=_afag [0];_eaee :=len (_afag );_gefd :=_edgfa [0];for _dacf :=1;_dacf < _eaee ;_dacf ++{_cdab +=_afag [_dacf ]/_d .Pow (_ecgf ,(_edgfa [_dacf ]-_gefd )/365);};return _cdab ;};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_babd ,_ddbc ,_agae :=_abcb (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _agae .Type ==ResultTypeError {return _agae ;};_agcg ,_agae :=_gfcac (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _agae .Type ==ResultTypeError {return _agae ;};if _agcg >=_babd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bgaf :=args [3].ValueNumber ;if _bgaf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebga :=args [4].ValueNumber ;if _ebga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_ffbeb :=args [5].ValueNumber ;if _ffbeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebac :=float64 (int (args [6].ValueNumber ));if !_fegd (_ebac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgbe :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dgbe =int (args [7].ValueNumber );if !_ccfg (_dgbe ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_fgeg ,_agae :=_fdbc (_agcg ,_ddbc ,_dgbe );if _agae .Type ==ResultTypeError {return _agae ;};_fgeg *=_ebac ;_cded ,_agae :=_fdbc (_babd ,_ddbc ,_dgbe );if _agae .Type ==ResultTypeError {return _agae ;};_cded *=_ebac ;_ggaf ,_agae :=_fdbc (_agcg ,_babd ,_dgbe );
if _agae .Type ==ResultTypeError {return _agae ;};_ggaf *=_ebac ;_fcdef :=_ffbeb +_fgeg *100*_bgaf /_ebac ;_fcdef /=_ebga +_ggaf *100*_bgaf /_ebac ;_fcdef --;_fcdef *=_ebac /_cded ;return MakeNumberResult (_fcdef );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dacbb :=args [0];if _dacbb .Type !=ResultTypeArray &&_dacbb .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dcgg :=_dacbb .ValueArray ;if len (_dcgg )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_dcgg )));};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gfad :=args [0].AsNumber ();_gfdg :=args [1].AsNumber ();if _gfad .Type !=ResultTypeNumber ||_gfdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _gfdg .ValueNumber < _gfad .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_cadaf :=int64 (_gfad .ValueNumber );_adgdc :=int64 (_gfdg .ValueNumber );return MakeNumberResult (float64 (_fgbad .Int63n (_adgdc -_cadaf +1)+_cadaf ));};var _ggdgg ,_cbaf ,_fdee ,_ebbg ,_agba ,_bffbe *_bg .Regexp ;func _bdegc (_cdce Result ,_fadb ,_agcb string )(string ,Result ){switch _cdce .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _cdce .Value (),_fcea ;
default:return "",MakeErrorResult (_fadb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_agcb +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _eebg (_acd ,_febb _bcd .Time ,_bbbd int )float64 {if _acd .After (_febb ){_acd ,_febb =_febb ,_acd ;
};_ggcc :=0;_cdca ,_aee ,_cdcb :=_acd .Date ();_efca ,_egd ,_gagb :=_febb .Date ();_fee ,_afa :=int (_aee ),int (_egd );_dfaa ,_bad :=_bcdc (_cdca ,_fee ,_cdcb ,_bbbd ),_bcdc (_efca ,_afa ,_gagb ,_bbbd );if !_cfad (_bbbd ){return _efdc (_efca ,_afa ,_bad )-_efdc (_cdca ,_fee ,_dfaa );
};if _bbbd ==0{if (_fee ==2||_dfaa < 30)&&_gagb ==31{_bad =31;}else if _afa ==2&&_bad ==_ggf (_efca ,_afa ){_bad =_ggf (_efca ,2);};}else {if _fee ==2&&_dfaa ==30{_dfaa =_ggf (_cdca ,2);};if _afa ==2&&_bad ==30{_bad =_ggf (_efca ,2);};};if _cdca < _efca ||(_cdca ==_efca &&_fee < _afa ){_ggcc =30-_dfaa +1;
_cdcb =1;_dfaa =1;_acdg :=_bcd .Date (_cdca ,_bcd .Month (_fee ),_cdcb ,0,0,0,0,_bcd .UTC ).AddDate (0,1,0);if _acdg .Year ()< _efca {_ggcc +=_abb (_acdg .Year (),int (_acdg .Month ()),12,_bbbd );_acdg =_acdg .AddDate (0,13-int (_acdg .Month ()),0);_ggcc +=_fdf (_acdg .Year (),_efca -1,_bbbd );
};_ggcc +=_abb (_efca ,int (_acdg .Month ()),_afa -1,_bbbd );_acdg =_acdg .AddDate (0,_afa -int (_acdg .Month ()),0);_fee =_acdg .Day ();};_ggcc +=_bad -_dfaa ;if _ggcc > 0{return float64 (_ggcc );}else {return 0;};};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cgf :=int (args [0].ValueNumber );if _cgf < 0||_cgf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _cgf <=1899{_cgf +=1900;};_bgdd :=_bcd .Month (args [1].ValueNumber );
_ffcc :=int (args [2].ValueNumber );_gced :=_fba (_cgf ,_bgdd ,_ffcc );_bcef :=_bacc (_gfg ,_gced )+1;if _bcef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_bcef );
};const _daffg =57359;type couponArgs struct{_agg float64 ;_cgef float64 ;_fbdc int ;_bcgf int ;};const (_dbebf rmode =iota ;_febab ;_ddbg ;);func (_efedg Result )String ()string {return _efedg .Value ()};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bddfg :=args [0].AsNumber ();if _bddfg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bage ,_fbafg :=_d .Modf (_bddfg .ValueNumber );if _fbafg < 0{_bage --;};return MakeNumberResult (_bage );};

// String returns a string representation of a vertical range with prefix.
func (_ggbad PrefixVerticalRange )String ()string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ggbad ._fdgbe .String (),_ggbad ._adfgb ,_ggbad ._caagf );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_bfff ,_gaafe :=_befd (args ,true );if _gaafe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_bfff /_gaafe );};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aecbf :=args [0].AsNumber ();
if _aecbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aacfe :=_d .Signbit (_aecbf .ValueNumber );
_gabfa ,_ggdcb :=_d .Modf (_aecbf .ValueNumber /2);_babe :=_gabfa *2;if _ggdcb !=0{if !_aacfe {_babe +=2;}else {_babe -=2;};};return MakeNumberResult (_babe );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _bbaa (args ,_ddbg )};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adde :=args [0].AsNumber ();
if _adde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgegf :=args [1].AsNumber ();if _fgegf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffaa :=int (_fgegf .ValueNumber );if _ffaa < 0||_ffaa > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_faaa :=0;if len (args )> 2{_caaca :=args [2].AsNumber ();if _caaca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_faaa =int (_caaca .ValueNumber );};_aefd :=_fd .FormatInt (int64 (_adde .ValueNumber ),_ffaa );if len (_aefd )< _faaa {_aefd =_e .Repeat ("\u0030",_faaa -len (_aefd ))+_aefd ;};return MakeStringResult (_aefd );};func _fdbc (_cba ,_ffg float64 ,_aaa int )(float64 ,Result ){_ggb ,_fff :=_ded (_cba ),_ded (_ffg );
_gfge :=_ggb .Unix ();_bbb :=_fff .Unix ();if _gfge ==_bbb {return 0,_fcea ;};_ceddb ,_cbg ,_ebf :=_ggb .Date ();_aaea ,_eegf ,_bee :=_fff .Date ();_bfdf ,_eagc :=int (_cbg ),int (_eegf );var _ddbf ,_aba float64 ;switch _aaa {case 0:if _ebf ==31{_ebf --;
};if _ebf ==30&&_bee ==31{_bee --;}else if _edec :=_bgea (_ceddb );_bfdf ==2&&((_edec &&_ebf ==29)||(!_edec &&_ebf ==28)){_ebf =30;if _bbd :=_bgea (_aaea );_eagc ==2&&((_bbd &&_bee ==29)||(!_bbd &&_bee ==28)){_bee =30;};};_ddbf =float64 ((_aaea -_ceddb )*360+(_eagc -_bfdf )*30+(_bee -_ebf ));
_aba =360;case 1:_ddbf =_ffg -_cba ;_cegdee :=_ceddb !=_aaea ;if _cegdee &&(_aaea !=_ceddb +1||_bfdf < _eagc ||(_bfdf ==_eagc &&_ebf < _bee )){_aef :=0;for _edfa :=_ceddb ;_edfa <=_aaea ;_edfa ++{_aef +=_cfab (_edfa ,1);};_aba =float64 (_aef )/float64 (_aaea -_ceddb +1);
}else {if !_cegdee &&_bgea (_ceddb ){_aba =366;}else {if _cegdee &&((_bgea (_ceddb )&&(_bfdf < 2||(_bfdf ==2&&_ebf <=29)))||(_bgea (_aaea )&&(_eagc > 2||(_eagc ==2&&_bee ==29)))){_aba =366;}else {_aba =365;};};};case 2:_ddbf =_ffg -_cba ;_aba =360;case 3:_ddbf =_ffg -_cba ;
_aba =365;case 4:if _ebf ==31{_ebf --;};if _bee ==31{_bee --;};_ddbf =float64 ((_aaea -_ceddb )*360+(_eagc -_bfdf )*30+(_bee -_ebf ));_aba =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _ddbf /_aba ,_fcea ;};func (_feee HorizontalRange )horizontalRangeReference ()string {return _gf .Sprintf ("\u0025\u0064\u003a%\u0064",_feee ._caag ,_feee ._fegba );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_effd :=args [0].AsNumber ();if _effd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_d .Pi *_effd .ValueNumber );};func _fc (_ced BinOpType ,_fca ,_fg [][]Result )Result {_cd :=[][]Result {};for _geb :=range _fca {_aa :=_gg (_ced ,_fca [_geb ],_fg [_geb ]);if _aa .Type ==ResultTypeError {return _aa ;};
_cd =append (_cd ,_aa .ValueList );};return MakeArrayResult (_cd );};const _acfgg int =30;const _caafe =57361;

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bdfb :=args [0];if _bdfb .Type ==ResultTypeError {return _bdfb ;
};if _bdfb .Type !=ResultTypeString &&_bdfb .Type !=ResultTypeNumber &&_bdfb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_gdbgd :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ebceb :=int (args [1].ValueNumber );if _ebceb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gecf :=int (args [2].ValueNumber );if _gecf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_ddfab :=len (_gdbgd );if _ebceb > _ddfab {return MakeStringResult ("");};_ebceb --;_fade :=_ebceb +_gecf ;if _fade > _ddfab {return MakeStringResult (_gdbgd [_ebceb :]);}else {return MakeStringResult (_gdbgd [_ebceb :_fade ]);};};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _bbaa (args ,_febab )};func (_afg *defEval )checkLastEvalIsRef (_eae Context ,_cfb Expression ){switch _cfb .(type ){case FunctionCall :switch _cfb .(FunctionCall )._cdabe {case "\u0049\u0053\u0052E\u0046":for _ ,_aag :=range _cfb .(FunctionCall )._fdca {switch _aag .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_eeg :=_aag .Eval (_eae ,_afg );
_afg ._fce =!(_eeg .Type ==ResultTypeError &&_eeg .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_afg ._fce =false ;};};};};};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbcg :=ctx .GetEpoch ();_cfbg ,_gfca :=_gabbc (args [0].Value (),_dbcg );if _gfca !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_cfbg .Year ()));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_decd ,_badf :=_agfa (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _badf .Type ==ResultTypeError {return _badf ;};_cfada :=_decd ._beba ;_bgdf :=_decd ._gebg ;_bebbd :=_decd ._bcec ;_eece :=_decd ._edee ;
_cefg :=_decd ._fabd ;_cdcbc :=_decd ._dgfb ;_ccbb :=_gabe (_cfada ,_bgdf ,_bebbd ,_eece ,_cefg ,_cdcbc );if _ccbb .Type ==ResultTypeError {return _ccbb ;};_dbeb :=_ccbb .ValueNumber /(1.0+_eece /_cefg );return MakeNumberResult (_dbeb );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_dfab HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fdcba :=_dfab .horizontalRangeReference ();if _bagfe ,_dfecd :=ev .GetFromCache (_fdcba );_dfecd {return _bagfe ;};_aaeea ,_ccgfd :=_cecg (ctx ,_dfab ._caag ,_dfab ._fegba );_gdca :=_ebcb (ctx ,ev ,_aaeea ,_ccgfd );
ev .SetCache (_fdcba ,_gdca );return _gdca ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_gcdaf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ggbg :=_gcdaf .verticalRangeReference ();if _eadf ,_gafb :=ev .GetFromCache (_ggbg );_gafb {return _eadf ;};_eegfae ,_aecf :=_abgca (ctx ,_gcdaf ._cege ,_gcdaf ._afaca );_baea :=_ebcb (ctx ,ev ,_eegfae ,_aecf );
ev .SetCache (_ggbg ,_baea );return _baea ;};const (_beaf cmpResult =0;_cggc cmpResult =-1;_beab cmpResult =1;_fdegf cmpResult =2;);

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gfddg ,_bffe Expression };

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_e .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_eaebe :v };};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _cgbc (args ,false )};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fbag :=args [0];if _fbag .Type !=ResultTypeNumber &&_fbag .Type !=ResultTypeString &&_fbag .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_bgbac :=args [1].ValueString ;switch _fbag .Type {case ResultTypeNumber :return MakeStringResult (_ef .Number (_fbag .ValueNumber ,_bgbac ));case ResultTypeString :return MakeStringResult (_ef .String (_fbag .ValueString ,_bgbac ));case ResultTypeEmpty :return MakeStringResult (_ef .Number (0,_bgbac ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};const _acbc =57356;

// Update returns the same object as updating sheet references does not affect Error.
func (_ebef Error )Update (q *_db .UpdateQuery )Expression {return _ebef };func _eacc (_geacg []Result ,_fagf string )(*amorArgs ,Result ){_fegf :=len (_geacg );if _fegf !=6&&_fegf !=7{return nil ,MakeErrorResult (_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _geacg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fagf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_efe :=_geacg [0].ValueNumber ;
if _efe < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_fbcb ,_edaf :=_gfcac (_geacg [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_fagf );if _edaf .Type ==ResultTypeError {return nil ,_edaf ;};_bdaa ,_edaf :=_gfcac (_geacg [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_fagf );
if _edaf .Type ==ResultTypeError {return nil ,_edaf ;};if _bdaa < _fbcb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _geacg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccea :=_geacg [3].ValueNumber ;if _ccea < 0||_ccea > _efe {return nil ,MakeErrorResultType (ErrorTypeNum ,_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _geacg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbfa :=int (_geacg [4].ValueNumber );if _dbfa < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fagf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _geacg [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fagf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fadde :=_geacg [5].ValueNumber ;if _fadde < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fagf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_ddege :=0;if _fegf ==7&&_geacg [6].Type !=ResultTypeEmpty {if _geacg [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fagf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddege =int (_geacg [6].ValueNumber );if !_ccfg (_ddege )||_ddege ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fagf );
};};return &amorArgs {_efe ,_fbcb ,_bdaa ,_ccea ,_dbfa ,_fadde ,_ddege },_fcea ;};func _agffe (_dggea Result ,_aeag ,_dccf int )[][]Result {_dfgf :=[][]Result {};switch _dggea .Type {case ResultTypeArray :for _ffceg ,_bbbfa :=range _dggea .ValueArray {if _ffceg < _aeag {_dfgf =append (_dfgf ,_gdecg (MakeListResult (_bbbfa ),_dccf ));
}else {_dfgf =append (_dfgf ,_gdecg (MakeErrorResultType (ErrorTypeNA ,""),_dccf ));};};case ResultTypeList :_fdgb :=_gdecg (_dggea ,_dccf );for _eecb :=0;_eecb < _aeag ;_eecb ++{_dfgf =append (_dfgf ,_fdgb );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _adee :=0;
_adee < _aeag ;_adee ++{_fafd :=_gdecg (_dggea ,_dccf );_dfgf =append (_dfgf ,_fafd );};};return _dfgf ;};var _add =[]*_bg .Regexp {};

// Reference returns a string reference value to a horizontal range.
func (_abaga HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_abaga .horizontalRangeReference ()};};const _egafg =57363;

// String returns a string representation of a named range.
func (_cceb NamedRangeRef )String ()string {return _cceb ._ceba };

// String returns a string representation of Number.
func (_adfgg Number )String ()string {return _fd .FormatFloat (_adfgg ._dgga ,'f',-1,64)};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _efcd :=0;_efcd < len (args )-1;_efcd +=2{if args [_efcd ].ValueNumber ==1{return args [_efcd +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Reference returns a string reference value to a vertical range with prefix.
func (_cdfc PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_efag :=_cdfc ._fdgbe .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_cdfc .verticalRangeReference (_efag .Value )};};func _bdaf (_dgece []Result )[]rangeIndex {_ccdc :=[]rangeIndex {};
_bfed :=len (_dgece );for _ageac :=0;_ageac < _bfed -1;_ageac +=2{_cade :=[]rangeIndex {};_fcedd :=_cbgb (_dgece [_ageac ]);_dggc :=_fdab (_dgece [_ageac +1]);if _ageac ==0{for _bbfb ,_ebbga :=range _fcedd {for _afedd ,_egfg :=range _ebbga {if _fdgg (_egfg ,_dggc ){_cade =append (_cade ,rangeIndex {_bbfb ,_afedd });
};};};}else {for _ ,_eabc :=range _ccdc {_cbffbe :=_fcedd [_eabc ._cafgf ][_eabc ._afac ];if _fdgg (_cbffbe ,_dggc ){_cade =append (_cade ,_eabc );};};};if len (_cade )==0{return []rangeIndex {};};_ccdc =_cade [:];};return _ccdc ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_aebfb []Result )Result ;

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fafa :=args [0].AsString ();if _fafa .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_fafa .ValueString ,ev );};type criteriaParsed struct{_badfb bool ;_gfaa float64 ;_gaea string ;_geeef *criteriaRegex ;};func _dgge (_geea ,_dbe ,_fegfa ,_aaff float64 ,_ebbc int )float64 {var _acdb float64 ;if _geea ==0{_acdb =(_fegfa +_aaff )/_dbe ;
}else {_efdb :=_d .Pow (1+_geea ,_dbe );if _ebbc ==1{_acdb =(_aaff *_geea /(_efdb -1)+_fegfa *_geea /(1-1/_efdb ))/(1+_geea );}else {_acdb =_aaff *_geea /(_efdb -1)+_fegfa *_geea /(1-1/_efdb );};};return -_acdb ;};const _cagcb =57353;func _fbbd (_efcgb []Result ,_gdfg countMode )float64 {_dgag :=0.0;
for _ ,_bbac :=range _efcgb {switch _bbac .Type {case ResultTypeNumber :if _gdfg ==_cgbd ||(_gdfg ==_bffcf &&!_bbac .IsBoolean ){_dgag ++;};case ResultTypeList ,ResultTypeArray :_dgag +=_fbbd (_bbac .ListValues (),_gdfg );case ResultTypeString :if _gdfg ==_cgbd {_dgag ++;
};case ResultTypeEmpty :if _gdfg ==_bfdef {_dgag ++;};};};return _dgag ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_cfggg PrefixHorizontalRange )Update (q *_db .UpdateQuery )Expression {return _cfggg };func _dcef (_gagf []Result ,_gfab string )(*cumulArgs ,Result ){if len (_gagf )!=6{return nil ,MakeErrorResult (_gfab +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _gagf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfab +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gedb :=_gagf [0].ValueNumber ;
if _gedb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gagf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfab +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_edda :=_gagf [1].ValueNumber ;if _edda <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _gagf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfab +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfcf :=_gagf [2].ValueNumber ;if _cfcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gagf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfab +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_abbc :=_gagf [3].ValueNumber ;if _abbc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gagf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfab +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gabb :=_gagf [4].ValueNumber ;if _gabb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _gabb < _abbc {return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _gabb > _edda {return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_dcf :=int (_gagf [5].ValueNumber );if _dcf !=0&&_dcf !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_gfab +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_gedb ,_edda ,_cfcf ,_abbc ,_gabb ,_dcf },_fcea ;};func (_gebfc ReferenceType )String ()string {if _gebfc >=ReferenceType (len (_bbeg )-1){return _gf .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gebfc );
};return _ebddf [_bbeg [_gebfc ]:_bbeg [_gebfc +1]];};

// String returns a string representation of String.
func (_bbcb String )String ()string {return "\u0022"+_bbcb ._eaebe +"\u0022"};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_ffcf :=len (args );if (_ffcf !=2&&_ffcf !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cadf :=0;if _ffcf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cadf =int (args [2].ValueNumber );if !_ccfg (_cadf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_edac :=args [1].ValueNumber ;_edbc ,_eedf :=_fdbc (_dfa ,_edac ,_cadf );if _eedf .Type ==ResultTypeError {return _eedf ;};return MakeNumberResult (_edbc );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_gceb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gceb =int (args [1].ValueNumber );if _gceb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _gceb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_daef :=args [0].Value ();
_gdfdb :=len (_daef );if _gceb > _gdfdb {return MakeStringResult (_daef );};return MakeStringResult (_daef [_gdfdb -_gceb :_gdfdb ]);};func _fdgg (_cgedf Result ,_dbdb *criteriaParsed )bool {if _cgedf .IsBoolean {return false ;};_dbcaf :=_cgedf .Type ;
if _dbdb ._badfb {return _dbcaf ==ResultTypeNumber &&_cgedf .ValueNumber ==_dbdb ._gfaa ;}else if _dbcaf ==ResultTypeNumber {return _fbda (_cgedf .ValueNumber ,_dbdb ._geeef );};return _dfegd (_cgedf ,_dbdb );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dggg :=args [0].AsNumber ();_dgfg :=args [1].AsNumber ();if _dggg .Type !=ResultTypeNumber ||_dgfg .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_daagf :=_d .Trunc (_dggg .ValueNumber );_afcc :=_d .Trunc (_dgfg .ValueNumber );if _afcc > _daagf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _afcc ==_daagf ||_afcc ==0{return MakeNumberResult (1);};_gebgfd :=float64 (1);for _ccdaa :=float64 (1);_ccdaa <=_afcc ;_ccdaa ++{_gebgfd *=(_daagf +1-_ccdaa )/_ccdaa ;};return MakeNumberResult (_gebgfd );};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _ggf (_cgc ,_ade int )int {if _ade ==2&&_bgea (_cgc ){return 29;}else {return _feb [_ade -1];};};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_adgdb :=args [0].AsNumber ();if _adgdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _fgaeg float64 ;_bgeg :=args [1].AsNumber ();if _bgeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgaeg =_bgeg .ValueNumber ;if _fgaeg < 0&&_adgdb .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_fcgaf :=_adgdb .ValueNumber ;_fcgaf ,_acfgb :=_d .Modf (_fcgaf /_fgaeg );if _acfgb !=0{if _adgdb .ValueNumber < 0&&_acfgb < 0{_fcgaf --;};};return MakeNumberResult (_fcgaf *_fgaeg );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_ddacab Context ,_dbbfd Evaluator ,_gcff []Result )Result ;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efdee :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdgd :=args [2].ValueNumber ;if _bdgd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_ebab -_efdee )/_bdgd );};var _ebgd string =string ([]byte {92});

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_cafg :=len (args );if _cafg !=4&&_cafg !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_afea ,_cgb ,_ccggb :=_abcb (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _ccggb .Type ==ResultTypeError {return _ccggb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecdcb :=args [2].ValueNumber ;if _ecdcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_adab :=args [3].ValueNumber ;if _adab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_bbcf :=0;if _cafg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbcf =int (args [4].ValueNumber );if !_ccfg (_bbcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_faddg ,_ccggb :=_fdbc (_afea ,_cgb ,_bbcf );if _ccggb .Type ==ResultTypeError {return _ccggb ;};return MakeNumberResult (_adab *(1-_ecdcb *_faddg ));};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_gefdc :=args [0].ValueNumber ;if _gefdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_fddb :=float64 (int (args [1].ValueNumber ));if _fddb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_d .Pow (_gefdc +1,1/_fddb )-1)*_fddb );};const _afab =_bcd .Millisecond *1000;

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_agfbb :=args [0].AsNumber ();if _agfbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bddg :=10.0;if len (args )> 1{_gaac :=args [1].AsNumber ();if _gaac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_bddg =args [1].ValueNumber ;};if _agfbb .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _bddg ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_d .Log (_agfbb .ValueNumber )/_d .Log (_bddg ));};func (_eebbc *Lexer )lex (_ddacf _b .Reader ){_gbgdd ,_dbbd ,_adcf :=0,0,0;_bgfef :=-1;_faga ,_cgaagd ,_daea :=0,0,0;_ =_daea ;_dbcb :=1;_ =_dbcb ;_cdagc :=make ([]byte ,4096);
_fefa :=false ;for !_fefa {_ecbc :=0;if _faga > 0{_ecbc =_dbbd -_faga ;};_dbbd =0;_egcbb ,_abfa :=_ddacf .Read (_cdagc [_ecbc :]);if _egcbb ==0||_abfa !=nil {_fefa =true ;};_adcf =_egcbb +_ecbc ;if _adcf < len (_cdagc ){_bgfef =_adcf ;};{_gbgdd =_acfgg ;
_faga =0;_cgaagd =0;_daea =0;};{var _daba int ;var _effeg uint ;if _dbbd ==_adcf {goto _edcba ;};if _gbgdd ==0{goto _fagdef ;};_cgae :_daba =int (_eagac [_gbgdd ]);_effeg =uint (_bcdaa [_daba ]);_daba ++;for ;_effeg > 0;_effeg --{_daba ++;switch _bcdaa [_daba -1]{case 2:_faga =_dbbd ;
};};switch _gbgdd {case 30:switch _cdagc [_dbbd ]{case 34:goto _gfcfa ;case 35:goto _dgbc ;case 36:goto _bceaa ;case 38:goto _abdc ;case 39:goto _gdeea ;case 40:goto _eade ;case 41:goto _bcgc ;case 42:goto _cgeeb ;case 43:goto _gcafe ;case 44:goto _fdadg ;
case 45:goto _ebdcf ;case 47:goto _agcgf ;case 58:goto _gcaef ;case 59:goto _bgee ;case 60:goto _dega ;case 61:goto _bgdbbb ;case 62:goto _ffbcf ;case 63:goto _babbbb ;case 70:goto _baagc ;case 84:goto _gfabgf ;case 92:goto _aaef ;case 94:goto _gdbbc ;
case 95:goto _aeaba ;case 123:goto _ffgfe ;case 125:goto _gaee ;};switch {case _cdagc [_dbbd ]< 65:switch {case _cdagc [_dbbd ]> 37:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _ebbbf ;};case _cdagc [_dbbd ]>=33:goto _babbbb ;};case _cdagc [_dbbd ]> 90:switch {case _cdagc [_dbbd ]> 93:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgac ;
};case _cdagc [_dbbd ]>=91:goto _babbbb ;};default:goto _fafb ;};goto _gefde ;case 1:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 47:goto _dacfg ;case 123:goto _dacfg ;case 125:goto _dacfg ;};switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _dacfg ;
};case _cdagc [_dbbd ]> 45:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _dacfg ;};case _cdagc [_dbbd ]>=58:goto _dacfg ;};default:goto _dacfg ;};goto _gefde ;case 0:goto _fagdef ;case 2:if _cdagc [_dbbd ]==34{goto _dcgbf ;
};goto _gfcfa ;case 31:if _cdagc [_dbbd ]==34{goto _gfcfa ;};goto _cbea ;case 3:switch _cdagc [_dbbd ]{case 78:goto _dabb ;case 82:goto _cddae ;};goto _babbbb ;case 4:switch _cdagc [_dbbd ]{case 47:goto _fgdge ;case 85:goto _cegaf ;};goto _babbbb ;case 5:if _cdagc [_dbbd ]==65{goto _bbffa ;
};goto _babbbb ;case 6:switch _cdagc [_dbbd ]{case 76:goto _fgcb ;case 77:goto _bddad ;};goto _babbbb ;case 7:if _cdagc [_dbbd ]==76{goto _bddad ;};goto _babbbb ;case 8:if _cdagc [_dbbd ]==33{goto _bbffa ;};goto _babbbb ;case 9:if _cdagc [_dbbd ]==69{goto _edcbb ;
};goto _babbbb ;case 10:if _cdagc [_dbbd ]==70{goto _aebf ;};goto _babbbb ;case 11:if _cdagc [_dbbd ]==33{goto _bcecb ;};goto _babbbb ;case 12:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 47:goto _babbbb ;case 123:goto _babbbb ;case 125:goto _babbbb ;
};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _babbbb ;};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]< 65:if 58<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=63{goto _babbbb ;
};case _cdagc [_dbbd ]> 90:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _babbbb ;};default:goto _cffd ;};default:goto _gdaa ;};goto _gefde ;case 13:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 47:goto _babbbb ;case 58:goto _gbbcg ;case 123:goto _babbbb ;
case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _babbbb ;};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _babbbb ;
};case _cdagc [_dbbd ]>=59:goto _babbbb ;};default:goto _gdaa ;};goto _gefde ;case 14:if _cdagc [_dbbd ]==36{goto _cdcd ;};if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _gaafec ;};goto _dacfg ;case 15:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _gaafec ;
};goto _dacfg ;case 32:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _gaafec ;};goto _gcda ;case 16:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 47:goto _babbbb ;case 58:goto _cedbc ;case 123:goto _babbbb ;case 125:goto _babbbb ;
};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 45:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _ceegb ;};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]> 90:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _babbbb ;
};case _cdagc [_dbbd ]>=65:goto _cffd ;};default:goto _babbbb ;};goto _gefde ;case 17:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 47:goto _dacfg ;case 123:goto _dacfg ;case 125:goto _dacfg ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _dacfg ;
};case _cdagc [_dbbd ]>=34:goto _dacfg ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _dacfg ;};case _cdagc [_dbbd ]>=58:goto _dacfg ;};default:goto _ceegb ;};goto _gefde ;case 33:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;
case 47:goto _abdcg ;case 123:goto _abdcg ;case 125:goto _abdcg ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _abdcg ;};case _cdagc [_dbbd ]>=34:goto _abdcg ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _abdcg ;
};case _cdagc [_dbbd ]>=58:goto _abdcg ;};default:goto _ceegb ;};goto _gefde ;case 18:if _cdagc [_dbbd ]==36{goto _ddgee ;};if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _daefa ;};goto _dacfg ;case 19:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _daefa ;
};goto _dacfg ;case 34:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _daefa ;};goto _egddc ;case 20:switch _cdagc [_dbbd ]{case 39:goto _babbbb ;case 42:goto _babbbb ;case 47:goto _babbbb ;case 58:goto _babbbb ;case 63:goto _babbbb ;};if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=93{goto _babbbb ;
};goto _debgd ;case 21:switch _cdagc [_dbbd ]{case 39:goto _eaebb ;case 42:goto _babbbb ;case 47:goto _babbbb ;case 58:goto _babbbb ;case 63:goto _babbbb ;};if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=93{goto _babbbb ;};goto _debgd ;case 22:if _cdagc [_dbbd ]==33{goto _gbffc ;
};goto _babbbb ;case 35:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _fddbb ;case 58:goto _gbbcg ;case 101:goto _cgfd ;case 123:goto _adcg ;case 125:goto _adcg ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=47{goto _adcg ;
};case _cdagc [_dbbd ]>=34:goto _adcg ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _adcg ;};case _cdagc [_dbbd ]>=59:goto _adcg ;};default:goto _ebbbf ;};goto _gefde ;case 36:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;
case 47:goto _adcg ;case 101:goto _cgfd ;case 123:goto _adcg ;case 125:goto _adcg ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _adcg ;};case _cdagc [_dbbd ]>=34:goto _adcg ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _adcg ;
};case _cdagc [_dbbd ]>=58:goto _adcg ;};default:goto _fddbb ;};goto _gefde ;case 23:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 47:goto _ggff ;case 123:goto _ggff ;case 125:goto _ggff ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _ggff ;
};case _cdagc [_dbbd ]>=34:goto _ggff ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _ggff ;};case _cdagc [_dbbd ]>=58:goto _ggff ;};default:goto _fafg ;};goto _gefde ;case 37:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;
case 47:goto _adcg ;case 123:goto _adcg ;case 125:goto _adcg ;};switch {case _cdagc [_dbbd ]< 48:switch {case _cdagc [_dbbd ]> 35:if 37<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=45{goto _adcg ;};case _cdagc [_dbbd ]>=34:goto _adcg ;};case _cdagc [_dbbd ]> 57:switch {case _cdagc [_dbbd ]> 63:if 91<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=94{goto _adcg ;
};case _cdagc [_dbbd ]>=58:goto _adcg ;};default:goto _fafg ;};goto _gefde ;case 38:switch _cdagc [_dbbd ]{case 61:goto _ddaca ;case 62:goto _dgdfe ;};goto _agfd ;case 39:if _cdagc [_dbbd ]==61{goto _eacee ;};goto _gdebe ;case 24:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;
case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _babbbb ;case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;
};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _babbbb ;
};default:goto _babbbb ;};goto _gefde ;case 40:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _eacgd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _eacgd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 41:switch _cdagc [_dbbd ]{case 46:goto _afdefd ;case 92:goto _afdefd ;case 95:goto _afdefd ;};switch {case _cdagc [_dbbd ]< 65:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _afdefd ;};
case _cdagc [_dbbd ]> 90:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _afdefd ;};default:goto _afdefd ;};goto _gfgee ;case 42:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;
case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;
};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;
case 43:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _abdcg ;case 125:goto _abdcg ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _abdcg ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};default:goto _abdcg ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _eacgd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _abdcg ;};default:goto _abdcg ;};goto _gefde ;case 44:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _dacfg ;
case 125:goto _dacfg ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};case _cdagc [_dbbd ]>=34:goto _dacfg ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _dacfg ;};default:goto _dacfg ;};goto _gefde ;case 25:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;
case 58:goto _cedbc ;case 65:goto _gcecf ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _babbbb ;case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;
};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 66<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _babbbb ;
};default:goto _babbbb ;};goto _gefde ;case 45:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 76:goto _ebfb ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;
case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 46:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;
case 58:goto _cedbc ;case 83:goto _cbdb ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;
};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;
};default:goto _gfgee ;};goto _gefde ;case 47:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 69:goto _gaafg ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;
case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 26:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;
case 58:goto _cedbc ;case 79:goto _fdeff ;case 82:goto _fgca ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _babbbb ;case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;
};case _cdagc [_dbbd ]>=34:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _babbbb ;
};default:goto _babbbb ;};goto _gefde ;case 48:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 68:goto _dbecb ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;
case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 49:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;
case 58:goto _cedbc ;case 79:goto _fgag ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;
};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;
};default:goto _gfgee ;};goto _gefde ;case 50:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 36:goto _eebaa ;case 40:goto _fafdc ;case 46:goto _eacgd ;case 58:goto _cedbc ;case 85:goto _cbdb ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;
case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 59:switch {case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _fggg ;};case _cdagc [_dbbd ]>=34:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _ebgf ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 27:switch _cdagc [_dbbd ]{case 46:goto _afdefd ;case 92:goto _afdefd ;case 95:goto _afdefd ;};switch {case _cdagc [_dbbd ]< 65:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _afdefd ;
};case _cdagc [_dbbd ]> 90:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _afdefd ;};default:goto _afdefd ;};goto _babbbb ;case 28:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 120:goto _agbb ;
case 123:goto _babbbb ;case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _babbbb ;};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;
};default:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _babbbb ;};
default:goto _babbbb ;};goto _gefde ;case 51:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 108:goto _gggde ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 52:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 102:goto _fdfef ;case 110:goto _gbae ;case 123:goto _gfgee ;case 125:goto _gfgee ;
};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;
};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 53:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;
case 110:goto _addeg ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;
};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;};default:goto _gfgee ;};default:goto _gfgee ;
};goto _gefde ;case 54:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _fefg ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 55:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _agdf ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _agdf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 56:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 40:goto _eege ;case 46:goto _agdf ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _agdf ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _agdf ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 57:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 109:goto _ffcb ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 58:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bcbdc ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _gfgee ;case 125:goto _gfgee ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _gfgee ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _gfgee ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _gfgee ;};default:goto _gfgee ;};goto _gefde ;case 59:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _fcef ;case 123:goto _dacfg ;case 125:goto _dacfg ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _dacfg ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _dacfg ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _fcef ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _dacfg ;};default:goto _dacfg ;};goto _gefde ;case 29:switch _cdagc [_dbbd ]{case 33:goto _dfdff ;case 46:goto _bgagd ;case 92:goto _afdefd ;case 95:goto _bgagd ;case 123:goto _babbbb ;case 125:goto _babbbb ;};switch {case _cdagc [_dbbd ]< 58:switch {case _cdagc [_dbbd ]< 37:if 34<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=35{goto _babbbb ;
};case _cdagc [_dbbd ]> 47:if 48<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=57{goto _bgagd ;};default:goto _babbbb ;};case _cdagc [_dbbd ]> 63:switch {case _cdagc [_dbbd ]< 91:if 65<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=90{goto _bgagd ;};case _cdagc [_dbbd ]> 94:if 97<=_cdagc [_dbbd ]&&_cdagc [_dbbd ]<=122{goto _bgagd ;
};default:goto _babbbb ;};default:goto _babbbb ;};goto _gefde ;};_babbbb :_gbgdd =0;goto _egcgb ;_gefde :_gbgdd =1;goto _egcgb ;_gfcfa :_gbgdd =2;goto _egcgb ;_dgbc :_gbgdd =3;goto _egcgb ;_dabb :_gbgdd =4;goto _egcgb ;_fgdge :_gbgdd =5;goto _egcgb ;_cegaf :_gbgdd =6;
goto _egcgb ;_fgcb :_gbgdd =7;goto _egcgb ;_bddad :_gbgdd =8;goto _egcgb ;_cddae :_gbgdd =9;goto _egcgb ;_edcbb :_gbgdd =10;goto _egcgb ;_aebf :_gbgdd =11;goto _egcgb ;_bceaa :_gbgdd =12;goto _egcgb ;_gdaa :_gbgdd =13;goto _egcgb ;_gbbcg :_gbgdd =14;goto _egcgb ;
_cdcd :_gbgdd =15;goto _egcgb ;_cffd :_gbgdd =16;goto _egcgb ;_eebaa :_gbgdd =17;goto _egcgb ;_cedbc :_gbgdd =18;goto _egcgb ;_ddgee :_gbgdd =19;goto _egcgb ;_gdeea :_gbgdd =20;goto _egcgb ;_debgd :_gbgdd =21;goto _egcgb ;_eaebb :_gbgdd =22;goto _egcgb ;
_cgfd :_gbgdd =23;goto _egcgb ;_fafb :_gbgdd =24;goto _egcgb ;_baagc :_gbgdd =25;goto _egcgb ;_gfabgf :_gbgdd =26;goto _egcgb ;_aaef :_gbgdd =27;goto _egcgb ;_aeaba :_gbgdd =28;goto _egcgb ;_bgac :_gbgdd =29;goto _egcgb ;_dacfg :_gbgdd =30;goto _bdde ;
_dfdff :_gbgdd =30;goto _afcbe ;_bbffa :_gbgdd =30;goto _acef ;_bcecb :_gbgdd =30;goto _dddbc ;_gbffc :_gbgdd =30;goto _gebbd ;_ggff :_gbgdd =30;goto _bccfb ;_fafdc :_gbgdd =30;goto _edbea ;_abdc :_gbgdd =30;goto _eadcd ;_eade :_gbgdd =30;goto _baddf ;
_bcgc :_gbgdd =30;goto _dfcc ;_cgeeb :_gbgdd =30;goto _aefab ;_gcafe :_gbgdd =30;goto _aeeefe ;_fdadg :_gbgdd =30;goto _egbe ;_ebdcf :_gbgdd =30;goto _egggc ;_agcgf :_gbgdd =30;goto _cefd ;_gcaef :_gbgdd =30;goto _dcfe ;_bgee :_gbgdd =30;goto _gcfdg ;_bgdbbb :_gbgdd =30;
goto _fcded ;_gdbbc :_gbgdd =30;goto _agfde ;_ffgfe :_gbgdd =30;goto _bcff ;_gaee :_gbgdd =30;goto _fada ;_cbea :_gbgdd =30;goto _gabaf ;_gcda :_gbgdd =30;goto _ffge ;_abdcg :_gbgdd =30;goto _ecfed ;_egddc :_gbgdd =30;goto _gadfe ;_adcg :_gbgdd =30;goto _bbga ;
_agfd :_gbgdd =30;goto _dcffe ;_ddaca :_gbgdd =30;goto _fdcbaf ;_dgdfe :_gbgdd =30;goto _afbbc ;_gdebe :_gbgdd =30;goto _aggg ;_eacee :_gbgdd =30;goto _deee ;_gfgee :_gbgdd =30;goto _eecg ;_eege :_gbgdd =30;goto _fedda ;_dcgbf :_gbgdd =31;goto _gdbbg ;
_gaafec :_gbgdd =32;goto _egcgb ;_ceegb :_gbgdd =33;goto _egdb ;_daefa :_gbgdd =34;goto _egcgb ;_ebbbf :_gbgdd =35;goto _bdedg ;_fddbb :_gbgdd =36;goto _bdedg ;_fafg :_gbgdd =37;goto _bdedg ;_dega :_gbgdd =38;goto _egcgb ;_ffbcf :_gbgdd =39;goto _egcgb ;
_eacgd :_gbgdd =40;goto _gcgag ;_afdefd :_gbgdd =41;goto _egcgb ;_bgagd :_gbgdd =42;goto _gcgag ;_fggg :_gbgdd =43;goto _egdb ;_ebgf :_gbgdd =44;goto _gcgag ;_gaafg :_gbgdd =44;goto _gecfc ;_fgag :_gbgdd =44;goto _abfg ;_gcecf :_gbgdd =45;goto _gcgag ;
_ebfb :_gbgdd =46;goto _gcgag ;_cbdb :_gbgdd =47;goto _gcgag ;_fdeff :_gbgdd =48;goto _gcgag ;_dbecb :_gbgdd =49;goto _gcgag ;_fgca :_gbgdd =50;goto _gcgag ;_agbb :_gbgdd =51;goto _gcgag ;_gggde :_gbgdd =52;goto _gcgag ;_fdfef :_gbgdd =53;goto _gcgag ;
_addeg :_gbgdd =54;goto _gcgag ;_fefg :_gbgdd =55;goto _gcgag ;_agdf :_gbgdd =56;goto _gcgag ;_gbae :_gbgdd =57;goto _gcgag ;_ffcb :_gbgdd =58;goto _gcgag ;_bcbdc :_gbgdd =59;goto _gcgag ;_fcef :_gbgdd =59;goto _cfgd ;_acef :_daba =3;goto _bcgbb ;_dddbc :_daba =5;
goto _bcgbb ;_afcbe :_daba =7;goto _bcgbb ;_gebbd :_daba =9;goto _bcgbb ;_edbea :_daba =11;goto _bcgbb ;_fedda :_daba =13;goto _bcgbb ;_eadcd :_daba =15;goto _bcgbb ;_bcff :_daba =17;goto _bcgbb ;_fada :_daba =19;goto _bcgbb ;_baddf :_daba =21;goto _bcgbb ;
_dfcc :_daba =23;goto _bcgbb ;_aeeefe :_daba =25;goto _bcgbb ;_egggc :_daba =27;goto _bcgbb ;_aefab :_daba =29;goto _bcgbb ;_cefd :_daba =31;goto _bcgbb ;_agfde :_daba =33;goto _bcgbb ;_fcded :_daba =35;goto _bcgbb ;_fdcbaf :_daba =37;goto _bcgbb ;_deee :_daba =39;
goto _bcgbb ;_afbbc :_daba =41;goto _bcgbb ;_dcfe :_daba =43;goto _bcgbb ;_gcfdg :_daba =45;goto _bcgbb ;_egbe :_daba =47;goto _bcgbb ;_bbga :_daba =49;goto _bcgbb ;_ecfed :_daba =51;goto _bcgbb ;_ffge :_daba =53;goto _bcgbb ;_gadfe :_daba =55;goto _bcgbb ;
_eecg :_daba =57;goto _bcgbb ;_gabaf :_daba =59;goto _bcgbb ;_dcffe :_daba =61;goto _bcgbb ;_aggg :_daba =63;goto _bcgbb ;_bccfb :_daba =65;goto _bcgbb ;_bdde :_daba =67;goto _bcgbb ;_gecfc :_daba =72;goto _bcgbb ;_bdedg :_daba =75;goto _bcgbb ;_egdb :_daba =78;
goto _bcgbb ;_abfg :_daba =81;goto _bcgbb ;_cfgd :_daba =84;goto _bcgbb ;_gcgag :_daba =87;goto _bcgbb ;_gdbbg :_daba =90;goto _bcgbb ;_bcgbb :_effeg =uint (_bcdaa [_daba ]);_daba ++;for ;_effeg > 0;_effeg --{_daba ++;switch _bcdaa [_daba -1]{case 3:_cgaagd =_dbbd +1;
case 4:_daea =1;case 5:_daea =2;case 6:_daea =3;case 7:_daea =4;case 8:_daea =11;case 9:_daea =14;case 10:_daea =15;case 11:_cgaagd =_dbbd +1;{_eebbc .emit (_gdac ,_cdagc [_faga :_cgaagd ]);};case 12:_cgaagd =_dbbd +1;{_eebbc .emit (_acbc ,_cdagc [_faga :_cgaagd ]);
};case 13:_cgaagd =_dbbd +1;{_eebbc .emit (_gdba ,_cdagc [_faga :_cgaagd -1]);};case 14:_cgaagd =_dbbd +1;{_eebbc .emit (_gdba ,_cdagc [_faga +1:_cgaagd -2]);};case 15:_cgaagd =_dbbd +1;{_eebbc .emit (_daffg ,_cdagc [_faga :_cgaagd -1]);};case 16:_cgaagd =_dbbd +1;
{_eebbc .emit (_daffg ,_cdagc [_faga :_cgaagd -1]);};case 17:_cgaagd =_dbbd +1;{_eebbc .emit (_agefc ,_cdagc [_faga :_cgaagd ]);};case 18:_cgaagd =_dbbd +1;{_eebbc .emit (_aeecc ,_cdagc [_faga :_cgaagd ]);};case 19:_cgaagd =_dbbd +1;{_eebbc .emit (_caafe ,_cdagc [_faga :_cgaagd ]);
};case 20:_cgaagd =_dbbd +1;{_eebbc .emit (_fgaca ,_cdagc [_faga :_cgaagd ]);};case 21:_cgaagd =_dbbd +1;{_eebbc .emit (_egafg ,_cdagc [_faga :_cgaagd ]);};case 22:_cgaagd =_dbbd +1;{_eebbc .emit (_eacbc ,_cdagc [_faga :_cgaagd ]);};case 23:_cgaagd =_dbbd +1;
{_eebbc .emit (_ddae ,_cdagc [_faga :_cgaagd ]);};case 24:_cgaagd =_dbbd +1;{_eebbc .emit (_cefbd ,_cdagc [_faga :_cgaagd ]);};case 25:_cgaagd =_dbbd +1;{_eebbc .emit (_fcbcg ,_cdagc [_faga :_cgaagd ]);};case 26:_cgaagd =_dbbd +1;{_eebbc .emit (_feaf ,_cdagc [_faga :_cgaagd ]);
};case 27:_cgaagd =_dbbd +1;{_eebbc .emit (_cbadf ,_cdagc [_faga :_cgaagd ]);};case 28:_cgaagd =_dbbd +1;{_eebbc .emit (_dbdbb ,_cdagc [_faga :_cgaagd ]);};case 29:_cgaagd =_dbbd +1;{_eebbc .emit (_abga ,_cdagc [_faga :_cgaagd ]);};case 30:_cgaagd =_dbbd +1;
{_eebbc .emit (_agee ,_cdagc [_faga :_cgaagd ]);};case 31:_cgaagd =_dbbd +1;{_eebbc .emit (_cdcc ,_cdagc [_faga :_cgaagd ]);};case 32:_cgaagd =_dbbd +1;{_eebbc .emit (_dgbed ,_cdagc [_faga :_cgaagd ]);};case 33:_cgaagd =_dbbd +1;{_eebbc .emit (_edae ,_cdagc [_faga :_cgaagd ]);
};case 34:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_cagcb ,_cdagc [_faga :_cgaagd ]);};case 35:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_fdadc ,_cdagc [_faga :_cgaagd ]);};case 36:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_dgff ,_cdagc [_faga :_cgaagd ]);};
case 37:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_cfda ,_cdagc [_faga :_cgaagd ]);};case 38:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_dgfea ,_cdagc [_faga :_cgaagd ]);};case 39:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_fbafc ,_cdagc [_faga +1:_cgaagd -1]);
};case 40:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_aaada ,_cdagc [_faga :_cgaagd ]);};case 41:_cgaagd =_dbbd ;_dbbd --;{_eebbc .emit (_daefb ,_cdagc [_faga :_cgaagd ]);};case 42:_dbbd =(_cgaagd )-1;{_eebbc .emit (_cagcb ,_cdagc [_faga :_cgaagd ]);};case 43:switch _daea {case 0:{_gbgdd =0;
goto _egcgb ;};case 1:{_dbbd =(_cgaagd )-1;_eebbc .emit (_bcdce ,_cdagc [_faga :_cgaagd ]);};case 2:{_dbbd =(_cgaagd )-1;_eebbc .emit (_cagcb ,_cdagc [_faga :_cgaagd ]);};case 3:{_dbbd =(_cgaagd )-1;_eebbc .emit (_fdadc ,_cdagc [_faga :_cgaagd ]);};case 4:{_dbbd =(_cgaagd )-1;
_eebbc .emit (_ffgba ,_cdagc [_faga :_cgaagd ]);};case 11:{_dbbd =(_cgaagd )-1;_eebbc .emit (_dbccd ,_cdagc [_faga :_cgaagd ]);};case 14:{_dbbd =(_cgaagd )-1;_eebbc .emit (_dgfea ,_cdagc [_faga :_cgaagd ]);};case 15:{_dbbd =(_cgaagd )-1;_eebbc .emit (_fbafc ,_cdagc [_faga +1:_cgaagd -1]);
};};};};goto _egcgb ;_egcgb :_daba =int (_gabag [_gbgdd ]);_effeg =uint (_bcdaa [_daba ]);_daba ++;for ;_effeg > 0;_effeg --{_daba ++;switch _bcdaa [_daba -1]{case 0:_faga =0;case 1:_daea =0;};};if _gbgdd ==0{goto _fagdef ;};if _dbbd ++;_dbbd !=_adcf {goto _cgae ;
};_edcba :{};if _dbbd ==_bgfef {switch _gbgdd {case 1:goto _dacfg ;case 2:goto _dacfg ;case 31:goto _cbea ;case 14:goto _dacfg ;case 15:goto _dacfg ;case 32:goto _gcda ;case 17:goto _dacfg ;case 33:goto _abdcg ;case 18:goto _dacfg ;case 19:goto _dacfg ;
case 34:goto _egddc ;case 35:goto _adcg ;case 36:goto _adcg ;case 23:goto _ggff ;case 37:goto _adcg ;case 38:goto _agfd ;case 39:goto _gdebe ;case 40:goto _gfgee ;case 41:goto _gfgee ;case 42:goto _gfgee ;case 43:goto _abdcg ;case 44:goto _dacfg ;case 45:goto _gfgee ;
case 46:goto _gfgee ;case 47:goto _gfgee ;case 48:goto _gfgee ;case 49:goto _gfgee ;case 50:goto _gfgee ;case 51:goto _gfgee ;case 52:goto _gfgee ;case 53:goto _gfgee ;case 54:goto _gfgee ;case 55:goto _gfgee ;case 56:goto _gfgee ;case 57:goto _gfgee ;
case 58:goto _gfgee ;case 59:goto _dacfg ;};};_fagdef :{};};if _faga > 0{copy (_cdagc [0:],_cdagc [_faga :]);};};_ =_bgfef ;if _gbgdd ==_eaceb {_eebbc .emit (_dcff ,nil );};close (_eebbc ._cafe );};const _abga =57373;func _cgg (_cf BinOpType ,_ag [][]Result ,_bgb Result )Result {_de :=[][]Result {};
for _cfa :=range _ag {_fga :=_ggc (_cf ,_ag [_cfa ],_bgb );if _fga .Type ==ResultTypeError {return _fga ;};_de =append (_de ,_fga .ValueList );};return MakeArrayResult (_de );};const _beb ="\u0028\u0020\u0028"+_dbg +"\u007c"+_cfgg +"\u007c"+_ebee +"\u007c"+_bfae +"\u0029\u0029\u003f\u0024";


// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_efae :=len (args );if _efae < 5||_efae > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bedef :=args [0].ValueNumber ;if _bedef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aagfg :=args [1].ValueNumber ;if _aagfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdcd :=args [2].ValueNumber ;if _bdcd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _bdcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbeb :=args [3].ValueNumber ;if _fbeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afcf :=args [4].ValueNumber ;if _fbeb > _afcf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _afcf > _bdcd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_dab :=2.0;if _efae > 5{if args [5].Type ==ResultTypeEmpty {_dab =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dab =args [5].ValueNumber ;if _dab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_fcce :=false ;if _efae > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fcce =args [6].ValueNumber !=0;};_bafe :=0.0;_fdbf :=_d .Floor (_fbeb );_eddac :=_d .Ceil (_afcf );if _fcce {for _edacg :=_fdbf +1;_edacg <=_eddac ;_edacg ++{_bbfd :=_cece (_bedef ,_aagfg ,_bdcd ,_edacg ,_dab );if _edacg ==_fdbf +1{_bbfd *=_d .Min (_afcf ,_fdbf +1)-_fbeb ;
}else if _edacg ==_eddac {_bbfd *=_afcf +1-_eddac ;};_bafe +=_bbfd ;};}else {_ecc :=_bdcd ;var _agff float64 ;if !_dgac (_fbeb ,_d .Floor (_fbeb )){if _dab ==1{_eeab :=_bdcd /2;if _fbeb > _eeab ||_dgac (_fbeb ,_eeab ){_agff =_fbeb -_eeab ;_fbeb =_eeab ;
_afcf -=_agff ;_ecc ++;};};};if _dab !=0{_bedef -=_accc (_bedef ,_aagfg ,_bdcd ,_ecc ,_fbeb ,_dab );};_bafe =_accc (_bedef ,_aagfg ,_bdcd ,_bdcd -_fbeb ,_afcf -_fbeb ,_dab );};return MakeNumberResult (_bafe );};func _gcfb (_abec ,_bdgc ,_gafe Reference )string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_abec .Value ,_bdgc .Value ,_gafe .Value );
};func _acgc (_dcbcc ,_adecf _bcd .Time ,_adgef int )_bcd .Time {_dccbc :=_bcd .Date (_dcbcc .Year (),_adecf .Month (),_adecf .Day (),0,0,0,0,_bcd .UTC );if _dccbc .After (_dcbcc ){_dccbc =_dccbc .AddDate (-1,0,0);};for !_dccbc .After (_dcbcc ){_dccbc =_dccbc .AddDate (0,12/_adgef ,0);
};return _dccbc ;};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_bebg ,_gabg :=_eacc (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _gabg .Type ==ResultTypeError {return _gabg ;};_feff :=_bebg ._aede ;_ggec :=_bebg ._abfe ;_dcbce :=_bebg ._gebgf ;_dcgc :=_bebg ._bcda ;
_caaf :=_bebg ._daae ;_egdd :=_bebg ._gabd ;_ffgg :=_bebg ._acag ;_baac ,_cebe :=_fdbc (_ggec ,_dcbce ,_ffgg );if _cebe .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_gfed :=_baac *_egdd *_feff ;if _caaf ==0{return MakeNumberResult (_gfed );};_edgf :=_feff *_egdd ;_geac :=_feff -_dcgc ;_fdeg :=int ((_geac -_gfed )/_edgf );if _caaf <=_fdeg {return MakeNumberResult (_edgf );}else if _caaf ==_fdeg +1{return MakeNumberResult (_geac -_edgf *float64 (_fdeg )-_gfed );
}else {return MakeNumberResult (0);};};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ccgd :=len (args );if _ccgd < 3||_ccgd > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_afde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdag :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fddd :=args [2].ValueNumber ;_aaffb :=0.0;if _ccgd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aaffb =args [3].ValueNumber ;};_caba :=0.0;if _ccgd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_caba =args [4].ValueNumber ;if _caba !=0{_caba =1;};};_aefc :=_fdag *(1+_afde *_caba )-_aaffb *_afde ;_gacd :=(_fddd *_afde +_fdag *(1+_afde *_caba ));return MakeNumberResult (_d .Log (_aefc /_gacd )/_d .Log (1+_afde ));};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_feab :=args [0].AsString ();if _feab .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_feab .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_feab .ValueString [0]));};type yyLexer interface{Lex (_gacc *yySymType )int ;Error (_eaeb string );};func _bcdc (_aagb ,_gad ,_bcg ,_gef int )int {if !_cfad (_gef ){return _bcg ;
};_dgg :=_bcg ;_fadd :=_ggf (_aagb ,_gad );if _dgg > 30||_bcg >=_fadd ||_dgg >=_fadd {_dgg =30;};return _dgg ;};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};var InvalidReferenceContext =&ivr {};


// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gbeae ,_adafb :=_fd .ParseFloat (v ,64);if _adafb !=nil {_af .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_adafb );
};return Number {_dgga :_gbeae };};const _aeecc =57360;

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;
);

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _aeeef (args ,true )};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dfgcd :=args [0].AsNumber ();if _dfgcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbef :=_d .Signbit (_dfgcd .ValueNumber );_cebea ,_bcea :=_d .Modf ((_dfgcd .ValueNumber -1)/2);_dbbbe :=_cebea *2+1;if _bcea !=0{if !_bbef {_dbbbe +=2;}else {_dbbbe -=2;};};return MakeNumberResult (_dbbbe );};

// Update updates references in the VerticalRange after removing a row/column.
func (_ccedd VerticalRange )Update (q *_db .UpdateQuery )Expression {if q .UpdateType ==_db .UpdateActionRemoveColumn {_egfb :=_ccedd ;if q .UpdateCurrentSheet {_bdab :=q .ColumnIdx ;_egfb ._cege =_bag (_ccedd ._cege ,_bdab );_egfb ._afaca =_bag (_ccedd ._afaca ,_bdab );
};return _egfb ;};return _ccedd ;};func _gabe (_gcf ,_eaa ,_cfge ,_dgfe ,_geeb float64 ,_cagcg int )Result {_eebb ,_bcdg :=_fdbc (_gcf ,_eaa ,_cagcg );if _bcdg .Type ==ResultTypeError {return _bcdg ;};_bbfe ,_aggf :=_ebd (_gcf ,_eaa ,int (_geeb ),_cagcg );
if _aggf .Type ==ResultTypeError {return _aggf ;};_cfgb :=0.0;_dbbec :=0.0;_cfge *=100/_geeb ;_dgfe /=_geeb ;_dgfe ++;_edbg :=_eebb *_geeb -_bbfe ;for _efde :=1.0;_efde < _bbfe ;_efde ++{_fcbc :=_efde +_edbg ;_cbaa :=_cfge /_d .Pow (_dgfe ,_fcbc );_dbbec +=_cbaa ;
_cfgb +=_fcbc *_cbaa ;};_bdag :=(_cfge +100)/_d .Pow (_dgfe ,_bbfe +_edbg );_dbbec +=_bdag ;_cfgb +=(_bbfe +_edbg )*_bdag ;_cfgb /=_dbbec ;_cfgb /=_geeb ;return MakeNumberResult (_cfgb );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_bbfgc :=_gecb (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _bbfgc .Type !=ResultTypeEmpty {return _bbfgc ;};_fccg :=_bdaf (args [1:]);_aaeg :=_d .MaxFloat64 ;_bdbef :=_cbgb (args [0]);for _ ,_bcdgc :=range _fccg {_aecg :=_bdbef [_bcdgc ._cafgf ][_bcdgc ._afac ].ValueNumber ;
if _aaeg > _aecg {_aaeg =_aecg ;};};if _aaeg ==_d .MaxFloat64 {_aaeg =0;};return MakeNumberResult (float64 (_aaeg ));};const _gea ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_cecbf PrefixVerticalRange )Update (q *_db .UpdateQuery )Expression {if q .UpdateType ==_db .UpdateActionRemoveColumn {_gebbb :=_cecbf ;_bcfg :=_cecbf ._fdgbe .String ();if _bcfg ==q .SheetToUpdate {_egab :=q .ColumnIdx ;_gebbb ._adfgb =_bag (_cecbf ._adfgb ,_egab );
_gebbb ._caagf =_bag (_cecbf ._caagf ,_egab );};return _gebbb ;};return _cecbf ;};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_deabf :=args [0].AsString ();if _deabf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_gcee :=args [1].AsNumber ();if _gcee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _gcee .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _gcee .ValueNumber ==0{return MakeStringResult ("");};_acgad :=_c .Buffer {};for _dcddc :=0;_dcddc < int (_gcee .ValueNumber );_dcddc ++{_acgad .WriteString (_deabf .ValueString );};return MakeStringResult (_acgad .String ());};func _fdga (_aebd string )*criteriaRegex {_eega :=&criteriaRegex {};
if _aebd ==""{return _eega ;};if _gbadd :=_ggdgg .FindStringSubmatch (_aebd );len (_gbadd )> 1{_eega ._ebed =_becec ;_eega ._bagg =_gbadd [1];}else if _eagg :=_cbaf .FindStringSubmatch (_aebd );len (_eagg )> 1{_eega ._ebed =_becec ;_eega ._bagg =_eagg [1];
}else if _cgab :=_bffbe .FindStringSubmatch (_aebd );len (_cgab )> 1{_eega ._ebed =_gfgd ;_eega ._bagg =_cgab [1];}else if _aedd :=_agba .FindStringSubmatch (_aebd );len (_aedd )> 1{_eega ._ebed =_efaf ;_eega ._bagg =_aedd [1];}else if _gebf :=_ebbg .FindStringSubmatch (_aebd );
len (_gebf )> 1{_eega ._ebed =_fcbfe ;_eega ._bagg =_gebf [1];}else if _dcbag :=_fdee .FindStringSubmatch (_aebd );len (_dcbag )> 1{_eega ._ebed =_gagd ;_eega ._bagg =_dcbag [1];};return _eega ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};var _cgcg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};


// FunctionCall is a function call expression.
type FunctionCall struct{_cdabe string ;_fdca []Expression ;};func _ecd (_gaca ,_egf float64 ,_gcec ,_ecfe int )float64 {_cagc :=_ded (_gaca );_cfdc :=_ded (_egf );_eebc :=_acgc (_cagc ,_cfdc ,_gcec );return _eebg (_cagc ,_eebc ,_ecfe );};var _beabb =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};


// String returns a string representation of a horizontal range.
func (_fdfag HorizontalRange )String ()string {return _fdfag .horizontalRangeReference ()};const _dbg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Eval evaluates and returns the result of a function call.
func (_ebecf FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gbcb :=LookupFunction (_ebecf ._cdabe );if _gbcb !=nil {_edcbd :=make ([]Result ,len (_ebecf ._fdca ));for _cggaa ,_afgd :=range _ebecf ._fdca {_edcbd [_cggaa ]=_afgd .Eval (ctx ,ev );
_edcbd [_cggaa ].Ref =_afgd .Reference (ctx ,ev );};if _ ,_dcddce :=_beef [_ebecf ._cdabe ];!_dcddce {if _becd ,_ccbc :=_eeeda (_edcbd );_becd {return _ccbc ;};};return _gbcb (_edcbd );};_cdee :=LookupFunctionComplex (_ebecf ._cdabe );if _cdee !=nil {_feag :=make ([]Result ,len (_ebecf ._fdca ));
for _fgcff ,_cecfb :=range _ebecf ._fdca {_feag [_fgcff ]=_cecfb .Eval (ctx ,ev );_feag [_fgcff ].Ref =_cecfb .Reference (ctx ,ev );};if _ ,_adgeg :=_beef [_ebecf ._cdabe ];!_adgeg {if _fbgd ,_fece :=_eeeda (_feag );_fbgd {return _fece ;};};return _cdee (ctx ,ev ,_feag );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ebecf ._cdabe );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fefaa Expression ;_fbdf Expression ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfaa :=int (args [0].ValueNumber );
return MakeBoolResult (_cfaa !=_cfaa /2*2);};func _abee (_fdcg [][]Result )float64 {if len (_fdcg )==2{_bdbc :=_fdcg [0][0].AsNumber ();_caea :=_fdcg [0][1].AsNumber ();_cegfe :=_fdcg [1][0].AsNumber ();_bdga :=_fdcg [1][1].AsNumber ();if _bdbc .Type !=ResultTypeNumber ||_caea .Type !=ResultTypeNumber ||_cegfe .Type !=ResultTypeNumber ||_bdga .Type !=ResultTypeNumber {return _d .NaN ();
};return _bdbc .ValueNumber *_bdga .ValueNumber -_cegfe .ValueNumber *_caea .ValueNumber ;};_gcdfc :=float64 (0);_cgdb :=float64 (1);for _acdc :=range _fdcg {_gcdfc +=_cgdb *_fdcg [0][_acdc ].ValueNumber *_abee (_aaeb (_fdcg ,_acdc ));_cgdb *=-1;};return _gcdfc ;
};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_bfe CellRef )Update (q *_db .UpdateQuery )Expression {if q .UpdateCurrentSheet {_bfe ._cge =_bge (_bfe ._cge ,q );};return _bfe ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_dgef ,_accbb :=_befd (args ,false );if _accbb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_dgef /_accbb );};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_bgddg ,_daabg :=_eacd ("\u0046\u0049\u004e\u0044",args );if _daabg .Type !=ResultTypeEmpty {return _daabg ;};_ffdbe :=_bgddg ._eefe ;if _ffdbe ==""{return MakeNumberResult (1.0);};_dbaad :=_bgddg ._gdgff ;_fgab :=_bgddg ._dbdf ;
_bdad :=1;for _dade :=range _dbaad {if _bdad < _fgab {_bdad ++;continue ;};_gdbe :=_e .Index (_dbaad [_dade :],_ffdbe );if _gdbe ==0{return MakeNumberResult (float64 (_bdad ));};_bdad ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Update updates references in the BinaryExpr after removing a row/column.
func (_be BinaryExpr )Update (q *_db .UpdateQuery )Expression {_fe :=_be ;_fe ._ba =_be ._ba .Update (q );_fe ._efb =_be ._efb .Update (q );return _fe ;};type node struct{_aefcg tokenType ;_eadc string ;};var _cbae =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aaad :=args [0].ValueNumber ;if _aaad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_gdfd ,_abeb :=_beea (args [1],args [2],"\u0058\u004e\u0050\u0056");if _abeb .Type ==ResultTypeError {return _abeb ;};_ecbec :=_gdfd ._dfcfc ;_caac :=_gdfd ._fegbf ;_cgfe :=0.0;_fecf :=_caac [0];for _cdba ,_ebec :=range _ecbec {_cgfe +=_ebec /_d .Pow (1+_aaad ,(_caac [_cdba ]-_fecf )/365);
};return MakeNumberResult (_cgfe );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_gcb :=len (args );if _gcb !=5&&_gcb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgbgd ,_gffa ,_ffa :=_abcb (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ffa .Type ==ResultTypeError {return _ffa ;};_fgde ,_ffa :=_gfcac (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _ffa .Type ==ResultTypeError {return _ffa ;};if _fgde >=_bgbgd {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aefa :=args [3].ValueNumber ;if _aefa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dfeab :=args [4].ValueNumber ;if _dfeab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_agad :=0;if _gcb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agad =int (args [5].ValueNumber );if !_ccfg (_agad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_dbaa ,_ffa :=_fdbc (_bgbgd ,_gffa ,_agad );if _ffa .Type ==ResultTypeError {return _ffa ;};_cbgc ,_ffa :=_fdbc (_fgde ,_gffa ,_agad );if _ffa .Type ==ResultTypeError {return _ffa ;};_acaa ,_ffa :=_fdbc (_fgde ,_bgbgd ,_agad );if _ffa .Type ==ResultTypeError {return _ffa ;
};_daagd :=1+_cbgc *_aefa ;_acff :=1+_dbaa *_dfeab ;return MakeNumberResult ((_daagd /_acff -_acaa *_aefa )*100);};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );
RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );
RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );
RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};


// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};func LexReader (r _b .Reader )chan *node {_gdecb :=NewLexer ();go _gdecb .lex (r );return _gdecb ._cafe };const _gdba =57357;

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cagcgf :=args [0].AsString ();if _cagcgf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_e .ToUpper (_cagcgf .ValueString ));};func _befd (_gfec []Result ,_egfd bool )(float64 ,float64 ){_cceg :=0.0;_fgcfc :=0.0;for _ ,_fdebd :=range _gfec {switch _fdebd .Type {case ResultTypeNumber :if _egfd ||!_fdebd .IsBoolean {_fgcfc +=_fdebd .ValueNumber ;
_cceg ++;};case ResultTypeList ,ResultTypeArray :_acbg ,_becg :=_befd (_fdebd .ListValues (),_egfd );_fgcfc +=_acbg ;_cceg +=_becg ;case ResultTypeString :if _egfd {_cceg ++;};case ResultTypeEmpty :};};return _fgcfc ,_cceg ;};func (_bbfbe PrefixVerticalRange )verticalRangeReference (_edaa string )string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_edaa ,_bbfbe ._adfgb ,_bbfbe ._caagf );
};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_gcc :=len (args );if _gcc !=4&&_gcc !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aaae :=args [0].ValueNumber ;if _aaae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgeb :=args [1].ValueNumber ;if _bgeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfgec :=args [2].ValueNumber ;if _cfgec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_accg :=args [3].ValueNumber ;if _accg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _accg > _cfgec {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_fgba :=2.0;if _gcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgba =args [4].ValueNumber ;if _fgba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_cece (_aaae ,_bgeb ,_cfgec ,_accg ,_fgba ));};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fagde :=args [0];if _fagde .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgfbc :=len (_fagde .ValueArray );for _ ,_addae :=range _fagde .ValueArray {if len (_addae )!=_cgfbc {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_abee (_fagde .ValueArray ));};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gccac :=args [0];switch _gccac .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_geee :=0.0;_dcba :=0.0;for _ ,_acddc :=range _gccac .ValueString {_cbdg :=0.0;switch _acddc {case 'I':_cbdg =1;case 'V':_cbdg =5;case 'X':_cbdg =10;case 'L':_cbdg =50;case 'C':_cbdg =100;case 'D':_cbdg =500;case 'M':_cbdg =1000;
};_geee +=_cbdg ;switch {case _dcba ==_cbdg &&(_dcba ==5||_dcba ==50||_dcba ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dcba ==_cbdg :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _dcba < _cbdg {_geee -=2*_dcba ;};_dcba =_cbdg ;};return MakeNumberResult (_geee );case ResultTypeError :return _gccac ;default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gccac .Type ));
};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dedf ,_egde ,_cgfb :=_abcb (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cgfb .Type ==ResultTypeError {return _cgfb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fggf :=_egde -_dedf ;if _fggf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_abcf :=args [2].ValueNumber ;if _abcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cddcb :=(100-_abcf )/_abcf ;_ecee :=360/_fggf ;return MakeNumberResult (_cddcb *_ecee );};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_dbec :=len (args );if _dbec !=4&&_dbec !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_aceae ,_gcdbe ,_fgege :=_abcb (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _fgege .Type ==ResultTypeError {return _fgege ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_geacf :=args [2].ValueNumber ;if _geacf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dbag :=args [3].ValueNumber ;if _dbag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eabg :=0;if _dbec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eabg =int (args [4].ValueNumber );if !_ccfg (_eabg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_abaa ,_fgege :=_fdbc (_aceae ,_gcdbe ,_eabg );if _fgege .Type ==ResultTypeError {return _fgege ;};return MakeNumberResult (_geacf /(1-_dbag *_abaa ));};type evCache struct{_fgad map[string ]Result ;_bfc *_ad .Mutex ;};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_gcef ,_fccf :=_dcef (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _fccf .Type ==ResultTypeError {return _fccf ;};_aeba :=_gcef ._bead ;_egfa :=_gcef ._eacb ;_bgdb :=_gcef ._dbae ;_fdea :=_gcef ._efg ;_cgdc :=_gcef ._cdaf ;
_fdae :=_gcef ._efda ;_cfeg :=_dgge (_aeba ,_egfa ,_bgdb ,0,_fdae );_ebbe :=0.0;if _fdea ==1{if _fdae ==0{_ebbe =-_bgdb ;_fdea ++;};};for _ddeb :=_fdea ;_ddeb <=_cgdc ;_ddeb ++{if _fdae ==1{_ebbe +=_ggdg (_aeba ,_ddeb -2,_cfeg ,_bgdb ,1)-_cfeg ;}else {_ebbe +=_ggdg (_aeba ,_ddeb -1,_cfeg ,_bgdb ,0);
};};_ebbe *=_aeba ;return MakeNumberResult (_ebbe );};type countMode byte ;func _babg (_caef ,_bae ,_geab int )bool {if _bae < 1||_bae > 12{return false ;};if _geab < 1{return false ;};return _geab <=_ggf (_caef ,_bae );};func (_dbdd VerticalRange )verticalRangeReference ()string {return _gf .Sprintf ("\u0025\u0073\u003a%\u0073",_dbdd ._cege ,_dbdd ._afaca );
};func _cfad (_ddaf int )bool {return _ddaf ==0||_ddaf ==4};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_gedcc ,_ggge ,_cffdb :=_fbgeb (from ,to );if _cffdb !=nil {_af .Log .Debug (_cffdb .Error ());return NewError (_cffdb .Error ());};return PrefixRangeExpr {_dgbf :pfx ,_aada :_gedcc ,_gdbf :_ggge };
};func _eacd (_dbfg string ,_gcedd []Result )(*parsedSearchObject ,Result ){_bdfg :=len (_gcedd );if _bdfg !=2&&_bdfg !=3{return nil ,MakeErrorResult (_dbfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fggc :=_gcedd [0];if _fggc .Type ==ResultTypeError {return nil ,_fggc ;};if _fggc .Type !=ResultTypeString &&_fggc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_aceg :=_gcedd [1];if _aceg .Type ==ResultTypeError {return nil ,_aceg ;};if _aceg .Type !=ResultTypeString &&_aceg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_ffceeg :=_aceg .Value ();_agbd :=_fggc .Value ();_fbad :=1;if _bdfg ==3&&_gcedd [2].Type !=ResultTypeEmpty {_ageae :=_gcedd [2];if _ageae .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_fbad =int (_ageae .ValueNumber );if _fbad < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _fbad > len (_ffceeg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_agbd ,_ffceeg ,_fbad },_fcea ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_fegb ,_egcb :=_dcef (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _egcb .Type ==ResultTypeError {return _egcb ;};_cegdf :=_fegb ._bead ;_ddfg :=_fegb ._eacb ;_aea :=_fegb ._dbae ;_cgge :=_fegb ._efg ;
_defc :=_fegb ._cdaf ;_adac :=_fegb ._efda ;_bgcf :=_dgge (_cegdf ,_ddfg ,_aea ,0,_adac );_cbgfc :=0.0;if _cgge ==1{if _adac ==0{_cbgfc =_bgcf +_aea *_cegdf ;}else {_cbgfc =_bgcf ;};_cgge ++;};for _dfea :=_cgge ;_dfea <=_defc ;_dfea ++{if _adac ==1{_cbgfc +=_bgcf -(_ggdg (_cegdf ,_dfea -2,_bgcf ,_aea ,1)-_bgcf )*_cegdf ;
}else {_cbgfc +=_bgcf -_ggdg (_cegdf ,_dfea -1,_bgcf ,_aea ,0)*_cegdf ;};};return MakeNumberResult (_cbgfc );};func init (){_gffc ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );
RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );
RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );
RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );
RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_deff :=args [0].AsNumber ();if _deff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agcgc :=float64 (0);if len (args )> 1{_ccfed :=args [1].AsNumber ();if _ccfed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agcgc =_ccfed .ValueNumber ;};_ffca :=_deff .ValueNumber ;_fgac :=1.0;if _agcgc >=0{_fgac =_d .Pow (1/10.0,_agcgc );}else {return MakeNumberResult (0);};_ffca ,_addb :=_d .Modf (_ffca /_fgac );_cdgbc :=0.99999;if _addb > _cdgbc {_ffca ++;}else if _addb < -_cdgbc {_ffca --;
};_ =_addb ;return MakeNumberResult (_ffca *_fgac );};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgff :=args [0].Ref ;if _cgff .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_cgff .Value ,ev ).IsBoolean );};

// Reference returns an invalid reference for Bool.
func (_ea Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// GetEpoch returns a null time object for the invalid reference context.
func (_ggadg *ivr )GetEpoch ()_bcd .Time {return _bcd .Time {}};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_fbbd (args ,_cgbd ))};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_adfd :=[]float64 {};
for _ ,_eaaf :=range args {switch _eaaf .Type {case ResultTypeString :_afffc :=_eaaf .AsNumber ();if _afffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_adfd =append (_adfd ,_afffc .ValueNumber );case ResultTypeList ,ResultTypeArray :_ebdd :=GCD (_eaaf .ListValues ());if _ebdd .Type !=ResultTypeNumber {return _ebdd ;};_adfd =append (_adfd ,_ebdd .ValueNumber );case ResultTypeNumber :_adfd =append (_adfd ,_eaaf .ValueNumber );
case ResultTypeError :return _eaaf ;default:return MakeErrorResult (_gf .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eaaf .Type ));
};};if _adfd [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_adfd )==1{return MakeNumberResult (_adfd [0]);
};_ceee :=_adfd [0];for _babbb :=1;_babbb < len (_adfd );_babbb ++{if _adfd [_babbb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ceee =_dedfb (_ceee ,_adfd [_babbb ]);};return MakeNumberResult (_ceee );};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_aeef :s }};func _efbd (_fcc ,_fdef ,_dgf float64 )float64 {return (_fcc *3600+_fdef *60+_dgf )/86400};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ggaad :=args [0].AsNumber ();
_dadc :=args [1].AsNumber ();if _ggaad .Type !=ResultTypeNumber ||_dadc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _dadc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fgbdc ,_aafcd :=_d .Modf (_ggaad .ValueNumber /_dadc .ValueNumber );if _aafcd < 0{_fgbdc --;
};return MakeNumberResult (_ggaad .ValueNumber -_dadc .ValueNumber *_fgbdc );};

// String returns a string representation of ConstArrayExpr.
func (_bgd ConstArrayExpr )String ()string {return ""};var _aggdg =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
const _dbccd =57348;

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};func _cgbc (_gccfe []Result ,_bagc bool )Result {_cbggg :="\u004d\u0049\u004e";if _bagc {_cbggg ="\u004d\u0049\u004e\u0041";};if len (_gccfe )==0{return MakeErrorResult (_cbggg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgcfd :=_d .MaxFloat64 ;for _ ,_fbfg :=range _gccfe {switch _fbfg .Type {case ResultTypeNumber :if (_bagc ||!_fbfg .IsBoolean )&&_fbfg .ValueNumber < _cgcfd {_cgcfd =_fbfg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_gbbce :=_cgbc (_fbfg .ListValues (),_bagc );
if _gbbce .ValueNumber < _cgcfd {_cgcfd =_gbbce .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_gabee :=0.0;if _bagc {_gabee =_fbfg .AsNumber ().ValueNumber ;};if _gabee < _cgcfd {_cgcfd =_gabee ;};default:_af .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cbggg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbfg .Type );
};};if _cgcfd ==_d .MaxFloat64 {_cgcfd =0;};return MakeNumberResult (_cgcfd );};func _agfa (_ddg []Result ,_bfac string )(*durationArgs ,Result ){_ddgd :=len (_ddg );if _ddgd !=5&&_ddgd !=6{return nil ,MakeErrorResult (_bfac +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ecbe ,_gae ,_dba :=_abcb (_ddg [0],_ddg [1],_bfac );if _dba .Type ==ResultTypeError {return nil ,_dba ;};_cgaa :=_ddg [2];if _cgaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfac +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_cbcf :=_cgaa .ValueNumber ;if _cbcf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_dbac :=_ddg [3];if _dbac .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfac +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_fbgb :=_dbac .ValueNumber ;if _fbgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_gcge :=_ddg [4];if _gcge .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfac +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gga :=float64 (int (_gcge .ValueNumber ));if !_fegd (_gga ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efcg :=0;if _ddgd ==6&&_ddg [5].Type !=ResultTypeEmpty {_gacag :=_ddg [5];
if _gacag .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efcg =int (_gacag .ValueNumber );
if !_ccfg (_efcg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_bfac );};};return &durationArgs {_ecbe ,_gae ,_cbcf ,_fbgb ,_gga ,_efcg },_fcea ;
};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ecec :=args [0].AsNumber ();if _ecec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fbfaf :=float64 (1);if _ecec .ValueNumber < 0{_fbfaf =-1;};if len (args )> 1{_egea :=args [1].AsNumber ();if _egea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fbfaf =_d .Abs (_egea .ValueNumber );};if len (args )==1{return MakeNumberResult (_d .Ceil (_ecec .ValueNumber ));};_fgga :=_ecec .ValueNumber ;_fgga ,_dffd :=_d .Modf (_fgga /_fbfaf );if _dffd !=0{if _ecec .ValueNumber > 0{_fgga ++;};};return MakeNumberResult (_fgga *_fbfaf );
};var _bcgb =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _febbd (_ffeg Result )[]Result {_ccbbb :=_ffeg .ValueList ;if _ffeg .Type ==ResultTypeArray {_ccbbb =nil ;for _ ,_daca :=range _ffeg .ValueArray {if len (_daca )> 0{_ccbbb =append (_ccbbb ,_daca [0]);}else {_ccbbb =append (_ccbbb ,_fcea );};};};return _ccbbb ;
};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_gbga :=_e .Split (v ,"\u003a");if len (_gbga )!=2{return nil ;};_ceffa ,_ :=_fd .Atoi (_gbga [0]);_cgde ,_ :=_fd .Atoi (_gbga [1]);if _ceffa > _cgde {_ceffa ,_cgde =_cgde ,_ceffa ;};
return PrefixHorizontalRange {_fbcde :pfx ,_deafa :_ceffa ,_edfgc :_cgde };};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );
RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dadb :=len (args );if _dadb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _dadb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bace :=args [0];_bagfc :=args [1];if _bagfc .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_abda :=args [2].AsNumber ();if _abda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbadf :=false ;if _dadb ==4&&args [3].Type !=ResultTypeEmpty {_deab :=args [3].AsNumber ();if _deab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _deab .ValueNumber ==0{_gbadf =true ;};};_dgbgd :=int (_abda .ValueNumber )-1;_gaab :=-1;_eecc :=false ;_acbbb :for _ggfc ,_fbaa :=range _bagfc .ValueArray {if len (_fbaa )==0{continue ;};_fbdcg :=_fbaa [0];switch _fgbaf (_fbdcg ,_bace ,false ,_gbadf ){case _cggc :_gaab =_ggfc ;
case _beaf :_gaab =_ggfc ;_eecc =true ;break _acbbb ;};};if _gaab ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gbeac :=_bagfc .ValueArray [_gaab ];
if _dgbgd < 0||_dgbgd >=len (_gbeac ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _eecc ||!_gbadf {return _gbeac [_dgbgd ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fdba :=_bcd .Now ();
_ ,_gebb :=_fdba .Zone ();_gcdb :=_abc +float64 (_fdba .Unix ()+int64 (_gebb ))/86400;return MakeNumberResult (_gcdb );};func _gggd ()yyParser {return &yyParserImpl {}};func _abcb (_adeb ,_fbfa Result ,_cbe string )(float64 ,float64 ,Result ){_gfga ,_adff :=_gfcac (_adeb ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cbe );
if _adff .Type ==ResultTypeError {return 0,0,_adff ;};_fbfac ,_adff :=_gfcac (_fbfa ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cbe );if _adff .Type ==ResultTypeError {return 0,0,_adff ;};if _gfga >=_fbfac {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _gfga ,_fbfac ,_fcea ;};func _fbd (_bcc string )bool {for _ ,_adbc :=range _efd {_gdga :=_adbc .FindStringSubmatch (_bcc );if len (_gdga )> 1{return true ;};};return false ;};

// String returns a string representation of FunctionCall expression.
func (_dddbe FunctionCall )String ()string {_cegfa :=_c .Buffer {};_cegfa .WriteString (_dddbe ._cdabe );_cegfa .WriteString ("\u0028");_aeda :=len (_dddbe ._fdca )-1;for _faca ,_eaga :=range _dddbe ._fdca {_cegfa .WriteString (_eaga .String ());if _faca !=_aeda {_cegfa .WriteString ("\u002c");
};};_cegfa .WriteString ("\u0029");return _cegfa .String ();};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcbe :=args [0].Ref ;if _gcbe .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_gcbe .Value ));};

// Reference returns a string reference value to a range with prefix.
func (_edeg PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_fecg :=_edeg ._dgbf .Reference (ctx ,ev );_ccab :=_edeg ._aada .Reference (ctx ,ev );_fecca :=_edeg ._gdbf .Reference (ctx ,ev );if _fecg .Type ==ReferenceTypeSheet &&_ccab .Type ==ReferenceTypeCell &&_fecca .Type ==ReferenceTypeCell {return MakeRangeReference (_gcfb (_fecg ,_ccab ,_fecca ));
};return ReferenceInvalid ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};const _gafad =187;

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_gcgcg ,_bdb :=_daegg (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bdb .Type ==ResultTypeError {return _bdb ;};_dfaab :=_ded (_gcgcg ._agg );_ffee :=_ded (_gcgcg ._cgef );_bega :=_gcgcg ._fbdc ;_edd :=_acgc (_dfaab ,_ffee ,_bega );
_gedc ,_abdg ,_ggfa :=_edd .Date ();return MakeNumberResult (_efdc (_gedc ,int (_abdg ),_ggfa ));};var _bfeac _ad .Mutex ;

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgegc :=args [0].AsNumber ();_agbe :=args [1].AsNumber ();if _dgegc .Type !=ResultTypeNumber ||_agbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_edcf :=_d .Trunc (_dgegc .ValueNumber );_edbd :=_d .Trunc (_agbe .ValueNumber );if _edcf < _edbd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _edcf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_edcf +_edbd -1);args [1]=MakeNumberResult (_edcf -1);return Combin (args );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_ebgbd PrefixRangeExpr )Update (q *_db .UpdateQuery )Expression {_abcee :=_ebgbd ;_fefe :=_ebgbd ._dgbf .String ();if _fefe ==q .SheetToUpdate {_deaca :=*q ;_deaca .UpdateCurrentSheet =true ;_abcee ._aada =_ebgbd ._aada .Update (&_deaca );_abcee ._gdbf =_ebgbd ._gdbf .Update (&_deaca );
};return _abcee ;};func _eeeda (_agadf []Result )(bool ,Result ){for _ ,_daefd :=range _agadf {if _daefd .Type ==ResultTypeError {return true ,_daefd ;};};return false ,MakeEmptyResult ();};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_ceba string };func init (){_fgbad =_gd .New (_gd .NewSource (_bcd .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_daaa ("\u0041\u0053\u0049\u004e",_d .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_daaa ("\u0041\u0053\u0049\u004e",_d .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_daaa ("\u0041\u0053\u0049\u004e",_d .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_daaa ("\u0041\u0043\u004f\u0054",func (_gfdd float64 )float64 {return _d .Pi /2-_d .Atan (_gfdd )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_daaa ("\u0041\u0043\u004fT\u0048",func (_gacfd float64 )float64 {return _d .Atanh (1/_gacfd )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_daaa ("\u0041\u0053\u0049\u004e",_d .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_daaa ("\u0041\u0053\u0049N\u0048",_d .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_daaa ("\u0041\u0054\u0041\u004e",_d .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_daaa ("\u0041\u0054\u0041N\u0048",_d .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_daaa ("\u0043\u004f\u0053",_d .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_daaa ("\u0043\u004f\u0053\u0048",_d .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gbcgc ("\u0043\u004f\u0054",_d .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gbcgc ("\u0043\u004f\u0054\u0048",_d .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gbcgc ("\u0043\u0053\u0043",_d .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gbcgc ("\u0043\u0053\u0043",_d .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_daaa ("\u0045\u0058\u0050",_d .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_daaa ("\u004c\u004e",_d .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_daaa ("\u004c\u004f\u00471\u0030",_d .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gbcgc ("\u0053\u0045\u0043",_d .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gbcgc ("\u0053\u0045\u0043\u0048",_d .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_daaa ("\u0053\u0049\u004e",_d .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_daaa ("\u0053\u0049\u004e\u0048",_d .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_daaa ("\u0053\u0051\u0052\u0054",_d .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_daaa ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_dbafc float64 )float64 {return _d .Sqrt (_dbafc *_d .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_daaa ("\u0054\u0041\u004e",_d .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_daaa ("\u0054\u0041\u004e\u0048",_d .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_ac Context ,formula string )Result ;SetCache (_egg string ,_baa Result );GetFromCache (_cea string )(Result ,bool );LastEvalIsRef ()bool ;};func (_ace *evCache )GetFromCache (key string )(Result ,bool ){_ace ._bfc .Lock ();
_ccfa ,_dbbe :=_ace ._fgad [key ];_ace ._bfc .Unlock ();return _ccfa ,_dbbe ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_aaeba :=_e .Split (v ,"\u003a");if len (_aaeba )!=2{return nil ;};_ggcf ,_ :=_fd .Atoi (_aaeba [0]);_accea ,_ :=_fd .Atoi (_aaeba [1]);if _ggcf > _accea {_ggcf ,_accea =_accea ,_ggcf ;};return HorizontalRange {_caag :_ggcf ,_fegba :_accea };
};type parsedReplaceObject struct{_cffc string ;_gefg int ;_cbed int ;_gafa string ;};

// Reference returns an invalid reference for EmptyExpr.
func (_edb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of a range with prefix.
func (_gecg PrefixRangeExpr )String ()string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gecg ._dgbf .String (),_gecg ._aada .String (),_gecg ._gdbf .String ());};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_ebdg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_ebdg =int (args [1].ValueNumber );if _ebdg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _ebdg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ecef :=args [0].Value ();
if _ebdg > len (_ecef ){return MakeStringResult (_ecef );};return MakeStringResult (_ecef [0:_ebdg ]);};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bfde :=args [0].ValueNumber ;_gbb :=args [1].ValueNumber ;_dde :=args [2].ValueNumber ;_cegc :=_efbd (_bfde ,_gbb ,_dde );if _cegc >=0{return MakeNumberResult (_cegc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};const _agefc =57377;var _ggce =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ggea :=args [0];switch _ggea .Type {case ResultTypeError :return _ggea ;case ResultTypeNumber ,ResultTypeString :return _fecc (args [0]);case ResultTypeList :_ccbfd :=_ggea .ValueList ;_debba :=[]Result {};for _ ,_ecccg :=range _ccbfd {_gfecf :=_fecc (_ecccg );
if _gfecf .Type ==ResultTypeError {return _gfecf ;};_debba =append (_debba ,_gfecf );};return MakeListResult (_debba );case ResultTypeArray :_dgdf :=_ggea .ValueArray ;_gfdf :=[][]Result {};for _ ,_fdaea :=range _dgdf {_gcgac :=[]Result {};for _ ,_cgdf :=range _fdaea {_aecd :=_fecc (_cgdf );
if _aecd .Type ==ResultTypeError {return _aecd ;};_gcgac =append (_gcgac ,_aecd );};_gfdf =append (_gfdf ,_gcgac );};return MakeArrayResult (_gfdf );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};var _bcdaa []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};


// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abag :=args [0].ValueNumber ;if _abag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ffga :=args [1].ValueNumber ;if _ffga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adgg :=args [2].ValueNumber ;if _adgg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_d .Pow (_adgg /_ffga ,1/_abag )-1);};const _fcbcg =57367;func _aeeef (_ggba []Result ,_dace bool )Result {_afgb :="\u004d\u0041\u0058";if _dace {_afgb ="\u004d\u0041\u0058\u0041";};if len (_ggba )==0{return MakeErrorResult (_afgb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eegfa :=-_d .MaxFloat64 ;for _ ,_egcdf :=range _ggba {switch _egcdf .Type {case ResultTypeNumber :if (_dace ||!_egcdf .IsBoolean )&&_egcdf .ValueNumber > _eegfa {_eegfa =_egcdf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bade :=_aeeef (_egcdf .ListValues (),_dace );
if _bade .ValueNumber > _eegfa {_eegfa =_bade .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_defcg :=0.0;if _dace {_defcg =_egcdf .AsNumber ().ValueNumber ;};if _defcg > _eegfa {_eegfa =_defcg ;};default:_af .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_afgb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egcdf .Type );
};};if _eegfa ==-_d .MaxFloat64 {_eegfa =0;};return MakeNumberResult (_eegfa );};func _bge (_adc string ,_gde *_db .UpdateQuery )string {_fda ,_ecf :=_bce .ParseCellReference (_adc );if _ecf !=nil {return "\u0023\u0052\u0045F\u0021";};if _gde .UpdateType ==_db .UpdateActionRemoveColumn {_dbbf :=_gde .ColumnIdx ;
_fde :=_fda .ColumnIdx ;if _fde < _dbbf {return _adc ;}else if _fde ==_dbbf {return "\u0023\u0052\u0045F\u0021";}else {return _fda .Update (_db .UpdateActionRemoveColumn ).String ();};};return _adc ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_fcf :=len (args );if _fcf !=4&&_fcf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gaa ,_gdfa ,_deca :=_abcb (args [0],args [1],"\u0044\u0049\u0053\u0043");if _deca .Type ==ResultTypeError {return _deca ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcfg :=args [2].ValueNumber ;if _fcfg <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddfb :=args [3].ValueNumber ;if _ddfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccd :=0;if _fcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccd =int (args [4].ValueNumber );if !_ccfg (_ccd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_eagcg ,_deca :=_fdbc (_gaa ,_gdfa ,_ccd );if _deca .Type ==ResultTypeError {return _deca ;};return MakeNumberResult ((_ddfb -_fcfg )/_ddfb /_eagcg );};

// String returns a string of a range.
func (_adbag Range )String ()string {return _gf .Sprintf ("\u0025\u0073\u003a%\u0073",_adbag ._gfddg .String (),_adbag ._bffe .String ());};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_afdef :=args [0].Ref ;if _afdef .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_gdef ,_ddef :=_bce .ParseCellReference (_afdef .Value );if _ddef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_afdef .Value );};return MakeNumberResult (float64 (_gdef .RowIdx ));
};func _daegg (_bdaeb []Result ,_dcde string )(*couponArgs ,Result ){_bfcg :=len (_bdaeb );if _bfcg !=3&&_bfcg !=4{return nil ,MakeErrorResult (_dcde +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dgc ,_gdb ,_gebdb :=_abcb (_bdaeb [0],_bdaeb [1],_dcde );if _gebdb .Type ==ResultTypeError {return nil ,_gebdb ;};if _bdaeb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcde +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eebd :=_bdaeb [2].ValueNumber ;if !_fegd (_eebd ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_dcde );};_fdeb :=0;if _bfcg ==4&&_bdaeb [3].Type !=ResultTypeEmpty {if _bdaeb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcde +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdeb =int (_bdaeb [3].ValueNumber );if !_ccfg (_fdeb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dcde );
};};return &couponArgs {_dgc ,_gdb ,int (_eebd ),_fdeb },_fcea ;};func (_gbca *Lexer )Next ()*node {_gbca ._afdd .Lock ();defer _gbca ._afdd .Unlock ();if len (_gbca ._aeaab )> 0{_cagdg :=_gbca ._aeaab [0];_gbca ._aeaab =_gbca ._aeaab [1:];return _cagdg ;
};return _gbca .nextRaw ();};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_d .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_dacff NamedRangeRef )Update (q *_db .UpdateQuery )Expression {return _dacff };func _edbe (_ddeg string )(int ,int ,float64 ,bool ,bool ,Result ){_abg :="";_dfc :=[]string {};for _aedf ,_abcd :=range _adge {_dfc =_abcd .FindStringSubmatch (_ddeg );
if len (_dfc )> 1{_abg =_aedf ;break ;};};if _abg ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_ceec :=_dfc [1]=="";_dfc =_dfc [49:];_fbdb :=len (_dfc );_gca :=_dfc [_fbdb -1];_edf :=_gca =="\u0061\u006d";_gag :=_gca =="\u0070\u006d";
var _agdb ,_dbfc int ;var _gcgc float64 ;var _bede error ;switch _abg {case "\u0068\u0068":_agdb ,_bede =_fd .Atoi (_dfc [0]);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_dbfc =0;_gcgc =0;case "\u0068\u0068\u003am\u006d":_agdb ,_bede =_fd .Atoi (_dfc [0]);
if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_dbfc ,_bede =_fd .Atoi (_dfc [2]);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_gcgc =0;case "\u006d\u006d\u003as\u0073":_agdb =0;
_dbfc ,_bede =_fd .Atoi (_dfc [0]);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_gcgc ,_bede =_fd .ParseFloat (_dfc [2],64);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );
};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_agdb ,_bede =_fd .Atoi (_dfc [0]);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};_dbfc ,_bede =_fd .Atoi (_dfc [2]);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );
};_gcgc ,_bede =_fd .ParseFloat (_dfc [4],64);if _bede !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};};if _dbfc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};if _edf ||_gag {if _agdb > 12||_gcgc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );
}else if _agdb ==12{_agdb =0;};}else if _agdb >=24||_gcgc >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgd );};return _agdb ,_dbfc ,_gcgc ,_gag ,_ceec ,_fcea ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gebcc ,_fddc ,_edcb :=_abcb (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _edcb .Type ==ResultTypeError {return _edcb ;};_cddd ,_edcb :=_gfcac (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _edcb .Type ==ResultTypeError {return _edcb ;};if _cddd >=_gebcc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_adfg :=args [3];if _adfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dbdae :=_adfg .ValueNumber ;if _dbdae < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_daag :=args [4];if _daag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_adba :=_daag .ValueNumber ;if _adba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gfb :=args [5];
if _gfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_ccgb :=_gfb .ValueNumber ;if _ccgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cfef :=args [6];
if _cfef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agec :=float64 (int (_cfef .ValueNumber ));if !_fegd (_agec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dcfd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_bdgb :=args [7];
if _bdgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dcfd =int (_bdgb .ValueNumber );if !_ccfg (_dcfd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_gcgf ,_edcb :=_fdbc (_cddd ,_fddc ,_dcfd );if _edcb .Type ==ResultTypeError {return _edcb ;};_gcgf *=_agec ;_gdbg ,_edcb :=_fdbc (_gebcc ,_fddc ,_dcfd );if _edcb .Type ==ResultTypeError {return _edcb ;};_gdbg *=_agec ;_cbcg ,_edcb :=_fdbc (_cddd ,_gebcc ,_dcfd );
if _edcb .Type ==ResultTypeError {return _edcb ;};_cbcg *=_agec ;_dafda :=_ccgb +_gcgf *100*_dbdae /_agec ;_dafda /=_gdbg *_adba /_agec +1;_dafda -=_cbcg *100*_dbdae /_agec ;return MakeNumberResult (_dafda );};func _fedf (_abbeb string )string {_abbeb =_e .Replace (_abbeb ,"\u000a","\u005c\u006e",-1);
_abbeb =_e .Replace (_abbeb ,"\u000d","\u005c\u0072",-1);_abbeb =_e .Replace (_abbeb ,"\u0009","\u005c\u0074",-1);return _abbeb ;};var _eagac []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
var _abc float64 =25569.0;

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ddgc :=args [0].ValueNumber ;if _ddgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_efddf :=float64 (int (args [1].ValueNumber ));if _efddf < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_d .Pow ((1+_ddgc /_efddf ),_efddf )-1);};const _eaceb int =0;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_fed :data }};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_fgbae :=len (args );if _fgbae !=3&&_fgbae !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_efec ,_aaca :=_bdegc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _aaca .Type ==ResultTypeError {return _aaca ;};_ffbb ,_aaca :=_bdegc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _aaca .Type ==ResultTypeError {return _aaca ;};_gddfb ,_aaca :=_bdegc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _aaca .Type ==ResultTypeError {return _aaca ;};_gecag :=0;
if _fgbae ==3{return MakeStringResult (_e .Replace (_efec ,_ffbb ,_gddfb ,-1));}else {_eefc ,_fcdb :=_ageb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _fcdb .Type ==ResultTypeError {return _fcdb ;
};_gecag =int (_eefc );if _gecag < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_gbcfc :=_efec ;_gfffg :=_gecag ;_edfb :=-1;_afgc :=len (_ffbb );_dfbf :=0;for {_gfffg --;_bcbg :=_e .Index (_gbcfc ,_ffbb );if _bcbg ==-1{_edfb =-1;break ;}else {_edfb =_bcbg +_dfbf ;if _gfffg ==0{break ;};_eeed :=_afgc +_bcbg ;_dfbf +=_eeed ;_gbcfc =_gbcfc [_eeed :];
};};if _edfb ==-1{return MakeStringResult (_efec );}else {_acfc :=_efec [:_edfb ];_bbcab :=_efec [_edfb +_afgc :];return MakeStringResult (_acfc +_gddfb +_bbcab );};};};

// Update updates references in the Negate after removing a row/column.
func (_efece Negate )Update (q *_db .UpdateQuery )Expression {return Negate {_ebfd :_efece ._ebfd .Update (q )};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ba :lhs ,_efb :rhs ,_fdb :op };};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_cfec Result )ListValues ()[]Result {if _cfec .Type ==ResultTypeArray {_baaa :=[]Result {};for _ ,_gfadc :=range _cfec .ValueArray {for _ ,_fbcdee :=range _gfadc {_baaa =append (_baaa ,_fbcdee );};};return _baaa ;};if _cfec .Type ==ResultTypeList {return _cfec .ValueList ;
};return nil ;};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bedd ,_ggeb ,_aggd :=_fgef (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _aggd .Type ==ResultTypeError {return _aggd ;};if _ggeb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _bedd ==0{return MakeNumberResult (0);};_cafc :=_bedd < 0;if _cafc {_bedd =-_bedd ;};_gbge :=float64 (int (_bedd ));_gaf :=args [0].Value ();_ddegb :=_e .Split (_gaf ,"\u002e");_dcdac :=0.0;if len (_ddegb )> 1{var _agc error ;_adeg :=_ddegb [1];_dcdac ,_agc =_fd .ParseFloat (_adeg ,64);
if _agc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_aab :=float64 (len (_adeg ));_dcdac /=_d .Pow (10,_aab );};_aagd :=_dcdac *_ggeb /_d .Pow (10,float64 (int (_d .Log10 (_ggeb )))+1)+_gbge ;if _cafc {_aagd =-_aagd ;};return MakeNumberResult (_aagd );};func _ebcb (_beff Context ,_fgcbe Evaluator ,_fbdd ,_fdeaf string )Result {_dggf ,_ggca :=_bce .ParseCellReference (_fbdd );
if _ggca !=nil {return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fbdd ,_ggca .Error ()));
};_cdfg ,_egdg :=_dggf .ColumnIdx ,_dggf .RowIdx ;_faedd ,_begbc :=_bce .ParseCellReference (_fdeaf );if _begbc !=nil {return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fdeaf ,_begbc .Error ()));
};_gcdda ,_bafdb :=_faedd .ColumnIdx ,_faedd .RowIdx ;_cage :=[][]Result {};for _fffb :=_egdg ;_fffb <=_bafdb ;_fffb ++{_ccdbe :=[]Result {};for _ggfb :=_cdfg ;_ggfb <=_gcdda ;_ggfb ++{_fabgd :=_beff .Cell (_gf .Sprintf ("\u0025\u0073\u0025\u0064",_bce .IndexToColumn (_ggfb ),_fffb ),_fgcbe );
_ccdbe =append (_ccdbe ,_fabgd );};_cage =append (_cage ,_ccdbe );};if len (_cage )==1{if len (_cage [0])==1{return _cage [0][0];};return MakeListResult (_cage [0]);};return MakeArrayResult (_cage );};func _cece (_fbcd ,_egff ,_bffb ,_fggd ,_gfd float64 )float64 {var _efad float64 ;
_cged :=_gfd /_bffb ;if _cged >=1{_cged =1;if _fggd ==1{_efad =_fbcd ;}else {_efad =0;};}else {_efad =_fbcd *_d .Pow (1-_cged ,_fggd -1);};_egef :=_fbcd *_d .Pow (1-_cged ,_fggd );var _afff float64 ;if _egef < _egff {_afff =_efad -_egff ;}else {_afff =_efad -_egef ;
};if _afff < 0{_afff =0;};return _afff ;};var _fggdg =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bfeac .Lock ();defer _bfeac .Unlock ();if _ ,_ddfbg :=_bcgcc [name ];_ddfbg {_af .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_bcgcc [name ]=fn ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aecbe :=true ;for _ ,_acdde :=range args {_acdde =_acdde .AsNumber ();switch _acdde .Type {case ResultTypeList ,ResultTypeArray :_efcag :=And (_acdde .ListValues ());if _efcag .Type ==ResultTypeError {return _efcag ;};if _efcag .ValueNumber ==0{_aecbe =false ;
};case ResultTypeNumber :if _acdde .ValueNumber ==0{_aecbe =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _acdde ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_aecbe );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_bfcc PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gfac :=_bfcc ._fbcde .Reference (ctx ,ev );switch _gfac .Type {case ReferenceTypeSheet :if _daead (_gfac ,ctx ){return MakeErrorResultType (ErrorTypeName ,_gf .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gfac .Value ));
};_adaab :=_bfcc .horizontalRangeReference (_gfac .Value );if _gfbb ,_ecddc :=ev .GetFromCache (_adaab );_ecddc {return _gfbb ;};_debdg :=ctx .Sheet (_gfac .Value );_babfe ,_gbgaf :=_cecg (_debdg ,_bfcc ._deafa ,_bfcc ._edfgc );_fbcg :=_ebcb (_debdg ,ev ,_babfe ,_gbgaf );
ev .SetCache (_adaab ,_fbcg );return _fbcg ;default:return MakeErrorResult (_gf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gfac .Type ));
};};func _fecc (_eefed Result )Result {if _eefed .Type ==ResultTypeEmpty {return _eefed ;};_dbdacg :=_eefed .AsString ();if _dbdacg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _eefed .IsBoolean {if _dbdacg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _dbdacg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_e .ToLower (_dbdacg .ValueString ));};};type cumulArgs struct{_bead float64 ;_eacb float64 ;_dbae float64 ;_efg float64 ;_cdaf float64 ;_efda int ;};func _gabbc (_befg string ,_cdcba _bcd .Time )(_bcd .Time ,error ){_fbbf ,_ ,_cdec :=_bc .ParseFloat (_befg ,10,128,_bc .ToNearestEven );
if _cdec !=nil {return _bcd .Time {},_cdec ;};_gbgd :=new (_bc .Float );_gbgd .SetUint64 (uint64 (24*_bcd .Hour ));_fbbf .Mul (_fbbf ,_gbgd );_ggdb ,_ :=_fbbf .Uint64 ();_eaca :=_cdcba .Add (_bcd .Duration (_ggdb ));return _cecfg (_eaca ),nil ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eaae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgede :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbb :=args [2].ValueNumber ;if _cbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbff :=args [3].ValueNumber ;return MakeNumberResult (_cbff *_eaae *(_bgede /_cbb -1));};func _bcac (_egda string ,_feccf []Result )(*parsedReplaceObject ,Result ){if len (_feccf )!=4{return nil ,MakeErrorResult (_egda +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _feccf [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_egda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_egad :=_feccf [0].ValueString ;if _feccf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_egda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_fcfd :=int (_feccf [1].ValueNumber )-1;if _feccf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_egda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cdcg :=int (_feccf [2].ValueNumber );if _feccf [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_egda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_eccgf :=_feccf [3].ValueString ;return &parsedReplaceObject {_egad ,_fcfd ,_cdcg ,_eccgf },_fcea ;};

// Reference returns a string reference value to an expression with prefix.
func (_ddcd PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_decb :=_ddcd ._fefaa .Reference (ctx ,ev );_cgaeg :=_ddcd ._fbdf .Reference (ctx ,ev );if _decb .Type ==ReferenceTypeSheet &&_cgaeg .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_decb .Value +"\u0021"+_cgaeg .Value };
};return ReferenceInvalid ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efgdd :=0;_adfb :=false ;for _ ,_bebbf :=range args {switch _bebbf .Type {case ResultTypeList ,ResultTypeArray :_egddb :=Xor (_bebbf .ListValues ());if _egddb .Type ==ResultTypeError {return _egddb ;};if _egddb .ValueNumber !=0{_efgdd ++;};_adfb =true ;
case ResultTypeNumber :if _bebbf .ValueNumber !=0{_efgdd ++;};_adfb =true ;case ResultTypeString :case ResultTypeError :return _bebbf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_adfb {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_efgdd %2!=0);};const _cdcc =57375;func _cecg (_bbff Context ,_gfbc ,_bfdgg int )(string ,string ){_fbdgc :="\u0041"+_fd .Itoa (_gfbc );
_befga :=_bbff .LastColumn (_gfbc ,_bfdgg );_cfcbf :=_befga +_fd .Itoa (_bfdgg );return _fbdgc ,_cfcbf ;};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcae :=args [0].AsString ();if _dcae .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aagc :=_c .Buffer {};for _ ,_fdfge :=range _dcae .ValueString {if _f .IsPrint (_fdfge ){_aagc .WriteRune (_fdfge );};};return MakeStringResult (_aagc .String ());};func _accc (_acdd ,_acba ,_fcbe ,_ffab ,_bege ,_gefa float64 )float64 {var _eggf ,_dgdc float64 ;
_gddf :=0.0;_dfcf :=_d .Ceil (_bege );_agdbc :=_acdd -_acba ;_cbfgc :=false ;_gbab :=0.0;for _feef :=1.0;_feef <=_dfcf ;_feef ++{if !_cbfgc {_eggf =_cece (_acdd ,_acba ,_fcbe ,_feef ,_gefa );_gbab =_agdbc /(_fcbe -_feef +1);if _gbab > _eggf {_dgdc =_gbab ;
_cbfgc =true ;}else {_dgdc =_eggf ;_agdbc -=_eggf ;};}else {_dgdc =_gbab ;};if _feef ==_dfcf {_dgdc *=_bege +1-_dfcf ;};_gddf +=_dgdc ;};return _gddf ;};var _fffga =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};
var _fgbad *_gd .Rand ;

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fegbd ,_acddg :=_bcac ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _acddg .Type !=ResultTypeEmpty {return _acddg ;};_eegfe :=_fegbd ._cffc ;_dbebff :=_fegbd ._gefg ;_ecea :=_fegbd ._cbed ;_egdf :=_fegbd ._gafa ;
_cabab :=len (_eegfe );if _dbebff > _cabab {_dbebff =_cabab ;};_caffg :=_dbebff +_ecea ;if _caffg > _cabab {_caffg =_cabab ;};_gfgeg :=_eegfe [0:_dbebff ]+_egdf +_eegfe [_caffg :];return MakeStringResult (_gfgeg );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gadf :=_gecb (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gadf .Type !=ResultTypeEmpty {return _gadf ;};_cfbe :=_bdaf (args [1:]);_cddf :=-_d .MaxFloat64 ;_cabge :=_cbgb (args [0]);for _ ,_cbdcf :=range _cfbe {_faddgd :=_cabge [_cbdcf ._cafgf ][_cbdcf ._afac ].ValueNumber ;
if _cddf < _faddgd {_cddf =_faddgd ;};};if _cddf ==-_d .MaxFloat64 {_cddf =0;};return MakeNumberResult (float64 (_cddf ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};const _cfg =_daga +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
const _cfda =57347;const _agee =57374;

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gfcb :=args [0].AsString ();if _gfcb .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgdec :=args [1].AsNumber ();if _bgdec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffdc :=_gfcb .ValueString ;if len (_ffdc )> 2&&(_e .HasPrefix (_ffdc ,"\u0030\u0078")||_e .HasPrefix (_ffdc ,"\u0030\u0058")){_ffdc =_ffdc [2:];};_agag ,_ddfaf :=_fd .ParseInt (_ffdc ,int (_bgdec .ValueNumber ),64);if _ddfaf !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_agag ));};func init (){_gbcc ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );
RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );
};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_gbag :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_gbag *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cfcfd :=_cbgb (args [1]);for _ ,_eaed :=range _cfcfd {for _ ,_fcda :=range _eaed {if _fcda .Type !=ResultTypeNumber ||_fcda .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_gbag *=1.0+_fcda .ValueNumber ;};};return MakeNumberResult (_gbag );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_acad ,_adffb ,_aacf :=_fgef (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _aacf .Type ==ResultTypeError {return _aacf ;};if _adffb < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _acad ==0{return MakeNumberResult (0);};_aadf :=_acad < 0;if _aadf {_acad =-_acad ;};_ceeg :=args [0].Value ();_dga :=_e .Split (_ceeg ,"\u002e");_bgcce :=float64 (int (_acad ));_dead :=_dga [1];_gdd :=len (_dead );_bdgg :=int (_d .Log10 (_adffb ))+1;
_gade :=float64 (_bdgg -_gdd );_eedfc ,_bdcbd :=_fd .ParseFloat (_dead ,64);if _bdcbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_eedfc *=_d .Pow (10,_gade );_eebgf :=_bgcce +_eedfc /_adffb ;if _aadf {_eebgf =-_eebgf ;};return MakeNumberResult (_eebgf );};

// LastColumn returns empty string for the invalid reference context.
func (_agdd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _gfag (_gdfb ,_eaad ,_abbf ,_dfaf ,_gdea float64 ,_gbdf int )float64 {_gefb :=_dgge (_gdfb ,_abbf ,_dfaf ,_gdea ,_gbdf );var _bga float64 ;if _eaad ==1{if _gbdf ==1{_bga =0;}else {_bga =-_dfaf ;
};}else {if _gbdf ==1{_bga =_ggdg (_gdfb ,_eaad -2,_gefb ,_dfaf ,1)-_gefb ;}else {_bga =_ggdg (_gdfb ,_eaad -1,_gefb ,_dfaf ,0);};};return _bga *_gdfb ;};var _dbcd =[...]int {0};

// Eval evaluates the binary expression using the context given.
func (_bd BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_gc :=_bd ._ba .Eval (ctx ,ev );if _gc .Type ==ResultTypeError {return _gc ;};_dbd :=_bd ._efb .Eval (ctx ,ev );if _dbd .Type ==ResultTypeError {return _dbd ;};if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeArray {if !_fb (_gc .ValueArray ,_dbd .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _fc (_bd ._fdb ,_gc .ValueArray ,_dbd .ValueArray );}else if _gc .Type ==ResultTypeList {if len (_gc .ValueList )!=len (_dbd .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _gg (_bd ._fdb ,_gc .ValueList ,_dbd .ValueList );};}else if _gc .Type ==ResultTypeArray &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return _cgg (_bd ._fdb ,_gc .ValueArray ,_dbd );}else if _gc .Type ==ResultTypeList &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return _ggc (_bd ._fdb ,_gc .ValueList ,_dbd );
};switch _bd ._fdb {case BinOpTypePlus :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber +_dbd .ValueNumber );};};case BinOpTypeMinus :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber -_dbd .ValueNumber );
};};case BinOpTypeMult :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber *_dbd .ValueNumber );};};case BinOpTypeDiv :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {if _dbd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_gc .ValueNumber /_dbd .ValueNumber );};};case BinOpTypeExp :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_d .Pow (_gc .ValueNumber ,_dbd .ValueNumber ));};};case BinOpTypeLT :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber < _dbd .ValueNumber );
};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString < _dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber > _dbd .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString > _dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber ==_dbd .ValueNumber );
};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString ==_dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber )||(_gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (_df (_dbd ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (_df (_gc ));
};case BinOpTypeNE :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber !=_dbd .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString !=_dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber )||(_gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (!_df (_dbd ));
}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (!_df (_gc ));};case BinOpTypeLEQ :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber <=_dbd .ValueNumber );
};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString <=_dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (_df (_dbd ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (_df (_gc ));
};case BinOpTypeGEQ :if _gc .Type ==_dbd .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber >=_dbd .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString >=_dbd .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _gc .Type ==ResultTypeString &&_dbd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeNumber &&_dbd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeEmpty &&(_dbd .Type ==ResultTypeNumber ||_dbd .Type ==ResultTypeString ){return MakeBoolResult (_df (_dbd ));
}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_dbd .Type ==ResultTypeEmpty {return MakeBoolResult (_df (_gc ));};case BinOpTypeConcat :return MakeStringResult (_gc .Value ()+_dbd .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gbea :=len (args );if _gbea < 3||_gbea > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ggfg :=args [0].ValueNumber ;if _ggfg !=float64 (int (_ggfg )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gebe :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cff :=args [2].ValueNumber ;_beeed :=0.0;if _gbea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_beeed =args [3].ValueNumber ;};_fac :=0.0;if _gbea >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fac =args [4].ValueNumber ;if _fac !=0{_fac =1;};};_fagd :=0.1;if _gbea >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fagd =args [5].ValueNumber ;};_ddfa :=100;_cdgb :=0;_ffff :=false ;_eaab :=1e-6;_agade :=_fagd ;for _cdgb < _ddfa &&!_ffff {_ggbf :=_d .Pow (_agade +1,_ggfg );_gfgeb :=_d .Pow (_agade +1,_ggfg -1);_cbga :=_agade *_fac +1;_bcae :=_gebe *(_ggbf -1);_cbbc :=_beeed +_ggbf *_cff +_bcae *_cbga /_agade ;
_bbbf :=_ggfg *_gfgeb *_cff -_bcae *_cbga /_d .Pow (_agade ,2);_cedb :=(_ggfg *_gebe *_gfgeb *_cbga +_bcae *_fac )/_agade ;_dgeb :=_cbbc /(_bbbf +_cedb );if _d .Abs (_dgeb )< _eaab {_ffff =true ;};_cdgb ++;_agade -=_dgeb ;};return MakeNumberResult (_agade );
};func _dfcaa (_eddcc ,_ddfed float64 )float64 {_eddcc =_d .Trunc (_eddcc );_ddfed =_d .Trunc (_ddfed );if _eddcc ==0&&_ddfed ==0{return 0;};return _eddcc *_ddfed /_dedfb (_eddcc ,_ddfed );};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gabf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfegf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcad :=args [2].ValueNumber ;if _gcad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgbe :=args [3].ValueNumber ;if _bgbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _bgbe > _gcad {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_cfege :=(_gabf -_cfegf )*(_gcad -_bgbe +1)*2;_ccge :=_gcad *(_gcad +1);return MakeNumberResult (_cfege /_ccge );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_faad :=MakeNumberResult (0);for _ ,_cfdca :=range args {_cfdca =_cfdca .AsNumber ();switch _cfdca .Type {case ResultTypeNumber :_faad .ValueNumber +=_cfdca .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gacgg :=Sum (_cfdca .ListValues ());
if _gacgg .Type !=ResultTypeNumber {return _gacgg ;};_faad .ValueNumber +=_gacgg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cfdca ;case ResultTypeEmpty :default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfdca .Type ));
};};return _faad ;};var (_cfbf =0;_aecdg =false ;);

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cbcd (args ,true )};type ri struct{_babc float64 ;_ggccf string ;};func _fba (_ffbg int ,_abcc _bcd .Month ,_fad int )int64 {if _ffbg ==1900&&int (_abcc )<=2{_fad --;};_bbbb :=_bcd .Date (_ffbg ,_abcc ,_fad ,0,0,0,0,_bcd .UTC );
return _bbbb .Unix ();};

// Eval evaluates and returns a boolean.
func (_baf Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_baf ._ec )};const _edae =57376;

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_aafg :=args [0];switch _aafg .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_bcbc :=_ded (_aafg .ValueNumber );return MakeNumberResult (float64 (_bcbc .Month ()));case ResultTypeString :_fgaf :=_e .ToLower (_aafg .ValueString );if !_cgaf (_fgaf ){_ ,_ ,_ ,_ ,_bfad ,_gdg :=_edbe (_fgaf );if _gdg .Type ==ResultTypeError {_gdg .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _gdg ;};if _bfad {return MakeNumberResult (1);};};_ ,_bde ,_ ,_ ,_dac :=_fcbd (_fgaf );if _dac .Type ==ResultTypeError {return _dac ;};return MakeNumberResult (float64 (_bde ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// String returns a string representation of PrefixExpr.
func (_fgeeb PrefixExpr )String ()string {return _gf .Sprintf ("\u0025\u0073\u0021%\u0073",_fgeeb ._fefaa .String (),_fgeeb ._fbdf .String ());};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_eedg :=1.0;for _ ,_gcdd :=range args {_gcdd =_gcdd .AsNumber ();switch _gcdd .Type {case ResultTypeNumber :_eedg *=_gcdd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_abbd :=Product (_gcdd .ListValues ());if _abbd .Type !=ResultTypeNumber {return _abbd ;
};_eedg *=_abbd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gcdd ;case ResultTypeEmpty :default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gcdd .Type ));
};};return MakeNumberResult (_eedg );};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_gcba :=_gecb (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _gcba .Type !=ResultTypeEmpty {return _gcba ;};_gbee :=_bdaf (args [1:]);_acedc :=0.0;_geeaf :=_cbgb (args [0]);for _ ,_bcgfa :=range _gbee {_acedc +=_geeaf [_bcgfa ._cafgf ][_bcgfa ._afac ].ValueNumber ;
};return MakeNumberResult (float64 (_acedc ));};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgba :=args [0].Ref ;for _bgba .Type ==ReferenceTypeNamedRange {_bgba =ctx .NamedRange (_bgba .Value );};_fbfd :="";switch _bgba .Type {case ReferenceTypeCell :_fbfd =_bgba .Value ;case ReferenceTypeRange :_dgab :=_e .Split (_bgba .Value ,"\u003a");
if len (_dgab )==2{_fbfd =_dgab [0];};default:return MakeErrorResult (_gf .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bgba .Type ));
};_gead ,_bgaa :=_bce .ParseCellReference (_fbfd );if _bgaa !=nil {return MakeErrorResult (_gf .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_bgaa .Error ()));
};_acfg ,_gfcde ,_dff :=_gead .Column ,_gead .RowIdx ,_gead .SheetName ;_fdbcf :=args [1].AsNumber ();if _fdbcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_fbea :=args [2].AsNumber ();if _fbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _cdgg ,_acfd Result ;if len (args )==3{_cdgg =MakeNumberResult (1);_acfd =MakeNumberResult (1);}else {_cdgg =args [3].AsNumber ();if _cdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _cdgg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_acfd =args [4].AsNumber ();if _acfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _acfd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_bffc :=_bce .ColumnToIndex (_acfg );_abcfa :=_gfcde +uint32 (_fdbcf .ValueNumber );_fffc :=_bffc +uint32 (_fbea .ValueNumber );_eaaa :=_abcfa +uint32 (_cdgg .ValueNumber );_gaeg :=_fffc +uint32 (_acfd .ValueNumber );
if _cdgg .ValueNumber > 0{_eaaa --;}else {_eaaa ++;_abcfa ,_eaaa =_eaaa ,_abcfa ;};if _acfd .ValueNumber > 0{_gaeg --;}else {_gaeg ++;_fffc ,_gaeg =_gaeg ,_fffc ;};_dbga :=_gf .Sprintf ("\u0025\u0073\u0025\u0064",_bce .IndexToColumn (_fffc ),_abcfa );_dgcgb :=_gf .Sprintf ("\u0025\u0073\u0025\u0064",_bce .IndexToColumn (_gaeg ),_eaaa );
if _dff ==""{return _ebcb (ctx ,ev ,_dbga ,_dgcgb );}else {return _ebcb (ctx .Sheet (_dff ),ev ,_dbga ,_dgcgb );};};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eag :=_bcd .Now ();_ ,_dbbc :=_eag .Zone ();_bfd :=_bacc (_gfg ,_eag .Unix ()+int64 (_dbbc ))+1;return MakeNumberResult (_bfd );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fged :=args [0].AsNumber ();if _fged .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _fged .ValueNumber < 0{return MakeNumberResult (-1);}else if _fged .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// String returns a string representation for Bool.
func (_adg Bool )String ()string {if _adg ._ec {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Eval evaluates and returns an expression with prefix.
func (_ebff PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_eefca :=_ebff ._fefaa .Reference (ctx ,ev );switch _eefca .Type {case ReferenceTypeSheet :if _daead (_eefca ,ctx ){return MakeErrorResultType (ErrorTypeName ,_gf .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eefca .Value ));
};_abgde :=ctx .Sheet (_eefca .Value );return _ebff ._fbdf .Eval (_abgde ,ev );default:return MakeErrorResult (_gf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eefca .Type ));
};};func _cecfg (_edecg _bcd .Time )_bcd .Time {_edecg =_edecg .UTC ();return _bcd .Date (_edecg .Year (),_edecg .Month (),_edecg .Day (),_edecg .Hour (),_edecg .Minute (),_edecg .Second (),_edecg .Nanosecond (),_bcd .Local );};

// Reference returns an invalid reference for String.
func (_eagdd String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _cefa ,_gcd float64 ;switch args [0].Type {case ResultTypeNumber :_gcd =args [0].ValueNumber ;
case ResultTypeString :_ffc :=DateValue ([]Result {args [0]});if _ffc .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_gcd =_ffc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_cefa =args [1].ValueNumber ;
if _cefa < 62&&_gcd >=62{_cefa --;};case ResultTypeString :_faa :=DateValue ([]Result {args [1]});if _faa .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_cefa =_faa .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_ege :=float64 (int (_gcd -_cefa ));return MakeNumberResult (_ege );
};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gcgg :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_aafb :=args [2].ValueNumber +1;if _aafb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cced :=_cbgb (args [0]);_dbce :=float64 (len (_cced ));_efed ,_efcb :=0.0,0.0;_dfd ,_abbg :=1.0,1.0;_egcd ,_bceca :=false ,false ;for _ ,_faf :=range _cced {for _ ,_gdgb :=range _faf {if _gdgb .Type ==ResultTypeNumber &&!_gdgb .IsBoolean {_afd :=_gdgb .ValueNumber ;
if _afd ==0{continue ;}else {if _afd > 0{_egcd =true ;_efcb +=_gdgb .ValueNumber *_abbg ;}else {_bceca =true ;_efed +=_gdgb .ValueNumber *_dfd ;};_dfd /=_gcgg ;_abbg /=_aafb ;};};};};if !_egcd ||!_bceca {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_fafc :=-_efcb /_efed ;_fafc *=_d .Pow (_aafb ,_dbce -1);_fafc =_d .Pow (_fafc ,1/(_dbce -1));return MakeNumberResult (_fafc -1);};const _cfd =86400000000000;

// Reference returns an invalid reference for BinaryExpr.
func (_ge BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );
RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _cbd (_gfcd ,_gacg []float64 ,_eacg float64 )float64 {_agfg :=_eacg +1;
_fbac :=0.0;_ecdc :=len (_gfcd );_ffda :=_gacg [0];for _ddfd :=1;_ddfd < _ecdc ;_ddfd ++{_ffdb :=(_gacg [_ddfd ]-_ffda )/365;_fbac -=_ffdb *_gfcd [_ddfd ]/_d .Pow (_agfg ,_ffdb +1);};return _fbac ;};func _abgca (_bbagd Context ,_ebfed ,_fbbcd string )(string ,string ){_efecg :=_ebfed +"\u0031";
_afcff :=_bbagd .LastRow (_ebfed );_acbcd :=_fbbcd +_fd .Itoa (_afcff );return _efecg ,_acbcd ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_cege ,_afaca string };func _fdab (_fbdga Result )*criteriaParsed {_ddga :=_fbdga .Type ==ResultTypeNumber ;_eggb :=_fbdga .ValueNumber ;_aggdd :=_e .ToLower (_fbdga .ValueString );_daeda :=_fdga (_aggdd );return &criteriaParsed {_ddga ,_eggb ,_aggdd ,_daeda };
};type xargs struct{_dfcfc []float64 ;_fegbf []float64 ;};func (_gfgb *noCache )GetFromCache (key string )(Result ,bool ){return _fcea ,false };var _ecdfb =[...]int {1};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abac :=args [0].AsNumber ();if _abac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_d .Pi /180.0*_abac .ValueNumber );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_baae NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_edbab :=ctx .NamedRange (_baae ._ceba );_dddf :=_edbab .Value ;if _fbbc ,_dbdg :=ev .GetFromCache (_dddf );_dbdg {return _fbbc ;};_fgaef :=_e .Split (_dddf ,"\u0021");if len (_fgaef )!=2{return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dddf ));
};_befe :=ctx .Sheet (_fgaef [0]);_dgaba :=_e .Split (_fgaef [1],"\u003a");switch len (_dgaba ){case 1:_gdaad :=ev .Eval (_befe ,_dgaba [0]);ev .SetCache (_dddf ,_gdaad );return _gdaad ;case 2:_bfdb :=_ebcb (_befe ,ev ,_dgaba [0],_dgaba [1]);ev .SetCache (_dddf ,_bfdb );
return _bfdb ;};return MakeErrorResult (_gf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_edbab .Type ));};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fbdg :=args [0].AsNumber ();if _fbdg .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _fbdg .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_feed (_fbdg .ValueNumber ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bcfb ,_ecadf :=_eacd ("\u0046\u0049\u004e\u0044",args );if _ecadf .Type !=ResultTypeEmpty {return _ecadf ;};_ebfe :=_e .ToLower (_bcfb ._eefe );
_bbgdb :=_e .ToLower (_bcfb ._gdgff );if _ebfe ==""{return MakeNumberResult (1.0);};_ebefg :=_bcfb ._dbdf -1;_ebdga :=1;_aaac :=0;for _gedgb :=range _bbgdb {if _gedgb !=0{_faeb :=1;if _gedgb -_aaac > 1{_faeb =2;};_ebdga +=_faeb ;};if _ebdga > _ebefg {_gcgb :=_eg .Index (_ebfe ,_bbgdb [_gedgb :]);
if _gcgb ==0{return MakeNumberResult (float64 (_ebdga ));};};_aaac =_gedgb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _dgff =57346;

// Eval evaluates and returns the result of a constant array expression.
func (_bdc ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_eeb :=[][]Result {};for _ ,_dfg :=range _bdc ._fed {_bfa :=[]Result {};for _ ,_cdd :=range _dfg {_bfa =append (_bfa ,_cdd .Eval (ctx ,ev ));};_eeb =append (_eeb ,_bfa );};return MakeArrayResult (_eeb );
};var _ffgf =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _feed (_beag float64 )float64 {_acaga :=float64 (1);
for _ecgbb :=float64 (2);_ecgbb <=_beag ;_ecgbb ++{_acaga *=_ecgbb ;};return _acaga ;};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_caae *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Reference returns a string reference value to a horizontal range with prefix.
func (_dfff PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_gcfa :=_dfff ._fbcde .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dfff .horizontalRangeReference (_gcfa .Value )};};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Reference returns an invalid reference for ConstArrayExpr.
func (_dfe ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_cge :v }};func _agaef (_fggb Result )bool {_gdeb :=_fggb .Type ;return _gdeb !=ResultTypeArray &&_gdeb !=ResultTypeList ;};type defEval struct{evCache ;_fce bool ;};func _beea (_gabdg ,_bcde Result ,_ccdb string )(*xargs ,Result ){if _gabdg .Type !=ResultTypeList &&_gabdg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ccdb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_eada :=_cbgb (_gabdg );_fdddd :=[]float64 {};for _ ,_ccbbe :=range _eada {for _ ,_bgeded :=range _ccbbe {if _bgeded .Type ==ResultTypeNumber &&!_bgeded .IsBoolean {_fdddd =append (_fdddd ,_bgeded .ValueNumber );}else {return nil ,MakeErrorResult (_ccdb +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_cadg :=len (_fdddd );if len (_fdddd )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _bcde .Type !=ResultTypeList &&_bcde .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ccdb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_ddgf :=_cbgb (_bcde );_feaa :=[]float64 {};_agbc :=0.0;for _ ,_gcbb :=range _ddgf {for _ ,_cbfa :=range _gcbb {if _cbfa .Type ==ResultTypeNumber &&!_cbfa .IsBoolean {_gbcg :=float64 (int (_cbfa .ValueNumber ));if _gbcg < _agbc {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_feaa =append (_feaa ,_gbcg );_agbc =_gbcg ;}else {return nil ,MakeErrorResult (_ccdb +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_feaa )!=_cadg {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_fdddd ,_feaa },MakeEmptyResult ();};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_dbbcad :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_fddag :=args [1].ValueNumber !=0;_bgafc :=_bgbfe (args [2:],[]string {},_fddag );return MakeStringResult (_e .Join (_bgafc ,_dbbcad ));};const _cfed ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _efdc (_bab ,_cbc ,_eec int )float64 {return float64 (_fba (_bab ,_bcd .Month (_cbc ),_eec )/86400)+_abc ;};func (_bbeb *Lexer )nextRaw ()*node {for len (_bbeb ._ggcbe )!=0{_ggeg :=<-_bbeb ._ggcbe [len (_bbeb ._ggcbe )-1];if _ggeg !=nil {return _ggeg ;
};_bbeb ._ggcbe =_bbeb ._ggcbe [0:len (_bbeb ._ggcbe )-1];};return <-_bbeb ._cafe ;};func _aaeb (_bdeag [][]Result ,_cada int )[][]Result {_bdeae :=[][]Result {};for _bggg :=range _bdeag {if _bggg ==0{continue ;};_baddg :=[]Result {};for _bbfdf :=range _bdeag {if _bbfdf ==_cada {continue ;
};_baddg =append (_baddg ,_bdeag [_bggg ][_bbfdf ]);};_bdeae =append (_bdeae ,_baddg );};return _bdeae ;};const _dgbed =57378;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_ecad :=MakeNumberResult (0);for _ ,_bfda :=range args {_bfda =_bfda .AsNumber ();switch _bfda .Type {case ResultTypeNumber :_ecad .ValueNumber +=_bfda .ValueNumber *_bfda .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cadgb :=SumSquares (_bfda .ListValues ());
if _cadgb .Type !=ResultTypeNumber {return _cadgb ;};_ecad .ValueNumber +=_cadgb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bfda ;case ResultTypeEmpty :default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_bfda .Type ));
};};return _ecad ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ggd ,_ebea :=_eacc (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _ebea .Type ==ResultTypeError {return _ebea ;};_eac :=_ggd ._aede ;_bcab :=_ggd ._abfe ;_beee :=_ggd ._gebgf ;_cbfb :=_ggd ._bcda ;_caa :=_ggd ._daae ;
_egb :=_ggd ._gabd ;if _egb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_gfa :=_ggd ._acag ;_gge :=1.0/_egb ;_ffbd :=2.5;if _gge < 3{_ffbd =1;}else if _gge < 5{_ffbd =1.5;}else if _gge <=6{_ffbd =2;};_egb *=_ffbd ;_begab ,_cbgf :=_fdbc (_bcab ,_beee ,_gfa );if _cbgf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_cbeb :=_dcgcg (_begab *_egb *_eac );_eac -=_cbeb ;_fge :=_eac -_cbfb ;for _begb :=0;_begb < _caa ;_begb ++{_cbeb =_dcgcg (_egb *_eac );_fge -=_cbeb ;if _fge < 0{switch _caa -_begb {case 0:case 1:return MakeNumberResult (_dcgcg (_eac *0.5));default:return MakeNumberResult (0);
};};_eac -=_cbeb ;};return MakeNumberResult (_cbeb );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_feg Bool )Update (q *_db .UpdateQuery )Expression {return _feg };

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbef :=args [0];switch _dbef .Type {case ResultTypeError :return _dbef ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_dbef .ValueNumber !=0);};if _dbef .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gabgb (args );case ResultTypeArray :return _cebd (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dcda ,_agef :=_daegg (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _agef .Type ==ResultTypeError {return _agef ;};_aeb :=_ded (_dcda ._agg );_cgea :=_ded (_dcda ._cgef );_aafa :=_dcda ._fbdc ;_gdceb :=_dcda ._bcgf ;
_bagf :=_ccgg (_aeb ,_cgea ,_aafa ,_gdceb );_ffd ,_baddc ,_adda :=_bagf .Date ();return MakeNumberResult (_efdc (_ffd ,int (_baddc ),_adda ));};const _aeed =16;

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_fgbad .Float64 ());
};func (_agbaa *plex )Lex (lval *yySymType )int {_aecdg =true ;_dbfd :=<-_agbaa ._bcegd ;if _dbfd !=nil {lval ._cagb =_dbfd ;return int (lval ._cagb ._aefcg );};return 0;};type yySymType struct{_gdegf int ;_cagb *node ;_ffgb Expression ;_egadf []Expression ;
_ebgdc [][]Expression ;};

// Reference returns a string reference value to a range.
func (_ggfcg Range )Reference (ctx Context ,ev Evaluator )Reference {_eddfa :=_ggfcg ._gfddg .Reference (ctx ,ev );_cbcfd :=_ggfcg ._bffe .Reference (ctx ,ev );if _eddfa .Type ==ReferenceTypeCell &&_cbcfd .Type ==ReferenceTypeCell {return MakeRangeReference (_cfbb (_eddfa ,_cbcfd ));
};return ReferenceInvalid ;};

// String returns a string representation of CellRef.
func (_bfb CellRef )String ()string {return _bfb ._cge };var _efd =[]*_bg .Regexp {};

// Number is a nubmer expression.
type Number struct{_dgga float64 };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_adbcc :=args [0].AsString ();if _adbcc .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_adbcc .ValueString )));};func _cebd (_ecgfa []Result )Result {_bcdgd :=_ecgfa [0].ValueArray ;if len (_ecgfa )==1{_fcbcb :=[][]Result {};for _ ,_decdg :=range _bcdgd {_fcbcb =append (_fcbcb ,_gabgb ([]Result {MakeListResult (_decdg )}).ValueList );
};return MakeArrayResult (_fcbcb );}else if len (_ecgfa )==2{_ecbfd :=len (_bcdgd );_dcbf :=len (_bcdgd [0]);_bfcge :=_agffe (_ecgfa [1],_ecbfd ,_dcbf );_adef :=len (_bfcge );_cgcb :=[][]Result {};var _fdgdaa []Result ;for _adbe ,_dcdeg :=range _bcdgd {if _adbe < _adef {_fdgdaa =_bfcge [_adbe ];
}else {_fdgdaa =_gdecg (MakeErrorResultType (ErrorTypeNA ,""),_dcbf );};_cgcb =append (_cgcb ,_gabgb ([]Result {MakeListResult (_dcdeg ),MakeListResult (_fdgdaa )}).ValueList );};return MakeArrayResult (_cgcb );}else if len (_ecgfa )==3{_acfgc :=len (_bcdgd );
_eebcd :=len (_bcdgd [0]);_ebgde :=_agffe (_ecgfa [1],_acfgc ,_eebcd );_bbag :=_agffe (_ecgfa [2],_acfgc ,_eebcd );_aefaf :=len (_ebgde );_gabdb :=len (_bbag );_ecac :=[][]Result {};var _cggb ,_fcae []Result ;for _edfg ,_ddgda :=range _bcdgd {if _edfg < _aefaf {_cggb =_ebgde [_edfg ];
}else {_cggb =_gdecg (MakeErrorResultType (ErrorTypeNA ,""),_eebcd );};if _edfg < _gabdb {_fcae =_bbag [_edfg ];}else {_fcae =_gdecg (MakeErrorResultType (ErrorTypeNA ,""),_eebcd );};_ecac =append (_ecac ,_gabgb ([]Result {MakeListResult (_ddgda ),MakeListResult (_cggb ),MakeListResult (_fcae )}).ValueList );
};return MakeArrayResult (_ecac );};return MakeErrorResultType (ErrorTypeValue ,"");};func _gecb (_agcc []Result ,_aedfd bool ,_fegdd string )Result {var _bccb ,_bggbd string ;if _aedfd {_bccb ="\u0074\u0068\u0072e\u0065";_bggbd ="\u006f\u0064\u0064";}else {_bccb ="\u0074\u0077\u006f";
_bggbd ="\u0065\u0076\u0065\u006e";};_acddd :=len (_agcc );if (_aedfd &&_acddd < 3)||(!_aedfd &&_acddd < 2){return MakeErrorResult (_fegdd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_bccb +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_acddd /2*2==_acddd )==_aedfd {return MakeErrorResult (_fegdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bggbd +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_cgad :=-1;
_deege :=-1;for _fdgfe :=0;_fdgfe < _acddd ;_fdgfe +=2{_fddbf :=_agcc [_fdgfe ];if _fddbf .Type !=ResultTypeArray &&_fddbf .Type !=ResultTypeList {return MakeErrorResult (_fegdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_fffcf :=_cbgb (_fddbf );if _deege ==-1{_deege =len (_fffcf );_cgad =len (_fffcf [0]);}else if len (_fffcf )!=_deege ||len (_fffcf [0])!=_cgad {return MakeErrorResult (_fegdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _aedfd &&_fdgfe ==0{_fdgfe --;};};return _fcea ;};func _gbgdc (_cbac yyLexer )int {return _gggd ().Parse (_cbac )};

// Update updates references in the Range after removing a row/column.
func (_fccga Range )Update (q *_db .UpdateQuery )Expression {_eddfb :=_fccga ;if q .UpdateCurrentSheet {_eddfb ._gfddg =_fccga ._gfddg .Update (q );_eddfb ._bffe =_fccga ._bffe .Update (q );};return _eddfb ;};var _gcac ,_dfag ,_cbggc ,_egaf ,_begg ,_gdaf ,_agde ,_cbab ,_gdcf ,_ecfb ,_bbad ,_gdfc ,_ggcb ,_adce ,_gbcf *_bg .Regexp ;
func (_ggecb *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Eval evaluates and returns the result of an error expression.
func (_cfcb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_cfcb ._cef )};const _eacbc =57364;

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dccfb :=args [0].AsString ();if _dccfb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cgafb :=_c .Buffer {};_eddfg :=false ;for _ ,_faabf :=range _dccfb .ValueString {if !_eddfg &&_f .IsLetter (_faabf ){_cgafb .WriteRune (_f .ToUpper (_faabf ));}else {_cgafb .WriteRune (_f .ToLower (_faabf ));};_eddfg =_f .IsLetter (_faabf );};return MakeStringResult (_cgafb .String ());
};const _ffgba =57349;var _aae =map[string ]*_bg .Regexp {};const (_bffcf countMode =iota ;_cgbd ;_bfdef ;);type amorArgs struct{_aede float64 ;_abfe float64 ;_gebgf float64 ;_bcda float64 ;_daae int ;_gabd float64 ;_acag int ;};

// Update returns the same object as updating sheet references does not affect Number.
func (_deedd Number )Update (q *_db .UpdateQuery )Expression {return _deedd };

// SetLocked does nothing for the invalid reference context.
func (_eccce *ivr )SetLocked (cellRef string ,locked bool ){};func _dgac (_cbgfd ,_ecce float64 )bool {return _d .Abs (_cbgfd -_ecce )< 1.0e-6};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_dacag :=_e .Split (v ,"\u003a");if len (_dacag )!=2{return nil ;};if _dacag [0]> _dacag [1]{_dacag [0],_dacag [1]=_dacag [1],_dacag [0];};return PrefixVerticalRange {_fdgbe :pfx ,_adfgb :_dacag [0],_caagf :_dacag [1]};
};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_fbbd (args ,_bffcf ))};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_cbgg :=len (args );if _cbgg !=5&&_cbgg !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dfdf ,_dfec ,_gaaa :=_abcb (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gaaa .Type ==ResultTypeError {return _gaaa ;};_cega ,_gaaa :=_gfcac (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _gaaa .Type ==ResultTypeError {return _gaaa ;};if _cega >=_dfdf {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dfb :=args [3].ValueNumber ;if _dfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_deadc :=args [4].ValueNumber ;if _deadc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_gfaf :=0;if _cbgg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfaf =int (args [5].ValueNumber );if !_ccfg (_gfaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_cegg ,_gaaa :=_fdbc (_cega ,_dfec ,_gfaf );if _gaaa .Type ==ResultTypeError {return _gaaa ;};_fgfc ,_gaaa :=_fdbc (_cega ,_dfdf ,_gfaf );if _gaaa .Type ==ResultTypeError {return _gaaa ;};_fage ,_gaaa :=_fdbc (_dfdf ,_dfec ,_gfaf );if _gaaa .Type ==ResultTypeError {return _gaaa ;
};_gdec :=1+_cegg *_dfb ;_gdec /=_deadc /100+_fgfc *_dfb ;_gdec --;_gdec /=_fage ;return MakeNumberResult (_gdec );};var _beef =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ccag :=args [0].AsNumber ();if _ccag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dggd :=args [1].AsNumber ();if _dggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_d .Pow (_ccag .ValueNumber ,_dggd .ValueNumber ));};func _dedfb (_cggg ,_cgag float64 )float64 {_cggg =_d .Trunc (_cggg );_cgag =_d .Trunc (_cgag );if _cggg ==0{return _cgag ;};if _cgag ==0{return _cggg ;};for _cggg !=_cgag {if _cggg > _cgag {_cggg =_cggg -_cgag ;
}else {_cgag =_cgag -_cggg ;};};return _cggg ;};func _bbgd (_fdgd ,_bcaf []float64 ,_fdeba float64 )Result {_fccb :=false ;_bdda :=false ;for _dddc :=0;_dddc < len (_fdgd );_dddc ++{if _fdgd [_dddc ]> 0{_fccb =true ;};if _fdgd [_dddc ]< 0{_bdda =true ;
};};if !_fccb ||!_bdda {return MakeErrorResultType (ErrorTypeNum ,"");};_bbe :=_fdeba ;_cdeg :=1e-10;_dcbg :=0;_bgdbg :=50;_geda :=false ;for {_begac :=_acadc (_fdgd ,_bcaf ,_bbe );_acfb :=_bbe -_begac /_cbd (_fdgd ,_bcaf ,_bbe );_bfbd :=_d .Abs (_acfb -_bbe );
_bbe =_acfb ;_dcbg ++;if _bfbd <=_cdeg ||_d .Abs (_begac )<=_cdeg {break ;};if _dcbg > _bgdbg {_geda =true ;break ;};};if _geda ||_d .IsNaN (_bbe )||_d .IsInf (_bbe ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bbe );};var _cdabg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};
func (_aaacc *ivr )Sheet (name string )Context {return _aaacc };const _ebee ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// String returns an empty string for EmptyExpr.
func (_dfgc EmptyExpr )String ()string {return ""};const _fgaca =57362;

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_efcaf :=[]string {};for _ddca :=range _bcgcc {_efcaf =append (_efcaf ,_ddca );};for _fbeef :=range _ccgcg {_efcaf =append (_efcaf ,_fbeef );};_bf .Strings (_efcaf );return _efcaf ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_debf :=args [0].AsNumber ();if _debf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_dgca :=int (_debf .ValueNumber );_gaff :=make ([][]Result ,0,_dgca );for _adbaf :=0;_adbaf < _dgca ;_adbaf ++{_fgdgc :=make ([]Result ,_dgca );for _ebcf :=0;_ebcf < _dgca ;_ebcf ++{if _adbaf ==_ebcf {_fgdgc [_ebcf ]=MakeNumberResult (1.0);}else {_fgdgc [_ebcf ]=MakeNumberResult (0.0);
};};_gaff =append (_gaff ,_fgdgc );};return MakeArrayResult (_gaff );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_dgbf ,_aada ,_gdbf Expression };var _ed =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};func _fgef (_bggd []Result ,_gcca string )(float64 ,float64 ,Result ){if len (_bggd )!=2{return 0,0,MakeErrorResult (_gcca +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bggd [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gcca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cafce :=_bggd [0].ValueNumber ;if _bggd [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gcca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_edfad :=float64 (int (_bggd [1].ValueNumber ));if _edfad < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gcca +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _cafce ,_edfad ,_fcea ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_cbeg PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dadec :=_cbeg ._fdgbe .Reference (ctx ,ev );switch _dadec .Type {case ReferenceTypeSheet :if _daead (_dadec ,ctx ){return MakeErrorResultType (ErrorTypeName ,_gf .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dadec .Value ));
};_fcgfb :=_cbeg .verticalRangeReference (_dadec .Value );if _daced ,_dabdf :=ev .GetFromCache (_fcgfb );_dabdf {return _daced ;};_eeebb :=ctx .Sheet (_dadec .Value );_gegd ,_bccfg :=_abgca (_eeebb ,_cbeg ._adfgb ,_cbeg ._caagf );_bbdbe :=_ebcb (_eeebb ,ev ,_gegd ,_bccfg );
ev .SetCache (_fcgfb ,_bbdbe );return _bbdbe ;default:return MakeErrorResult (_gf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dadec .Type ));
};};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bfeac .Lock ();defer _bfeac .Unlock ();if _acec ,_dbbfdb :=_bcgcc [name ];_dbbfdb {return _acec ;};return nil ;};var _adge =map[string ]*_bg .Regexp {};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_bged ,_bfce :=_daegg (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _bfce .Type ==ResultTypeError {return _bfce ;};_efcf :=_bged ._fbdc ;_gbbf :=_bged ._bcgf ;_fcbf ,_bfce :=_ebd (_bged ._agg ,_bged ._cgef ,_efcf ,_gbbf );
if _bfce .Type ==ResultTypeError {return _bfce ;};return MakeNumberResult (_fcbf );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_eda *defEval )LastEvalIsRef ()bool {return _eda ._fce };

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_agb :=args [0].ValueNumber ;_bda :=args [1].ValueNumber ;if _bda < _agb {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _bda ==_agb {return MakeNumberResult (0);};_dg :=_e .ToLower (args [2].ValueString );if _dg =="\u0064"{return MakeNumberResult (_bda -_agb );};_bfea :=_ded (_agb );_baga :=_ded (_bda );_ccfe ,_dea ,_bgc :=_bfea .Date ();_fae ,_gdcc ,_ceg :=_baga .Date ();
_gebc :=int (_dea );_eca :=int (_gdcc );var _ffce float64 ;switch _dg {case "\u0079":_ffce =float64 (_fae -_ccfe );if _eca < _gebc ||(_eca ==_gebc &&_ceg < _bgc ){_ffce --;};case "\u006d":_fcg :=_fae -_ccfe ;_ccg :=_eca -_gebc ;if _ceg < _bgc {_ccg --;
};if _ccg < 0{_fcg --;_ccg +=12;};_ffce =float64 (_fcg *12+_ccg );case "\u006d\u0064":_eaf :=_eca ;if _ceg < _bgc {_eaf --;};_ffce =float64 (int (_bda -_efdc (_fae ,_eaf ,_bgc )));case "\u0079\u006d":_ffce =float64 (_eca -_gebc );if _ceg < _bgc {_ffce --;
};if _ffce < 0{_ffce +=12;};case "\u0079\u0064":_cga :=_fae ;if _eca < _gebc ||(_eca ==_gebc &&_ceg < _bgc ){_cga --;};_ffce =float64 (int (_bda -_efdc (_cga ,_gebc ,_bgc )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_ffce );};const _gdac =57355;func _dad (_ffe ,_eecd float64 ,_gfcf ,_aad int )float64 {_daeg :=_ded (_ffe );_gac :=_ded (_eecd );if _aad ==1{_gbdd :=_ccgg (_daeg ,_gac ,_gfcf ,1);_bbgb :=_gbdd .AddDate (0,12/_gfcf ,0);return _eebg (_gbdd ,_bbgb ,_aad );
};return float64 (_cfab (0,_aad ))/float64 (_gfcf );};const _bcdce =57352;func _gfcac (_aafc Result ,_gbbc ,_badd string )(float64 ,Result ){var _fdfa float64 ;switch _aafc .Type {case ResultTypeNumber :_fdfa =float64 (int (_aafc .ValueNumber ));case ResultTypeString :_addd :=DateValue ([]Result {_aafc });
if _addd .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gbbc +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_badd );};_fdfa =_addd .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_badd );
};if _fdfa < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gbbc +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _fdfa ,_fcea ;};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_e .NewReader (s ));};var _fec =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};
func _afffb (_abgad ,_ffebe int )string {const TOKSTART =4;if !_aecdg {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_dbeg :=range _debed {if _dbeg ._ffbc ==_abgad &&_dbeg ._gccff ==_ffebe {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_dbeg ._gabff ;
};};_eeceb :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_eafge (_ffebe );_eggcc :=make ([]int ,0,4);_bdee :=_ffeeb [_abgad ];for _bebab :=TOKSTART ;_bebab -1< len (_aggdg );
_bebab ++{if _bcdeb :=_bdee +_bebab ;_bcdeb >=0&&_bcdeb < _gafad &&_aafe [_cgcg [_bcdeb ]]==_bebab {if len (_eggcc )==cap (_eggcc ){return _eeceb ;};_eggcc =append (_eggcc ,_bebab );};};if _ffgf [_abgad ]==-2{_bdddb :=0;for _fccgd [_bdddb ]!=-1||_fccgd [_bdddb +1]!=_abgad {_bdddb +=2;
};for _bdddb +=2;_fccgd [_bdddb ]>=0;_bdddb +=2{_bebac :=_fccgd [_bdddb ];if _bebac < TOKSTART ||_fccgd [_bdddb +1]==0{continue ;};if len (_eggcc )==cap (_eggcc ){return _eeceb ;};_eggcc =append (_eggcc ,_bebac );};if _fccgd [_bdddb +1]!=0{return _eeceb ;
};};for _eeba ,_gfade :=range _eggcc {if _eeba ==0{_eeceb +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_eeceb +="\u0020\u006f\u0072\u0020";};_eeceb +=_eafge (_gfade );};return _eeceb ;};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_egefb ,_fbgf ,_cegaff :=_fbgeb (from ,to );if _cegaff !=nil {_af .Log .Debug (_cegaff .Error ());return NewError (_cegaff .Error ());};return Range {_gfddg :_egefb ,_bffe :_fbgf };};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_ffad :=len (args );if _ffad !=6&&_ffad !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fdgda ,_babb ,_bccd :=_abcb (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bccd .Type ==ResultTypeError {return _bccd ;};_fdeag :=args [2];if _fdeag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_beded :=_fdeag .ValueNumber ;if _beded < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_bccf :=args [3];if _bccf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abbe :=_bccf .ValueNumber ;if _abbe <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_bcbf :=args [4];if _bcbf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_geeae :=_bcbf .ValueNumber ;if _geeae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fagdf :=args [5];
if _fagdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cgca :=float64 (int (_fagdf .ValueNumber ));if !_fegd (_cgca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ccbg :=0;if _ffad ==7&&args [6].Type !=ResultTypeEmpty {_gacdb :=args [6];
if _gacdb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ccbg =int (_gacdb .ValueNumber );
if !_ccfg (_ccbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_aecb :=0.0;
_dgcg :=0.0;_agea :=1.0;_effec ,_bccd :=_ecaa (_fdgda ,_babb ,_beded ,_dgcg ,_geeae ,_cgca ,_ccbg );if _bccd .Type ==ResultTypeError {return _bccd ;};_ffcee ,_bccd :=_ecaa (_fdgda ,_babb ,_beded ,_agea ,_geeae ,_cgca ,_ccbg );if _bccd .Type ==ResultTypeError {return _bccd ;
};_ecab :=(_agea -_dgcg )*0.5;for _dfga :=0;_dfga < 100&&_aecb !=_abbe ;_dfga ++{_aecb ,_bccd =_ecaa (_fdgda ,_babb ,_beded ,_ecab ,_geeae ,_cgca ,_ccbg );if _bccd .Type ==ResultTypeError {return _bccd ;};if _abbe ==_effec {return MakeNumberResult (_dgcg );
}else if _abbe ==_ffcee {return MakeNumberResult (_agea );}else if _abbe ==_aecb {return MakeNumberResult (_ecab );}else if _abbe < _ffcee {_agea *=2.0;_ffcee ,_bccd =_ecaa (_fdgda ,_babb ,_beded ,_agea ,_geeae ,_cgca ,_ccbg );if _bccd .Type ==ResultTypeError {return _bccd ;
};_ecab =(_agea -_dgcg )*0.5;}else {if _abbe < _aecb {_dgcg =_ecab ;_effec =_aecb ;}else {_agea =_ecab ;_ffcee =_aecb ;};_ecab =_agea -(_agea -_dgcg )*((_abbe -_ffcee )/(_effec -_ffcee ));};};return MakeNumberResult (_ecab );};

// Eval evaluates and returns the result of the cell reference.
func (_fdg CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fdg ._cge ,ev )};type cmpResult int8 ;

// Update updates the FunctionCall references after removing a row/column.
func (_fggdgf FunctionCall )Update (q *_db .UpdateQuery )Expression {_fdfe :=[]Expression {};for _ ,_bbfdeg :=range _fggdgf ._fdca {_dadbb :=_bbfdeg .Update (q );_fdfe =append (_fdfe ,_dadbb );};return FunctionCall {_cdabe :_fggdgf ._cdabe ,_fdca :_fdfe };
};const _bfae ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ddgcd :=args [0];if _ddgcd .Type ==ResultTypeError ||_ddgcd .Type ==ResultTypeString {return _ddgcd ;};return _fcea ;};const _cbadf =57369;type noCache struct{};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_cdabe :name ,_fdca :args };};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_fbb :=len (args );if _fbb < 4||_fbb > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eeef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aebc :=args [1].ValueNumber ;if _aebc <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfeb :=args [2].ValueNumber ;if _cfeb < _aebc {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eab :=args [3].ValueNumber ;_edfe :=0.0;if _fbb >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_edfe =args [4].ValueNumber ;};_fcbg :=0;if _fbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fcbg =int (args [5].ValueNumber );if _fcbg !=0{_fcbg =1;};};return MakeNumberResult (_dgge (_eeef ,_cfeb ,_eab ,_edfe ,_fcbg )-_gfag (_eeef ,_aebc ,_cfeb ,_eab ,_edfe ,_fcbg ));};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cfgf :=args [0].AsNumber ();if _cfgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_aefg :=float64 (1);if _cfgf .ValueNumber < 0{_aefg =-1;};if len (args )> 1{_fbecg :=args [1].AsNumber ();if _fbecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aefg =_fbecg .ValueNumber ;};_adbad :=float64 (1);if len (args )> 2{_cddg :=args [2].AsNumber ();if _cddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_adbad =_cddg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_d .Ceil (_cfgf .ValueNumber ));};_abgc :=_cfgf .ValueNumber ;_abgc ,_dbbcf :=_d .Modf (_abgc /_aefg );if _dbbcf !=0{if _cfgf .ValueNumber > 0{_abgc ++;}else if _adbad < 0{_abgc --;
};};return MakeNumberResult (_abgc *_aefg );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gcaa ,_bgfe ,_faab :=_abcb (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _faab .Type ==ResultTypeError {return _faab ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdae :=_bgfe -_gcaa ;if _gdae > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_efce :=args [2].ValueNumber ;if _efce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_efce *_gdae /360));};const _dcff =57350;

// Eval evaluates a range returning a list of results or an error.
func (_dabac Range )Eval (ctx Context ,ev Evaluator )Result {_abcg :=_dabac ._gfddg .Reference (ctx ,ev );_dcbcef :=_dabac ._bffe .Reference (ctx ,ev );_faebc :=_cfbb (_abcg ,_dcbcef );if _abcg .Type ==ReferenceTypeCell &&_dcbcef .Type ==ReferenceTypeCell {if _gbcaa ,_gbgbb :=ev .GetFromCache (_faebc );
_gbgbb {return _gbcaa ;}else {_gadg :=_ebcb (ctx ,ev ,_abcg .Value ,_dcbcef .Value );ev .SetCache (_faebc ,_gadg );return _gadg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_faebc );};func _gbcgc (_cbaaf string ,_aaee func (_cfcba float64 )float64 )Function {return func (_bgdae []Result )Result {if len (_bgdae )!=1{return MakeErrorResult (_cbaaf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cafa :=_bgdae [0].AsNumber ();switch _cafa .Type {case ResultTypeNumber :_fcee :=_aaee (_cafa .ValueNumber );if _d .IsNaN (_fcee ){return MakeErrorResult (_cbaaf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _d .IsInf (_fcee ,0){return MakeErrorResult (_cbaaf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};if _fcee ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_cbaaf +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fcee );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cbaaf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _cafa ;default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbaaf ,_cafa .Type ));
};};};func (_caf *evCache )SetCache (key string ,value Result ){_caf ._bfc .Lock ();_caf ._fgad [key ]=value ;_caf ._bfc .Unlock ();};

// Reference returns an invalid reference for Error.
func (_geg Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a named range.
func (_addf NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_addf ._ceba };};var _agfaf =[...]uint8 {0,17,33,49,63,78,93,108};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_fdad ,_cagf :=_daegg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cagf .Type ==ResultTypeError {return _cagf ;};return MakeNumberResult (_ecd (_fdad ._agg ,_fdad ._cgef ,_fdad ._fbdc ,_fdad ._bcgf ));
};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_beae :=len (args );if _beae !=4&&_beae !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fdcb ,_dbca ,_ceed :=_abcb (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ceed .Type ==ResultTypeError {return _ceed ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgg :=args [2].ValueNumber ;if _ddgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_accb :=args [3].ValueNumber ;if _accb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_fcfa :=0;if _beae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcfa =int (args [4].ValueNumber );if !_ccfg (_fcfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_eceg ,_ceed :=_fdbc (_fdcb ,_dbca ,_fcfa );if _ceed .Type ==ResultTypeError {return _ceed ;};return MakeNumberResult ((_accb /_ddgg -1)/_eceg );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_egce :=args [0];if _egce .Type !=ResultTypeArray &&_egce .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fcaba :=_fdab (args [1]);_ddge :=0;for _ ,_ccdd :=range _cbgb (_egce ){for _ ,_ebcca :=range _ccdd {if _fdgg (_ebcca ,_fcaba ){_ddge ++;};};};return MakeNumberResult (float64 (_ddge ));};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gegc :=args [0];
if _gegc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcae :=int (_gegc .ValueNumber );if _gcae < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_gcae {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_gcae ];};var _ccgcg =map[string ]FunctionComplex {};func _bbaa (_ggad []Result ,_ecdf rmode )Result {if len (_ggad )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_deeg :=_ggad [0].AsNumber ();if _deeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bddgb :=_ggad [1].AsNumber ();if _bddgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cbffb :=_bddgb .ValueNumber ;_ffed :=_deeg .ValueNumber ;_bdge :=1.0;if _cbffb > 0{_bdge =_d .Pow (1/10.0,_cbffb );}else {_bdge =_d .Pow (10.0,-_cbffb );};_ffed ,_ebbdc :=_d .Modf (_ffed /_bdge );switch _ecdf {case _dbebf :const _efeb =0.499999999;if _ebbdc >=_efeb {_ffed ++;
}else if _ebbdc <=-_efeb {_ffed --;};case _febab :case _ddbg :if _ebbdc > 0{_ffed ++;}else if _ebbdc < 0{_ffed --;};};return MakeNumberResult (_ffed *_bdge );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _bbaa (args ,_dbebf )};func _ded (_ebb float64 )_bcd .Time {_feba :=int64 ((_ebb -_abc )*_cfd );return _bcd .Unix (0,_feba ).UTC ();};var _cbacd =false ;func _fbgeb (_bebgc ,_bfcd Expression )(Expression ,Expression ,error ){_fedg ,_gdbba :=_bebgc .(CellRef );
if !_gdbba {return nil ,nil ,_a .New (_gf .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bebgc .String ()));};_fffbc ,_gdbba :=_bfcd .(CellRef );if !_gdbba {return nil ,nil ,_a .New (_gf .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bfcd .String ()));
};_eeca ,_ebfba :=_bce .ParseCellReference (_fedg ._cge );if _ebfba !=nil {return nil ,nil ,_ebfba ;};_feda ,_bada :=_bce .ParseCellReference (_fffbc ._cge );if _bada !=nil {return nil ,nil ,_bada ;};_gdcfd :=false ;if _eeca .RowIdx > _feda .RowIdx {_gdcfd =true ;
_eeca .RowIdx ,_feda .RowIdx =_feda .RowIdx ,_eeca .RowIdx ;};if _eeca .ColumnIdx > _feda .ColumnIdx {_gdcfd =true ;_eeca .ColumnIdx ,_feda .ColumnIdx =_feda .ColumnIdx ,_eeca .ColumnIdx ;_eeca .Column ,_feda .Column =_feda .Column ,_eeca .Column ;};if _gdcfd {return NewCellRef (_eeca .String ()),NewCellRef (_feda .String ()),nil ;
};return _bebgc ,_bfcd ,nil ;};func _dcgcg (_bebf float64 )float64 {return float64 (int (_bebf +0.5))};

// Reference returns a string reference value to a cell.
func (_ccb CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ccb ._cge };};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_feeb :=_gecb (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _feeb .Type !=ResultTypeEmpty {return _feeb ;};_febd :=_bdaf (args );return MakeNumberResult (float64 (len (_febd )));};

// Eval evaluates and returns the result of a Negate expression.
func (_cccdc Negate )Eval (ctx Context ,ev Evaluator )Result {_fefgb :=_cccdc ._ebfd .Eval (ctx ,ev );if _fefgb .Type ==ResultTypeNumber {return MakeNumberResult (-_fefgb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};func _ggc (_da BinOpType ,_daa []Result ,_afe Result )Result {_eba :=[]Result {};switch _afe .Type {case ResultTypeNumber :_ccc :=_afe .ValueNumber ;for _dag :=range _daa {_ebe :=_daa [_dag ].AsNumber ();if _ebe .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _da {case BinOpTypePlus :_eba =append (_eba ,MakeNumberResult (_ebe .ValueNumber +_ccc ));case BinOpTypeMinus :_eba =append (_eba ,MakeNumberResult (_ebe .ValueNumber -_ccc ));case BinOpTypeMult :_eba =append (_eba ,MakeNumberResult (_ebe .ValueNumber *_ccc ));
case BinOpTypeDiv :if _ccc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eba =append (_eba ,MakeNumberResult (_ebe .ValueNumber /_ccc ));case BinOpTypeExp :_eba =append (_eba ,MakeNumberResult (_d .Pow (_ebe .ValueNumber ,_ccc )));case BinOpTypeLT :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber < _ccc ));
case BinOpTypeGT :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber > _ccc ));case BinOpTypeEQ :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber ==_ccc ));case BinOpTypeLEQ :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber <=_ccc ));case BinOpTypeGEQ :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber >=_ccc ));
case BinOpTypeNE :_eba =append (_eba ,MakeBoolResult (_ebe .ValueNumber !=_ccc ));default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_da ));
};};case ResultTypeString :_cfc :=_afe .ValueString ;for _fdd :=range _daa {_ab :=_daa [_fdd ].AsString ();if _ab .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _da {case BinOpTypeLT :_eba =append (_eba ,MakeBoolResult (_ab .ValueString < _cfc ));case BinOpTypeGT :_eba =append (_eba ,MakeBoolResult (_ab .ValueString > _cfc ));case BinOpTypeEQ :_eba =append (_eba ,MakeBoolResult (_ab .ValueString ==_cfc ));
case BinOpTypeLEQ :_eba =append (_eba ,MakeBoolResult (_ab .ValueString <=_cfc ));case BinOpTypeGEQ :_eba =append (_eba ,MakeBoolResult (_ab .ValueString >=_cfc ));case BinOpTypeNE :_eba =append (_eba ,MakeBoolResult (_ab .ValueString !=_cfc ));default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_da ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_eba );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_egcf :=args [0].AsNumber ();_ebgab :=args [1].AsNumber ();_eaag :=args [2].AsNumber ();_ebceg :=args [3].ListValues ();if _egcf .Type !=ResultTypeNumber ||_ebgab .Type !=ResultTypeNumber ||_eaag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_gbdb :=float64 (0);for _dcgff ,_dbceg :=range _ebceg {_gbdb +=_dbceg .ValueNumber *_d .Pow (_egcf .ValueNumber ,_ebgab .ValueNumber +float64 (_dcgff )*_eaag .ValueNumber );};return MakeNumberResult (_gbdb );};func _age ()evCache {_fdge :=evCache {};
_fdge ._fgad =make (map[string ]Result );_fdge ._bfc =&_ad .Mutex {};return _fdge ;};func _fdf (_gdcee ,_abbb ,_acga int )int {if _gdcee > _abbb {return 0;};if _cfad (_acga ){return (_abbb -_gdcee +1)*360;};_bfeaa :=0;for _aga :=_gdcee ;_aga <=_abbb ;_aga ++{_ffbe :=365;
if _bgea (_aga ){_ffbe =366;};_bfeaa +=_ffbe ;};return _bfeaa ;};var _ddacc =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Reference returns an invalid reference for Negate.
func (_eegfc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fgcg :=len (args );if _fgcg ==0||_fgcg > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_cgcf :=_cbgb (args [0]);_ccdg :=[]float64 {};for _ ,_cfggf :=range _cgcf {for _ ,_feac :=range _cfggf {if _feac .Type ==ResultTypeNumber &&!_feac .IsBoolean {_ccdg =append (_ccdg ,_feac .ValueNumber );};};};_ead :=len (_ccdg );if len (_ccdg )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_ecgc :=0.1;if _fgcg ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ecgc =args [1].ValueNumber ;if _ecgc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_ccff :=[]float64 {};for _gbf :=0;_gbf < _ead ;_gbf ++{if _gbf ==0{_ccff =append (_ccff ,0);}else {_ccff =append (_ccff ,_ccff [_gbf -1]+365);};};return _bbgd (_ccdg ,_ccff ,_ecgc );};const _fdadc =57358;const _egac =57344;

// Reference returns a string reference value to a vertical range.
func (_adbff VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_adbff .verticalRangeReference ()};};func _gdde (_aacg Result ,_bec *criteriaParsed )bool {if _aacg .Type ==ResultTypeEmpty {return false ;
};if _bec ._badfb {return _aacg .ValueNumber ==_bec ._gfaa ;}else {_dbgd :=_e .ToLower (_aacg .ValueString );return _bec ._gaea ==_dbgd ||_eg .Match (_bec ._gaea ,_dbgd );};};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _b .Reader )Expression {_bcad :=&plex {_bcegd :LexReader (r )};_gbgdc (_bcad );if _bcad ._bedc !=""{return nil ;};return _bcad ._ffcg ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_fceac Result )AsNumber ()Result {if _fceac .Type ==ResultTypeString {_fceeb ,_ggcbg :=_fd .ParseFloat (_fceac .ValueString ,64);if _ggcbg ==nil {return MakeNumberResult (_fceeb );};};if _fceac .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _fceac ;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffde :=[]float64 {};
for _ ,_bbfg :=range args {switch _bbfg .Type {case ResultTypeString :_dgfeb :=_bbfg .AsNumber ();if _dgfeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ffde =append (_ffde ,_dgfeb .ValueNumber );case ResultTypeList :_decg :=LCM (_bbfg .ValueList );if _decg .Type !=ResultTypeNumber {return _decg ;};_ffde =append (_ffde ,_decg .ValueNumber );case ResultTypeNumber :_ffde =append (_ffde ,_bbfg .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _bbfg ;};};if len (_ffde )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _ffde [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ffde )==1{return MakeNumberResult (_ffde [0]);
};_bece :=_ffde [0];for _bdaea :=1;_bdaea < len (_ffde );_bdaea ++{if _ffde [_bdaea ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bece =_dfcaa (_bece ,_ffde [_bdaea ]);};return MakeNumberResult (_bece );};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_d .Pi );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cccg :=args [0].Ref ;
if _cccg .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_gdccg ,_daaeb :=_bce .ParseCellReference (_cccg .Value );if _daaeb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cccg .Value );};return MakeNumberResult (float64 (_gdccg .ColumnIdx +1));
};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_fcd string ,_ecg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ff string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_bcd .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_gb int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_deb string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dc string )string ;

// GetFormat returns if cell is protected.
GetLocked (_debb string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cfe string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_bgbg string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cb ,_dee int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_bdd string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_gebd string ,_edg bool );

// NamedRange returns a named range.
NamedRange (_fcb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ccf ,_ecb uint32 );};

// Update returns the same object as updating sheet references does not affect String.
func (_ggdd String )Update (q *_db .UpdateQuery )Expression {return _ggdd };func (_afb BinOpType )String ()string {if _afb >=BinOpType (len (_ed )-1){return _gf .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_afb );
};return _dd [_ed [_afb ]:_ed [_afb +1]];};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_bgfb SheetPrefixExpr )Update (q *_db .UpdateQuery )Expression {return _bgfb };

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eabf :=args [0];if _eabf .Type ==ResultTypeNumber {return _eabf ;};if _eabf .Type ==ResultTypeString {_eeae ,_baace :=_fd .ParseFloat (_eabf .Value (),64);if _baace ==nil {return MakeNumberResult (_eeae );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// CellRef is a reference to a single cell
type CellRef struct{_cge string };

// LastRow returns 0 for the invalid reference context.
func (_cggd *ivr )LastRow (colFrom string )int {return 0};const _cfegfd int =30;func _adec (_aaf int )int {if _aaf < 1900{if _aaf < 30{_aaf +=2000;}else {_aaf +=1900;};};return _aaf ;};

// String returns a string representation of a horizontal range with prefix.
func (_bgca PrefixHorizontalRange )String ()string {return _gf .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bgca ._fbcde .String (),_bgca ._deafa ,_bgca ._edfgc );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ddbde :=args [0];if _ddbde .Type ==ResultTypeList {_cagca :=[][]Result {};for _ ,_ddbb :=range _ddbde .ValueList {_cagca =append (_cagca ,[]Result {_ddbb });};return MakeArrayResult (_cagca );};_babf :=make ([][]Result ,len (_ddbde .ValueArray [0]));
for _ ,_bdcg :=range _ddbde .ValueArray {for _ebbb ,_cgfc :=range _bdcg {_babf [_ebbb ]=append (_babf [_ebbb ],_cgfc );};};return MakeArrayResult (_babf );};type Expression interface{Eval (_efa Context ,_ged Evaluator )Result ;Reference (_ebefb Context ,_dcbc Evaluator )Reference ;
String ()string ;Update (_aff *_db .UpdateQuery )Expression ;};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_abea :=len (args );if _abea < 3||_abea > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bafd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_effe :=args [1].ValueNumber ;if _effe !=float64 (int (_effe )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ece :=args [2].ValueNumber ;_gegf :=0.0;if _abea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gegf =args [3].ValueNumber ;};_dbcga :=0;if _abea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbcga =int (args [4].ValueNumber );if _dbcga !=0{_dbcga =1;};};return MakeNumberResult (_ggdg (_bafd ,_effe ,_ece ,_gegf ,_dbcga ));};func (_ffddc *yyParserImpl )Parse (yylex yyLexer )int {_cabgc :=_bcd .Now ();var _edbcc int ;var _adead yySymType ;
var _ggaca []yySymType ;_ =_ggaca ;_cabd :=_ffddc ._efcba [:];Nerrs :=0;Errflag :=0;_bgbbf :=0;_ffddc ._ccege =-1;_gcbef :=-1;defer func (){_bgbbf =-1;_ffddc ._ccege =-1;_gcbef =-1}();_face :=-1;goto _dcgb ;_acae :return 0;_cead :return 1;_dcgb :if _dabdd (_cabgc ){_af .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _cead ;};if _cfbf >=4{_gf .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_eafge (_gcbef ),_cffe (_bgbbf ));};_face ++;if _face >=len (_cabd ){_ebfa :=make ([]yySymType ,len (_cabd )*2);copy (_ebfa ,_cabd );
_cabd =_ebfa ;};_cabd [_face ]=_adead ;_cabd [_face ]._gdegf =_bgbbf ;_fgbab :if _dabdd (_cabgc ){_af .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cead ;};_edbcc =_ffeeb [_bgbbf ];if _edbcc <=_fccc {goto _dgbef ;
};if _ffddc ._ccege < 0{_ffddc ._ccege ,_gcbef =_ccffc (yylex ,&_ffddc ._bdedf );};_edbcc +=_gcbef ;if _edbcc < 0||_edbcc >=_gafad {goto _dgbef ;};_edbcc =_cgcg [_edbcc ];if _aafe [_edbcc ]==_gcbef {_ffddc ._ccege =-1;_gcbef =-1;_adead =_ffddc ._bdedf ;
_bgbbf =_edbcc ;if Errflag > 0{Errflag --;};goto _dcgb ;};_dgbef :if _dabdd (_cabgc ){_af .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cead ;};_edbcc =_ffgf [_bgbbf ];if _edbcc ==-2{if _ffddc ._ccege < 0{_ffddc ._ccege ,_gcbef =_ccffc (yylex ,&_ffddc ._bdedf );
};_badg :=0;for {if _fccgd [_badg +0]==-1&&_fccgd [_badg +1]==_bgbbf {break ;};_badg +=2;};for _badg +=2;;_badg +=2{_edbcc =_fccgd [_badg +0];if _edbcc < 0||_edbcc ==_gcbef {break ;};};_edbcc =_fccgd [_badg +1];if _edbcc < 0{goto _acae ;};};if _edbcc ==0{switch Errflag {case 0:yylex .Error (_afffb (_bgbbf ,_gcbef ));
Nerrs ++;if _cfbf >=1{_gf .Printf ("\u0025\u0073",_cffe (_bgbbf ));_gf .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_eafge (_gcbef ));};fallthrough;case 1,2:Errflag =3;for _face >=0{_edbcc =_ffeeb [_cabd [_face ]._gdegf ]+_dggb ;if _edbcc >=0&&_edbcc < _gafad {_bgbbf =_cgcg [_edbcc ];
if _aafe [_bgbbf ]==_dggb {goto _dcgb ;};};if _cfbf >=2{_gf .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_cabd [_face ]._gdegf );
};_face --;};goto _cead ;case 3:if _cfbf >=2{_gf .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_eafge (_gcbef ));};if _gcbef ==_aecde {goto _cead ;};
_ffddc ._ccege =-1;_gcbef =-1;goto _fgbab ;};};if _cfbf >=2{_gf .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_edbcc ,_cffe (_bgbbf ));};_eddg :=_edbcc ;_eaccc :=_face ;_ =_eaccc ;_face -=_ddacc [_edbcc ];
if _face +1>=len (_cabd ){_bbec :=make ([]yySymType ,len (_cabd )*2);copy (_bbec ,_cabd );_cabd =_bbec ;};_adead =_cabd [_face +1];_edbcc =_fffga [_edbcc ];_gedea :=_cdabg [_edbcc ];_dfdb :=_gedea +_cabd [_face ]._gdegf +1;if _dfdb >=_gafad {_bgbbf =_cgcg [_gedea ];
}else {_bgbbf =_cgcg [_dfdb ];if _aafe [_bgbbf ]!=-_edbcc {_bgbbf =_cgcg [_gedea ];};};switch _eddg {case 1:_ggaca =_cabd [_eaccc -1:_eaccc +1];{yylex .(*plex )._ffcg =_adead ._ffgb ;};case 3:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =_ggaca [2]._ffgb ;
};case 4:_ggaca =_cabd [_eaccc -4:_eaccc +1];{};case 5:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewBool (_ggaca [1]._cagb ._eadc );};case 6:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewNumber (_ggaca [1]._cagb ._eadc );};case 7:_ggaca =_cabd [_eaccc -1:_eaccc +1];
{_adead ._ffgb =NewString (_ggaca [1]._cagb ._eadc );};case 8:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewError (_ggaca [1]._cagb ._eadc );};case 9:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =_ggaca [2]._ffgb ;};case 10:_ggaca =_cabd [_eaccc -2:_eaccc +1];
{_adead ._ffgb =NewNegate (_ggaca [2]._ffgb );};case 15:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =_ggaca [2]._ffgb ;};case 17:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewConstArrayExpr (_ggaca [2]._ebgdc );};case 18:_ggaca =_cabd [_eaccc -1:_eaccc +1];
{_adead ._ebgdc =append (_adead ._ebgdc ,_ggaca [1]._egadf );};case 19:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ebgdc =append (_ggaca [1]._ebgdc ,_ggaca [3]._egadf );};case 20:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._egadf =append (_adead ._egadf ,_ggaca [1]._ffgb );
};case 21:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._egadf =append (_ggaca [1]._egadf ,_ggaca [3]._ffgb );};case 23:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =NewPrefixExpr (_ggaca [1]._ffgb ,_ggaca [2]._ffgb );};case 25:_ggaca =_cabd [_eaccc -1:_eaccc +1];
{_adead ._ffgb =NewSheetPrefixExpr (_ggaca [1]._cagb ._eadc );};case 26:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewCellRef (_ggaca [1]._cagb ._eadc );};case 27:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewRange (_ggaca [1]._ffgb ,_ggaca [3]._ffgb );
};case 28:_ggaca =_cabd [_eaccc -4:_eaccc +1];{_adead ._ffgb =NewPrefixRangeExpr (_ggaca [1]._ffgb ,_ggaca [2]._ffgb ,_ggaca [4]._ffgb );};case 29:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewNamedRangeRef (_ggaca [1]._cagb ._eadc );};case 30:_ggaca =_cabd [_eaccc -1:_eaccc +1];
{_adead ._ffgb =NewHorizontalRange (_ggaca [1]._cagb ._eadc );};case 31:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._ffgb =NewVerticalRange (_ggaca [1]._cagb ._eadc );};case 32:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =NewPrefixHorizontalRange (_ggaca [1]._ffgb ,_ggaca [2]._cagb ._eadc );
};case 33:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =NewPrefixVerticalRange (_ggaca [1]._ffgb ,_ggaca [2]._cagb ._eadc );};case 34:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypePlus ,_ggaca [3]._ffgb );
};case 35:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeMinus ,_ggaca [3]._ffgb );};case 36:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeMult ,_ggaca [3]._ffgb );
};case 37:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeDiv ,_ggaca [3]._ffgb );};case 38:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeExp ,_ggaca [3]._ffgb );
};case 39:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeLT ,_ggaca [3]._ffgb );};case 40:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeGT ,_ggaca [3]._ffgb );
};case 41:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeLEQ ,_ggaca [3]._ffgb );};case 42:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeGEQ ,_ggaca [3]._ffgb );
};case 43:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeEQ ,_ggaca [3]._ffgb );};case 44:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeNE ,_ggaca [3]._ffgb );
};case 45:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._ffgb =NewBinaryExpr (_ggaca [1]._ffgb ,BinOpTypeConcat ,_ggaca [3]._ffgb );};case 47:_ggaca =_cabd [_eaccc -2:_eaccc +1];{_adead ._ffgb =NewFunction (_ggaca [1]._cagb ._eadc ,nil );};case 48:_ggaca =_cabd [_eaccc -3:_eaccc +1];
{_adead ._ffgb =NewFunction (_ggaca [1]._cagb ._eadc ,_ggaca [2]._egadf );};case 49:_ggaca =_cabd [_eaccc -1:_eaccc +1];{_adead ._egadf =append (_adead ._egadf ,_ggaca [1]._ffgb );};case 50:_ggaca =_cabd [_eaccc -3:_eaccc +1];{_adead ._egadf =append (_ggaca [1]._egadf ,_ggaca [3]._ffgb );
};case 53:_ggaca =_cabd [_eaccc -0:_eaccc +1];{_adead ._ffgb =NewEmptyExpr ();};};goto _dcgb ;};const _ae =_bcd .Second *1;func _df (_dbc Result )bool {if _dbc .Type ==ResultTypeString {return _dbc .ValueString =="";};return _dbc .ValueNumber ==0;};var _gabag []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const _cfgg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";type tokenType int ;var _debed =[...]struct{_ffbc int ;
_gccff int ;_gabff string ;}{};func _ecaa (_efedd ,_bdbg ,_bgf ,_gbe ,_dafg ,_acde float64 ,_geff int )(float64 ,Result ){_afc :=int (_acde );_ecaae :=_dad (_efedd ,_bdbg ,_afc ,_geff );_fffg :=_ecd (_efedd ,_bdbg ,_afc ,_geff )/_ecaae ;_cefb ,_ebce :=_ebd (_efedd ,_bdbg ,_afc ,_geff );
if _ebce .Type ==ResultTypeError {return 0,_ebce ;};_bbc :=_dccb (_efedd ,_bdbg ,_afc ,_geff );_fgdb :=_dafg /_d .Pow (1+_gbe /_acde ,_cefb -1+_fffg );_fgdb -=100*_bgf /_acde *_bbc /_ecaae ;_dagd :=100*_bgf /_acde ;_acce :=1+_gbe /_acde ;for _badb :=0.0;
_badb < _cefb ;_badb ++{_fgdb +=_dagd /_d .Pow (_acce ,_badb +_fffg );};return _fgdb ,MakeEmptyResult ();};var _bbeg =[...]uint8 {0,20,37,60,78,96};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_debd :=args [0];switch _debd .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_dddg :=_ded (_debd .ValueNumber );return MakeNumberResult (float64 (_dddg .Day ()));case ResultTypeString :_gce :=_e .ToLower (_debd .ValueString );if !_cgaf (_gce ){_ ,_ ,_ ,_ ,_fgb ,_aed :=_edbe (_gce );if _aed .Type ==ResultTypeError {_aed .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _aed ;};if _fgb {return MakeNumberResult (0);};};_ ,_ ,_ga ,_ ,_gdee :=_fcbd (_gce );if _gdee .Type ==ResultTypeError {return _gdee ;};return MakeNumberResult (float64 (_ga ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};type rangeIndex struct{_cafgf int ;_afac int ;};func _gffc (){_gcac =_bg .MustCompile ("\u005e\u0030\u002b\u0024");_cbggc =_bg .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_egaf =_bg .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_dfag =_bg .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_begg =_bg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_gdaf =_bg .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_agde =_bg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_gdcf =_bg .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ecfb =_bg .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_bbad =_bg .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_gdfc =_bg .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_ggcb =_bg .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ebgd +_ebgd +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ebgd +_ebgd +"\u0029\u002b\u0059+\u0024");_adce =_bg .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_ebgd +_ebgd +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_ebgd +_ebgd +"\u0029\u002b\u0059+\u0024");
_gbcf =_bg .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_cbab =_bg .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _eafge (_gddc int )string {if _gddc >=1&&_gddc -1< len (_aggdg ){if _aggdg [_gddc -1]!=""{return _aggdg [_gddc -1];};};return _gf .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gddc );};const _aecde =1;func _daead (_gbbfg Reference ,_efgg Context )bool {return _efgg .Sheet (_gbbfg .Value )==InvalidReferenceContext ;
};

// HasFormula returns FALSE for the invalid reference context.
func (_defb *ivr )HasFormula (cellRef string )bool {return false };type plex struct{_bcegd chan *node ;_ffcg Expression ;_bedc string ;};func _ageb (_baeed Result ,_caaa ,_dcaa string )(float64 ,Result ){switch _baeed .Type {case ResultTypeEmpty :return 0,_fcea ;
case ResultTypeNumber :return _baeed .ValueNumber ,_fcea ;case ResultTypeString :_bacd ,_eace :=_fd .ParseFloat (_baeed .ValueString ,64);if _eace !=nil {return 0,MakeErrorResult (_dcaa +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_caaa );
};return _bacd ,_fcea ;default:return 0,MakeErrorResult (_caaa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dcaa +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);var _aafe =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_bfadd :=args [0];if _bfadd .Type !=ResultTypeArray &&_bfadd .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dbbca :=_cbgb (_bfadd );_gagff :=args [2];if _gagff .Type !=ResultTypeArray &&_gagff .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cffg :=_cbgb (_gagff );_gbde :=_fdab (args [1]);_abce :=0.0;for _gbead ,_ggac :=range _dbbca {for _facb ,_bdbd :=range _ggac {if _fdgg (_bdbd ,_gbde ){_abce +=_cffg [_gbead ][_facb ].ValueNumber ;};};};return MakeNumberResult (_abce );};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffegc :=_bafce (args );_bf .Float64s (_ffegc );var _gcbg float64 ;if len (_ffegc )%2==0{_gcbg =(_ffegc [len (_ffegc )/2-1]+_ffegc [len (_ffegc )/2])/2;}else {_gcbg =_ffegc [len (_ffegc )/2];};return MakeNumberResult (_gcbg );};

// Update updates references in the PrefixExpr after removing a row/column.
func (_aebbg PrefixExpr )Update (q *_db .UpdateQuery )Expression {_eacdg :=_aebbg ;_ceddf :=_aebbg ._fefaa .String ();if _ceddf ==q .SheetToUpdate {_ggbd :=*q ;_ggbd .UpdateCurrentSheet =true ;_eacdg ._fbdf =_aebbg ._fbdf .Update (&_ggbd );};return _eacdg ;
};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_ddee :=len (args );if _ddee < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_agce :=args [0].ValueNumber ;if _agce ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cefgb :=[]float64 {};for _ ,_fcga :=range args [1:]{switch _fcga .Type {case ResultTypeNumber :_cefgb =append (_cefgb ,_fcga .ValueNumber );case ResultTypeArray ,ResultTypeList :_ggaa :=_cbgb (_fcga );
for _ ,_ecga :=range _ggaa {for _ ,_acbb :=range _ecga {if _acbb .Type ==ResultTypeNumber &&!_acbb .IsBoolean {_cefgb =append (_cefgb ,_acbb .ValueNumber );};};};};};_cagd :=0.0;for _eafc ,_bgec :=range _cefgb {_cagd +=_bgec /_d .Pow (1+_agce ,float64 (_eafc )+1);
};return MakeNumberResult (_cagd );};

// Eval evaluates and returns the result of a sheet expression.
func (_fceaf SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dfdc :=args [0];_ebbd :=args [1];if _ebbd .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cdac :=args [2].AsNumber ();if _cdac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcab :=false ;if len (args )==4{_efaa :=args [3].AsNumber ();if _efaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _efaa .ValueNumber ==0{_fcab =true ;};};_dgdd :=-1;_gffd :=false ;if len (_ebbd .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_fabg :=_ebbd .ValueArray [0];_cecd :for _gcaf ,_ebeg :=range _fabg {switch _fgbaf (_ebeg ,_dfdc ,false ,_fcab ){case _cggc :_dgdd =_gcaf ;case _beaf :_dgdd =_gcaf ;_gffd =true ;break _cecd ;};};if _dgdd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_egaga :=int (_cdac .ValueNumber )-1;if _egaga < 0||_egaga > len (_ebbd .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_fabg =_ebbd .ValueArray [_egaga ];
if _dgdd < 0||_dgdd >=len (_fabg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gffd ||!_fcab {return _fabg [_dgdd ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Reference returns an invalid reference for Number.
func (_dcccc Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func NewLexer ()*Lexer {return &Lexer {_cafe :make (chan *node )}};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_gbgc :=len (args );if _gbgc !=4&&_gbgc !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aacd ,_ccgc ,_dagg :=_abcb (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _dagg .Type ==ResultTypeError {return _dagg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fcca :=args [2].ValueNumber ;if _fcca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ccda :=args [3].ValueNumber ;if _ccda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_egba :=0;if _gbgc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_egba =int (args [4].ValueNumber );if !_ccfg (_egba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_agfb ,_dagg :=_fdbc (_aacd ,_ccgc ,_egba );if _dagg .Type ==ResultTypeError {return _dagg ;};return MakeNumberResult ((_ccda -_fcca )/_fcca /_agfb );};

// Reference returns a string reference value to a sheet.
func (_cfbd SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cfbd ._aeef };};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfde :=args [0].AsNumber ();if _gfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gfde .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_eeeb :=float64 (1);_eeefb :=_d .Trunc (_gfde .ValueNumber );for _fbdgg :=_eeefb ;_fbdgg > 1;_fbdgg -=2{_eeeb *=_fbdgg ;};return MakeNumberResult (_eeeb );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_daeec :=ctx .GetEpoch ();_cegbe ,_bgage :=_gabbc (args [0].Value (),_daeec );if _bgage !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ecgb :=_cegbe .Year ();return MakeBoolResult (_bgea (_ecgb ));};func _bag (_gfc string ,_ceb uint32 )string {_dbda :=_bce .ColumnToIndex (_gfc );if _dbda ==_ceb {return "\u0023\u0052\u0045F\u0021";}else if _dbda > _ceb {return _bce .IndexToColumn (_dbda -1);
}else {return _gfc ;};};func _fb (_ee ,_cg [][]Result )bool {if len (_ee )!=len (_cg ){return false ;};for _efc :=range _ee {if len (_ee [_efc ])!=len (_cg [_efc ]){return false ;};};return true ;};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_bgcc :=_e .ToLower (args [0].ValueString );if !_fbd (_bgcc ){_ ,_ ,_ ,_dae ,_dge :=_fcbd (_bgcc );if _dge .Type ==ResultTypeError {_dge .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _dge ;};if _dae {return MakeNumberResult (0);};};_cde ,_edba ,_cda ,_fea ,_ ,_dcbe :=_edbe (_bgcc );if _dcbe .Type ==ResultTypeError {return _dcbe ;};_cegde :=_efbd (float64 (_cde ),float64 (_edba ),_cda );if _fea {_cegde +=0.5;}else if _cegde >=1{_cegde -=float64 (int (_cegde ));
};return MakeNumberResult (_cegde );};func _bafce (_ceae []Result )[]float64 {_dfge :=make ([]float64 ,0);for _ ,_fedc :=range _ceae {if _fedc .Type ==ResultTypeEmpty {continue ;};_fedc =_fedc .AsNumber ();switch _fedc .Type {case ResultTypeNumber :if !_fedc .IsBoolean {_dfge =append (_dfge ,_fedc .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_dfge =append (_dfge ,_bafce (_fedc .ListValues ())...);case ResultTypeString :default:_af .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fedc .Type );
};};return _dfge ;};func (_ffcec *noCache )SetCache (key string ,value Result ){};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bgab :=args [0].AsString ();_gggg :=args [1].AsString ();if _bgab .Type !=ResultTypeString ||_gggg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_bgab .ValueString ==_gggg .ValueString );};func (_eeff ResultType )String ()string {if _eeff >=ResultType (len (_agfaf )-1){return _gf .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_eeff );
};return _effdd [_agfaf [_eeff ]:_agfaf [_eeff +1]];};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aeeg :=args [0];_abgd :=args [1];if _abgd .Type !=ResultTypeArray &&_abgd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bbcfb :=_febbd (_abgd );_bef :=-1;for _cbbe ,_eggfe :=range _bbcfb {if _fgbaf (_aeeg ,_eggfe ,false ,false )==_beaf {_bef =_cbbe ;};};if _bef ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_gec :=_bbcfb ;if len (args )==3{_gec =_febbd (args [2]);};if _bef < 0||_bef >=len (_gec ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _gec [_bef ];};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_cafe chan *node ;_afdd _ad .Mutex ;_ggcbe []chan *node ;_aeaab []*node ;};type Reference struct{Type ReferenceType ;Value string ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ggdff :=args [0].AsNumber ();if _ggdff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gdda :=float64 (1);_babdd :=args [1].AsNumber ();if _babdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gdda =_babdd .ValueNumber ;if _gdda < 0&&_ggdff .ValueNumber > 0||_gdda > 0&&_ggdff .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_fggbe :=_ggdff .ValueNumber ;_fggbe ,_aeg :=_d .Modf (_fggbe /_gdda );if _d .Trunc (_aeg +0.5)> 0{_fggbe ++;};return MakeNumberResult (_fggbe *_gdda );};

// Value returns a string version of the result.
func (_cdcea Result )Value ()string {switch _cdcea .Type {case ResultTypeNumber :_dfagb :=_fd .FormatFloat (_cdcea .ValueNumber ,'f',-1,64);if len (_dfagb )> 12{_eefedc :=12;for _aeffc :=_eefedc ;_aeffc > 0&&_dfagb [_aeffc ]=='0';_aeffc --{_eefedc --;};
_dfagb =_dfagb [0:_eefedc +1];};return _dfagb ;case ResultTypeError :return _cdcea .ValueString ;case ResultTypeString :return _cdcea .ValueString ;case ResultTypeList :if len (_cdcea .ValueList )==0{return "";};return _cdcea .ValueList [0].Value ();case ResultTypeArray :if len (_cdcea .ValueArray )==0||len (_cdcea .ValueArray [0])==0{return "";
};return _cdcea .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_ddega ,_fbaf :=_daegg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _fbaf .Type ==ResultTypeError {return _fbaf ;};return MakeNumberResult (_dad (_ddega ._agg ,_ddega ._cgef ,_ddega ._fbdc ,_ddega ._bcgf ));
};func _gabgb (_aedb []Result )Result {_bfdfag :=_aedb [0].ValueList ;_dgbd :=len (_bfdfag );switch len (_aedb ){case 1:_dfce :=[]Result {};for _ ,_facf :=range _bfdfag {_dfce =append (_dfce ,MakeBoolResult (_facf .ValueNumber !=0));};return MakeListResult (_dfce );
case 2:_dacc :=_aedb [1];switch _dacc .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_aabg :=[]Result {};for _ ,_fdbd :=range _bfdfag {var _cfaac Result ;if _fdbd .ValueNumber ==0{_cfaac =MakeBoolResult (false );}else {_cfaac =_dacc ;
};_aabg =append (_aabg ,_cfaac );};return MakeListResult (_aabg );case ResultTypeList :_bgbbg :=_gdecg (_dacc ,_dgbd );_gcdf :=[]Result {};for _dged ,_adag :=range _bfdfag {var _aebg Result ;if _adag .ValueNumber ==0{_aebg =MakeBoolResult (false );}else {_aebg =_bgbbg [_dged ];
};_gcdf =append (_gcdf ,_aebg );};return MakeListResult (_gcdf );case ResultTypeArray :_ceegf :=_agffe (_dacc ,len (_dacc .ValueArray ),_dgbd );_feaca :=[][]Result {};for _ ,_adaa :=range _ceegf {_geca :=[]Result {};for _ccbgg ,_cggbb :=range _bfdfag {var _gdcef Result ;
if _cggbb .ValueNumber ==0{_gdcef =MakeBoolResult (false );}else {_gdcef =_adaa [_ccbgg ];};_geca =append (_geca ,_gdcef );};_feaca =append (_feaca ,_geca );};return MakeArrayResult (_feaca );};case 3:_daed :=_aedb [1];_cdef :=_aedb [2];_fbebb :=_agaef (_daed );
_fefff :=_agaef (_cdef );if _fbebb &&_fefff {_cbad :=[]Result {};for _ ,_fbee :=range _bfdfag {var _edace Result ;if _fbee .ValueNumber ==0{_edace =_cdef ;}else {_edace =_daed ;};_cbad =append (_cbad ,_edace );};return MakeListResult (_cbad );};if _daed .Type !=ResultTypeArray &&_cdef .Type !=ResultTypeArray {_bcdeg :=_gdecg (_daed ,_dgbd );
_abdb :=_gdecg (_cdef ,_dgbd );_efgd :=[]Result {};for _eced ,_dgedf :=range _bfdfag {var _bdfc Result ;if _dgedf .ValueNumber ==0{_bdfc =_abdb [_eced ];}else {_bdfc =_bcdeg [_eced ];};_efgd =append (_efgd ,_bdfc );};return MakeListResult (_efgd );};_fcdg ,_ecgce :=len (_daed .ValueArray ),len (_cdef .ValueArray );
_bdea ,_bbfde :=_fcdg ,_ecgce ;if _ecgce > _bdea {_bdea ,_bbfde =_bbfde ,_bdea ;};_gbaf :=_agffe (_daed ,_bdea ,_dgbd );_geaa :=_agffe (_cdef ,_bdea ,_dgbd );_eeda :=[][]Result {};for _dbaf :=0;_dbaf < _bdea ;_dbaf ++{_edcc :=[]Result {};for _gceg ,_bgcb :=range _bfdfag {var _fedd Result ;
if _bgcb .ValueNumber ==0{if _dbaf < _ecgce {_fedd =_geaa [_dbaf ][_gceg ];}else {_fedd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _dbaf < _fcdg {_fedd =_gbaf [_dbaf ][_gceg ];}else {_fedd =MakeErrorResultType (ErrorTypeNA ,"");};};_edcc =append (_edcc ,_fedd );
};_eeda =append (_eeda ,_edcc );};return MakeArrayResult (_eeda );};return MakeErrorResult ("");};var _ffeeb =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
func (_cecdc *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};func _bacc (_dgb ,_ega int64 )float64 {return float64 (int (0.5+float64 ((_ega -_dgb )/86400)))};


// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fced :=args [0].AsNumber ();if _fced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddcf :=0;if len (args )> 1{_fcedb :=args [1];if _fcedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_ddcf =int (_fcedb .ValueNumber );if _ddcf < 0{_ddcf =0;}else if _ddcf > 4{_ddcf =4;};};_ecbg :=_fdfg ;switch _ddcf {case 1:_ecbg =_bcgb ;case 2:_ecbg =_cbae ;case 3:_ecbg =_fggdg ;case 4:_ecbg =_ggce ;};_dca :=_d .Trunc (_fced .ValueNumber );_eddab :=_c .Buffer {};
for _ ,_dfcea :=range _ecbg {for _dca >=_dfcea ._babc {_eddab .WriteString (_dfcea ._ggccf );_dca -=_dfcea ._babc ;};};return MakeStringResult (_eddab .String ());};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// Negate is a negate expression like -A1.
type Negate struct{_ebfd Expression };

// Eval evaluates and returns a string.
func (_egga String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_egga ._eaebe )};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cef :v }};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_eed :=&defEval {};_eed .evCache =_age ();return _eed };

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_efdef ,_deed :=_eacd ("\u0046\u0049\u004e\u0044",args );if _deed .Type !=ResultTypeEmpty {return _deed ;};_faee :=_efdef ._eefe ;if _faee ==""{return MakeNumberResult (1.0);
};_acge :=_efdef ._gdgff ;_effa :=_efdef ._dbdf -1;_cgbcd :=1;_bcfa :=0;for _acgd :=range _acge {if _acgd !=0{_cafgc :=1;if _acgd -_bcfa > 1{_cafgc =2;};_cgbcd +=_cafgc ;};if _cgbcd > _effa {_aebb :=_e .Index (_acge [_acgd :],_faee );if _aebb ==0{return MakeNumberResult (float64 (_cgbcd ));
};};_bcfa =_acgd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_bbdb :=_c .Buffer {};for _ ,_debg :=range args {switch _debg .Type {case ResultTypeString :_bbdb .WriteString (_debg .ValueString );case ResultTypeNumber :var _ccfc string ;if _debg .IsBoolean {if _debg .ValueNumber ==0{_ccfc ="\u0046\u0041\u004cS\u0045";
}else {_ccfc ="\u0054\u0052\u0055\u0045";};}else {_ccfc =_debg .AsString ().ValueString ;};_bbdb .WriteString (_ccfc );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_bbdb .String ());};

// Error is an error expression.
type Error struct{_cef string };func _bgbfe (_eabfa []Result ,_dccc []string ,_adddg bool )[]string {for _ ,_febba :=range _eabfa {switch _febba .Type {case ResultTypeEmpty :if !_adddg {_dccc =append (_dccc ,"");};case ResultTypeString :if _febba .ValueString !=""||!_adddg {_dccc =append (_dccc ,_febba .ValueString );
};case ResultTypeNumber :_dccc =append (_dccc ,_febba .Value ());case ResultTypeList :_dccc =_eegaa (_dccc ,_bgbfe (_febba .ValueList ,[]string {},_adddg ));case ResultTypeArray :for _ ,_dedc :=range _febba .ValueArray {_dccc =_eegaa (_dccc ,_bgbfe (_dedc ,[]string {},_adddg ));
};};};return _dccc ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ebg :=len (args );if _ebg !=4&&_ebg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_fag ,_ccbf :=_gfcac (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ccbf .Type ==ResultTypeError {return _ccbf ;};_ddbd ,_ccbf :=_gfcac (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _ccbf .Type ==ResultTypeError {return _ccbf ;};if _fag >=_ddbd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_abgg :=args [2].ValueNumber ;if _abgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gba :=args [3].ValueNumber ;if _gba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eff :=0;if _ebg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eff =int (args [4].ValueNumber );if !_ccfg (_eff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_affc ,_ccbf :=_fdbc (_fag ,_ddbd ,_eff );if _ccbf .Type ==ResultTypeError {return _ccbf ;};return MakeNumberResult (_gba *_abgg *_affc );};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfcf :=false ;for _ ,_dgaa :=range args {switch _dgaa .Type {case ResultTypeList ,ResultTypeArray :_cdbc :=Or (_dgaa .ListValues ());if _cdbc .Type ==ResultTypeError {return _cdbc ;};if _cdbc .ValueNumber !=0{_bfcf =true ;};case ResultTypeNumber :if _dgaa .ValueNumber !=0{_bfcf =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dgaa ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_bfcf );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _cfbb (_gcbdf ,_bffa Reference )string {return _gf .Sprintf ("\u0025\u0073\u003a%\u0073",_gcbdf .Value ,_bffa .Value );
};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ebc ,_bdeg :=_agfa (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bdeg .Type ==ResultTypeError {return _bdeg ;};_abe :=_ebc ._beba ;_dcfa :=_ebc ._gebg ;_gcdc :=_ebc ._bcec ;_edab :=_ebc ._edee ;_gfcg :=_ebc ._fabd ;
_deec :=_ebc ._dgfb ;return _gabe (_abe ,_dcfa ,_gcdc ,_edab ,_gfcg ,_deec );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ba ,_efb Expression ;_fdb BinOpType ;};func (_abead *Lexer )emit (_egca tokenType ,_egcgg []byte ){if _cbacd {_gf .Println ("\u0065\u006d\u0069\u0074",_egca ,_fedf (string (_egcgg )));};_abead ._cafe <-&node {_egca ,string (_egcgg )};
};func _ggdg (_ebgg ,_aac ,_bdagg ,_fgbd float64 ,_acca int )float64 {var _gaeb float64 ;if _ebgg ==0{_gaeb =_fgbd +_bdagg *_aac ;}else {_fcgf :=_d .Pow (1+_ebgg ,_aac );if _acca ==1{_gaeb =_fgbd *_fcgf +_bdagg *(1+_ebgg )*(_fcgf -1)/_ebgg ;}else {_gaeb =_fgbd *_fcgf +_bdagg *(_fcgf -1)/_ebgg ;
};};return -_gaeb ;};func _dfegd (_eef Result ,_afbb *criteriaParsed )bool {_ceff :=_e .ToLower (_eef .ValueString );_adcb :=_afbb ._geeef ._ebed ;_debbe :=_afbb ._geeef ._bagg ;if _adcb ==_becec {return _ceff ==_debbe ||_eg .Match (_debbe ,_ceff );};if _eef .Type !=ResultTypeEmpty {if _ceff ==_afbb ._gaea ||_eg .Match (_afbb ._gaea ,_ceff ){return true ;
};if _ ,_dfgg :=_fd .ParseFloat (_debbe ,64);_dfgg ==nil {return false ;};switch _adcb {case _gfgd :return _ceff <=_debbe ;case _efaf :return _ceff >=_debbe ;case _fcbfe :return _ceff < _debbe ;case _gagd :return _ceff > _debbe ;};};return false ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gfbf :=_e .Split (v ,"\u003a");if len (_gfbf )!=2{return nil ;};if _gfbf [0]> _gfbf [1]{_gfbf [0],_gfbf [1]=_gfbf [1],_gfbf [0];};return VerticalRange {_cege :_gfbf [0],_afaca :_gfbf [1]};};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_baee :=len (args );if _baee < 3||_baee > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bcged :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fafe :=args [1].ValueNumber ;if _fafe ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_deae :=args [2].ValueNumber ;_ebgb :=0.0;if _baee >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebgb =args [3].ValueNumber ;};_eea :=0.0;if _baee ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eea =args [4].ValueNumber ;if _eea !=0{_eea =1;};};var _ffeb float64 ;if _bcged ==0{_ffeb =(_deae +_ebgb )/_fafe ;}else {_eddc :=_d .Pow (1+_bcged ,_fafe );if _eea ==1{_ffeb =(_ebgb *_bcged /(_eddc -1)+_deae *_bcged /(1-1/_eddc ))/(1+_bcged );}else {_ffeb =_ebgb *_bcged /(_eddc -1)+_deae *_bcged /(1-1/_eddc );
};};return MakeNumberResult (-_ffeb );};

// String is a string expression.
type String struct{_eaebe string };

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _ccbgc (_fegdg []string ,_gggc int )string {return _fd .Itoa (len (_fegdg [len (_fegdg )-1-_gggc ]))};type durationArgs struct{_beba float64 ;
_gebg float64 ;_bcec float64 ;_edee float64 ;_fabd float64 ;_dgfb int ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_ebfd :e }};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ddfea ,_aaba ,_dedb :=_abcb (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _dedb .Type ==ResultTypeError {return _dedb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edde :=_aaba -_ddfea ;if _edde > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_acdba :=args [2].ValueNumber ;if _acdba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_acdba )/(360-_acdba *_edde ));};const _bcb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_daga +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_cgggg Result )AsString ()Result {switch _cgggg .Type {case ResultTypeNumber :return MakeStringResult (_cgggg .Value ());
default:return _cgggg ;};};

// Reference returns an invalid reference for FunctionCall.
func (_ecca FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_adf :=args [1].ValueNumber ;_ada :=args [0];var _gegg float64 ;switch _ada .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_gegg =_ada .ValueNumber ;case ResultTypeString :_dbf :=DateValue ([]Result {args [0]});if _dbf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_gegg =_dbf .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cedd :=_ded (_gegg );_gee :=_cedd .AddDate (0,int (_adf ),0);
_egc ,_dbbb ,_eggc :=_gee .Date ();_gfgg :=_efdc (_egc ,int (_dbbb ),_eggc );if _gfgg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_gfgg );};func _dbdac (_bebb ,_fbc _bcd .Time )bool {_bfgf :=_bebb .Unix ();_gedd :=_fbc .Unix ();_dcgf :=_bebb .Year ();_gbd :=_fba (_dcgf ,_bcd .March ,1);if _bgea (_dcgf )&&_bfgf < _gbd &&_gedd >=_gbd {return true ;};var _bfdfa =_fbc .Year ();
var _egge =_fba (_bfdfa ,_bcd .March ,1);return (_bgea (_bfdfa )&&_gedd >=_egge &&_bfgf < _egge );};const _daefb =57371;

// String returns a string representation of a vertical range.
func (_gbac VerticalRange )String ()string {return _gbac .verticalRangeReference ()};

// String returns a string representation of SheetPrefixExpr.
func (_beaeg SheetPrefixExpr )String ()string {return _beaeg ._aeef };const _gfe ="\u005e\u0028\u0028"+_cfed +"\u007c"+_cfg +"\u007c"+_gea +"\u007c"+_bcb +"\u0029\u0020\u0029\u003f";var _fcea Result =MakeEmptyResult ();

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};func _fbda (_fgge float64 ,_gded *criteriaRegex )bool {_ffdeg ,_eaef :=_fd .ParseFloat (_gded ._bagg ,64);if _eaef !=nil {return false ;};switch _gded ._ebed {case _becec :return _fgge ==_ffdeg ;
case _gfgd :return _fgge <=_ffdeg ;case _efaf :return _fgge >=_ffdeg ;case _fcbfe :return _fgge < _ffdeg ;case _gagd :return _fgge > _ffdeg ;};return false ;};func _abb (_cabg ,_cdf ,_bcdd ,_abf int )int {if _cdf > _bcdd {return 0;};if _cfad (_abf ){return (_bcdd -_cdf +1)*30;
};_dgdg :=0;for _agf :=_cdf ;_agf <=_bcdd ;_agf ++{_dgdg +=_ggf (_cabg ,_agf );};return _dgdg ;};

// Db implements the Excel DB function.
func Db (args []Result )Result {_cfba :=len (args );if _cfba !=4&&_cfba !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eafg :=args [0].ValueNumber ;if _eafg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_debe :=args [1].ValueNumber ;if _debe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cca :=args [2].ValueNumber ;if _cca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ddfe :=args [3].ValueNumber ;if _ddfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _ddfe -_cca > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_bcge :=12.0;if _cfba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bcge =args [4].ValueNumber ;if _bcge < 1||_bcge > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _bcge ==12&&_ddfe > _cca {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _debe >=_eafg {return MakeNumberResult (0);
};_gdeg :=1-_d .Pow (_debe /_eafg ,1/_cca );_gdeg =float64 (int (_gdeg *1000+0.5))/1000;_fdgc :=_eafg *_gdeg *_bcge /12;if _ddfe ==1{return MakeNumberResult (_fdgc );};_bdf :=_fdgc ;_dcge :=0.0;_cecf :=_cca ;if _cecf > _ddfe {_cecf =_ddfe ;};for _fgf :=2.0;
_fgf <=_cecf ;_fgf ++{_dcge =(_eafg -_bdf )*_gdeg ;_bdf +=_dcge ;};if _ddfe > _cca {return MakeNumberResult ((_eafg -_bdf )*_gdeg *(12-_bcge )/12);};return MakeNumberResult (_dcge );};const _dgfea =57351;

// String returns a string representation for Negate.
func (_fgee Negate )String ()string {return "\u002d"+_fgee ._ebfd .String ()};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_fdgbe Expression ;_adfgb ,_caagf string ;};const _ebddf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";
func _cfab (_gbc ,_bac int )int {switch _bac {case 1:if _bgea (_gbc ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// GetFormat returns an empty string for the invalid reference context.
func (_cgcgd *ivr )GetFormat (cellRef string )string {return ""};func _ccfg (_eagd int )bool {return _eagd >=0&&_eagd <=4};func _cffe (_dcfag int )string {if _dcfag >=0&&_dcfag < len (_fbae ){if _fbae [_dcfag ]!=""{return _fbae [_dcfag ];};};return _gf .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dcfag );
};const _ddae =57365;

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_fbbd (args ,_bfdef ));};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_cabf :=int (args [0].ValueNumber );return MakeBoolResult (_cabf ==_cabf /2*2);};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_bb :=_e .ToLower (args [0].ValueString );if !_cgaf (_bb ){_ ,_ ,_ ,_ ,_cad ,_bfbf :=_edbe (_bb );if _bfbf .Type ==ResultTypeError {_bfbf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _bfbf ;};if _cad {return MakeNumberResult (0);};};_dbgf ,_fef ,_bbf ,_ ,_gcg :=_fcbd (_bb );if _gcg .Type ==ResultTypeError {return _gcg ;};return MakeNumberResult (_efdc (_dbgf ,_fef ,_bbf ));};

// String returns an empty string for Error.
func (_ggg Error )String ()string {return ""};

// Error is called in the case of parsing error and saves an error to a plex.
func (_aecc *plex )Error (s string ){_af .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_aecc ._bedc =s ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_aefcb :=args [0].AsNumber ();
_dgeg :=args [1].AsNumber ();if _aefcb .Type ==ResultTypeNumber &&_dgeg .Type ==ResultTypeNumber {_acac :=_d .Atan2 (_dgeg .ValueNumber ,_aefcb .ValueNumber );if _acac !=_acac {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_acac );};for _ ,_cdge :=range []ResultType {_aefcb .Type ,_dgeg .Type }{switch _cdge {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _aefcb ;default:return MakeErrorResult (_gf .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdge ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};var _fdfg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
const _cdagb int =30;func (_dfdg node )String ()string {return _gf .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dfdg ._aefcg ,_fedf (string (_dfdg ._eadc )));};const _cefbd =57366;func _bgea (_acf int )bool {if _acf ==_acf /400*400{return true ;};
if _acf ==_acf /100*100{return false ;};return _acf ==_acf /4*4;};

// GetFilename returns an empty string for the invalid reference context.
func (_accd *ivr )GetFilename ()string {return ""};

// Match implements the MATCH function.
func Match (args []Result )Result {_edfee :=len (args );if _edfee !=2&&_edfee !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_efdg :=1;if _edfee ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_ddc :=args [2].ValueNumber ;if _ddc ==-1||_ddc ==0{_efdg =int (_ddc );};};_eggg :=args [1];var _cegf []Result ;switch _eggg .Type {case ResultTypeList :_cegf =_eggg .ValueList ;case ResultTypeArray :_dddga :=_eggg .ValueArray ;for _ ,_dbcf :=range _dddga {if len (_dbcf )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_cegf =append (_cegf ,_dbcf [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_dbecg :=_fdab (args [0]);switch _efdg {case 0:for _ecdd ,_cfde :=range _cegf {if _gdde (_cfde ,_dbecg ){return MakeNumberResult (float64 (_ecdd +1));};};case -1:for _cfag :=0;_cfag < len (_cegf );_cfag ++{if _gdde (_cegf [_cfag ],_dbecg ){return MakeNumberResult (float64 (_cfag +1));
};if _dbecg ._badfb &&(_cegf [_cfag ].ValueNumber < _dbecg ._gfaa ){if _cfag ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cfag ));};};case 1:for _daab :=0;_daab < len (_cegf );_daab ++{if _gdde (_cegf [_daab ],_dbecg ){return MakeNumberResult (float64 (_daab +1));
};if _dbecg ._badfb &&(_cegf [_daab ].ValueNumber > _dbecg ._gfaa ){if _daab ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_daab ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_bcf ,_bdg :=_fd .ParseBool (v );if _bdg !=nil {_af .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_bdg );
};return Bool {_ec :_bcf };};const _fccc =-1000;func (_dacbbb *ivr )SetOffset (col ,row uint32 ){};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbaea :=args [0].AsString ();if _dbaea .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gffea :=_c .Buffer {};_edge :=false ;_fdgdac :=false ;_fafae :=0;for _ ,_eaeefa :=range _dbaea .ValueString {_bgeba :=_eaeefa ==' ';if _bgeba {if !_edge {continue ;};if !_fdgdac {_fafae ++;_gffea .WriteRune (_eaeefa );};}else {_fafae =0;_edge =true ;
_gffea .WriteRune (_eaeefa );};_fdgdac =_bgeba ;};_gffea .Truncate (_gffea .Len ()-_fafae );return MakeStringResult (_gffea .String ());};func _dabdd (_ecefg _bcd .Time )bool {return _bcd .Now ().Sub (_ecefg )>=_afab };

// Eval evaluates a range with prefix returning a list of results or an error.
func (_cfebe PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_daeed :=_cfebe ._dgbf .Reference (ctx ,ev );_gegb :=_cfebe ._aada .Reference (ctx ,ev );_dbcgf :=_cfebe ._gdbf .Reference (ctx ,ev );switch _daeed .Type {case ReferenceTypeSheet :if _daead (_daeed ,ctx ){return MakeErrorResultType (ErrorTypeName ,_gf .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_daeed .Value ));
};_cfee :=_gcfb (_daeed ,_gegb ,_dbcgf );if _gegb .Type ==ReferenceTypeCell &&_dbcgf .Type ==ReferenceTypeCell {if _bdgaf ,_fdebe :=ev .GetFromCache (_cfee );_fdebe {return _bdgaf ;}else {_fedb :=_ebcb (ctx .Sheet (_daeed .Value ),ev ,_gegb .Value ,_dbcgf .Value );
ev .SetCache (_cfee ,_fedb );return _fedb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cfee );default:return MakeErrorResult (_gf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_daeed .Type ));
};};