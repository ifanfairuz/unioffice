//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_b "encoding/hex";_eea "errors";_d "fmt";_g "github.com/ifanfairuz/unioffice/common/tempstorage";_ec "io";_ed "io/ioutil";_ecb "math/rand";_ee "sync";);

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_fa :=memStorage {_bcd :_ee .Map {}};_g .SetAsStorage (&_fa )};

// TempDir creates a name for a new temp directory using a pattern argument
func (_bce *memStorage )TempDir (pattern string )(string ,error ){return _cb (pattern ),nil };func _fca (_ab int )(string ,error ){_fd :=make ([]byte ,_ab );if _ ,_dg :=_ecb .Read (_fd );_dg !=nil {return "",_dg ;};return _b .EncodeToString (_fd ),nil ;
};type memStorage struct{_bcd _ee .Map };

// Open returns tempstorage File object by name
func (_c *memStorage )Open (path string )(_g .File ,error ){_fba ,_de :=_c ._bcd .Load (path );if !_de {return nil ,_eea .New (_d .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_f :_fba .(*memDataCell )},nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_fgfe *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_a :=_fgfe ._f ._gb ;_ef :=int64 (len (p ));if _ef > _a {_ef =_a ;p =p [:_ef ];};if readOffset >=_a {return 0,_ec .EOF ;};_fc :=readOffset +_ef ;if _fc >=_a {_fc =_a ;};_db :=copy (p ,_fgfe ._f ._ae [readOffset :_fc ]);
return _db ,nil ;};type memDataCell struct{_ba string ;_ae []byte ;_gb int64 ;};

// Name returns the filename of the underlying memDataCell
func (_df *memFile )Name ()string {return _df ._f ._ba };func _cb (_edc string )string {_ac ,_ :=_fca (6);return _edc +_ac };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_bc *memFile )Write (p []byte )(int ,error ){_bc ._f ._ae =append (_bc ._f ._ae ,p ...);_bc ._f ._gb +=int64 (len (p ));return len (p ),nil ;};

// Add reads a file from a disk and adds it to the storage
func (_eda *memStorage )Add (path string )error {_ ,_fgg :=_eda ._bcd .Load (path );if _fgg {return nil ;};_ga ,_bb :=_ed .ReadFile (path );if _bb !=nil {return _bb ;};_eda ._bcd .Store (path ,&memDataCell {_ba :path ,_ae :_ga ,_gb :int64 (len (_ga ))});
return nil ;};

// TempFile creates a new empty file in the storage and returns it
func (_cf *memStorage )TempFile (dir ,pattern string )(_g .File ,error ){_cd :=dir +"\u002f"+_cb (pattern );_dd :=&memDataCell {_ba :_cd ,_ae :[]byte {}};_ca :=&memFile {_f :_dd };_cf ._bcd .Store (_cd ,_dd );return _ca ,nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_bd *memFile )Read (p []byte )(int ,error ){_gcg :=_bd ._gc ;_fb :=_bd ._f ._gb ;_fg :=int64 (len (p ));if _fg > _fb {_fg =_fb ;p =p [:_fg ];};if _gcg >=_fb {return 0,_ec .EOF ;};_fgf :=_gcg +_fg ;if _fgf >=_fb {_fgf =_fb ;};_bg :=copy (p ,_bd ._f ._ae [_gcg :_fgf ]);
_bd ._gc =_fgf ;return _bg ,nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_cg *memStorage )RemoveAll (dir string )error {_cg ._bcd .Range (func (_ff ,_edb interface{})bool {_cg ._bcd .Delete (_ff );return true });return nil ;};type memFile struct{_f *memDataCell ;_gc int64 ;};

// Close is not applicable in this implementation
func (_efc *memFile )Close ()error {return nil };